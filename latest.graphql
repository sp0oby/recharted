type Query {
  """Get all active short-lived api tokens for this api key"""
  apiTokens: [ApiToken!]!
  """Get the active short-lived api token for this api key by the short-lived token"""
  apiToken(
    token: String!
  ): ApiToken!
  """Returns a list of all networks supported on Codex."""
  getNetworks: [Network!]!
  """Returns the status of a list of networks supported on Codex."""
  getNetworkStatus(
    """The list of network IDs."""
    networkIds: [Int!]!
  ): [MetadataResponse!]
  """Returns a user's list of webhooks."""
  getWebhooks(
    """The cursor to use for pagination."""
    cursor: String
    """webhookId: The id of the webhook you want to retrieve."""
    webhookId: String
    """bucketId: The bucketId of the webhooks you want to retrieve. Note that bucketId and webhookId are mutually exclusive, do not send both."""
    bucketId: String
    """bucketSortkey: The bucketSortkey of the webhooks you want to retrieve."""
    bucketSortkey: String
    """limit: The maximum number of webhooks to return."""
    limit: Int
  ): GetWebhooksResponse
  """Returns an NFT pool."""
  getNftPool(
    """The contract address of the NFT pool."""
    address: String!
    """The network ID the NFT collection is deployed on."""
    networkId: Int!
  ): NftPoolResponse
  """Returns transactions for an NFT collection across all NFT pools or within a given pool."""
  getNftPoolEvents(
    """The network ID the NFT collection is deployed on."""
    networkId: Int!
    """The contract address of the NFT collection."""
    collectionAddress: String
    """The NFT pool address to filter by."""
    poolAddress: String
    """The NFT AMM marketplace address to filter by."""
    exchangeAddress: String
    """The event types to filter by."""
    eventTypes: [NftPoolEventType!]
    """The time range to filter by."""
    timestamp: EventQueryTimestampInput
    """The cursor to use for pagination."""
    cursor: String
    """The maximum number of NFT pool events to return."""
    limit: Int
  ): NftPoolEventsResponse
  """Returns an NFT pool collection with pool stats for a given AMM NFT marketplace."""
  getNftPoolCollection(
    """The contract address of the NFT collection."""
    collectionAddress: String!
    """The NFT AMM marketplace address to filter by."""
    exchangeAddress: String!
    """The network ID the NFT collection is deployed on."""
    networkId: Int!
  ): NftPoolCollectionResponse
  """Returns an NFT collection with pool stats for a given AMM NFT marketplace."""
  getNftPoolCollectionsByExchange(
    """The NFT AMM marketplace address to filter by."""
    exchangeAddress: String!
    """The network ID the NFT collection is deployed on."""
    networkId: Int!
    """The cursor to use for pagination."""
    cursor: String
    """The maximum number of NFT collections to return."""
    limit: Int
  ): GetNftPoolCollectionsResponse
  """Returns NFT pools for a given collection and AMM NFT marketplace."""
  getNftPoolsByCollectionAndExchange(
    """The contract address of the NFT collection."""
    collectionAddress: String!
    """The NFT AMM marketplace address to filter by."""
    exchangeAddress: String!
    """The network ID the NFT collection is deployed on."""
    networkId: Int!
    """The cursor to use for pagination."""
    cursor: String
    """The maximum number of NFT pools to return."""
    limit: Int
  ): GetNftPoolsResponse
  """Returns a list of NFT pools for a given owner."""
  getNftPoolsByOwner(
    """The contract address of the pool owner."""
    ownerAddress: String!
    """The network ID the NFT collection is deployed on."""
    networkId: Int!
    """The NFT AMM marketplace address to filter by."""
    exchangeAddress: String
    """The cursor to use for pagination."""
    cursor: String
    """The maximum number of NFT pools to return."""
    limit: Int
  ): GetNftPoolsResponse
  """Returns aggregated NFT pool/collection stats for a given time frame."""
  getNftPoolStats(
    """The contract address of the NFT collection."""
    collectionAddress: String!
    """The NFT AMM marketplace address to filter by."""
    exchangeAddress: String!
    """The network ID the NFT collection is deployed on."""
    networkId: Int!
    """The unix timestamp for the start of the requested range."""
    startTime: Int!
    """The unix timestamp for the end of the requested range."""
    endTime: Int!
    """The NFT pool address to filter by."""
    poolAddress: String
  ): NftPoolStatsResponse
  """Returns a list of NFT collection based on a variety of filters."""
  filterNftCollections(
    """A set of filters to apply."""
    filters: NftCollectionFilters
    """A list of ranking attributes to apply."""
    rankings: [NftCollectionRanking]
    """A phrase to search for. Can match a collection contract address or ID (`address`:`networkId`)."""
    phrase: String
    """A list of collection contract addresses or IDs (`address`:`networkId`) to filter by."""
    collections: [String]
    """The maximum number of NFT collections to return."""
    limit: Int
    """Where in the list the server should start when returning items. Use `count`+`offset` from the previous query to request the next page of results."""
    offset: Int
  ): NftCollectionFilterConnection
  """Returns a list of NFT collections based on a variety of filters."""
  filterNftPoolCollections(
    """A set of filters to apply."""
    filters: NftPoolCollectionFilters
    """A phrase to search for. Can partially match an NFT collection name."""
    phrase: String
    """A list of ranking attributes to apply."""
    rankings: [NftPoolCollectionRanking]
    """The maximum number of NFT collections to return."""
    limit: Int
    """Where in the list the server should start when returning items. Use `count`+`page` from the previous query to request the next page of results."""
    offset: Int
  ): NftPoolCollectionFilterConnection
  """Returns a list of NFT collections matching a given query string."""
  searchNfts(
    """The maximum number of NFTs to return."""
    limit: Int
    """The list of network IDs to filter by."""
    networkFilter: [Int!]
    """The time frame to use for calculating stats. Can be `1h`, `4h`, `12h`, or `1d` (default)."""
    window: String
    """The query string to search for. Can match an NFT collection contract address or partially match a collection's name or symbol."""
    search: String
    """The level of NFTs to include in the search. Can be `Asset` or `Collection`."""
    include: [NftSearchable!]
    """Whether to filter collections that could be linked to wash trading"""
    filterWashTrading: Boolean
  ): NftSearchResponse
  """Returns a list of NFT pools based on a variety of filters."""
  filterNftPools(
    """A set of filters to apply."""
    filters: NftPoolFilters
    """A list of ranking attributes to apply."""
    rankings: [NftPoolRanking]
    phrase: String
    """The maximum number of NFT pools to return."""
    limit: Int
    """Where in the list the server should start when returning items. Use `count`+`page` from the previous query to request the next page of results."""
    offset: Int
  ): NftPoolFilterConnection
  """Returns stats for an NFT collection across different time frames."""
  getNftCollectionMetadata(
    """The ID of the NFT collection (`address`:`networkId`). For example, `0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d:1`."""
    collectionId: String @deprecated(reason: "Use address & networkId instead.")
    """The contract address of the NFT collection."""
    address: String
    """The network ID the NFT collection is deployed on."""
    networkId: Int
  ): NftCollectionMetadataResponse
  """Returns a list of NFT assets in a given collection."""
  getNftAssets(
    """The contract address of the NFT collection."""
    address: String!
    """The network ID the NFT collection is deployed on."""
    networkId: Int!
    """An optional list of token IDs to filter by."""
    tokenIds: [String]
    """Whether to trigger fetching onchain metadata for missing assets. Defaults to false. Fetch results are delayed and can be ingested realtime via onNftAssetsCreated subscription. Free tier API users are limited to 1 missing asset fetch per request, and may only retry fetching a missing asset once per week. To remove these limitations, please upgrade your API plan at https://www.dashboard.defined.fi/plan."""
    fetchMissingAssets: Boolean
    """The cursor to use for pagination."""
    cursor: String
    """The maximum number of NFT assets to return."""
    limit: Int
  ): NftAssetsConnection
  """Returns bucketed stats for a given NFT collection."""
  getDetailedNftStats(
    """The contract address of the NFT collection."""
    collectionAddress: String!
    """The network ID the NFT collection is deployed on."""
    networkId: Int!
    """The marketplace address to filter by. Can be used to get marketplace-specific metrics, otherwise uses all."""
    grouping: String
    """The unix timestamp for the stats. Defaults to current."""
    timestamp: Int
    """The list of durations to get detailed pair stats for."""
    durations: [DetailedNftStatsDuration]
    """The number of aggregated values to receive. Note: Each duration has predetermined bucket sizes. The first n-1 buckets are historical. The last bucket is a snapshot of current data. duration `day1`: 6 buckets (4 hours each) plus 1 partial bucket duration `hour12`: 12 buckets (1 hour each) plus 1 partial bucket duration `hour4`: 8 buckets (30 min each) plus 1 partial bucket duration `hour1`: 12 buckets (5 min each) plus 1 partial bucket duration `min5`: 5 buckets (1 min each) plus 1 partial bucket For example, requesting 11 buckets for a `min5` duration will return the last 10 minutes worth of data plus a snapshot for the current minute."""
    bucketCount: Int
  ): DetailedNftStats
  """Returns transactions for an NFT collection across any marketplace(s)."""
  getNftEvents(
    """The contract address of the NFT collection."""
    address: String
    """The NFT marketplace address to filter by."""
    exchangeAddress: String
    """The NFT pool address to filter by."""
    poolAddress: String
    """The network ID the NFT collection is deployed on."""
    networkId: Int!
    """The token ID to filter by."""
    tokenId: String
    """The cursor to use for pagination."""
    cursor: String
    """The time range to filter by."""
    timestamp: EventQueryTimestampInput
    """The maximum number of NFT events to return."""
    limit: Int
    includeTransfers: Boolean
  ): NftEventsConnection
  """Returns a list of NFT collection metadata."""
  getNftContracts(
    """A list of NFT contract address and network IDs."""
    contracts: [NftContractInput]
  ): [EnhancedNftContract]
  """Returns a list of Parallel assets based on a variety of filters."""
  filterNftParallelAssets(
    """A set of filters to apply."""
    filters: ParallelAssetFilters
    """A phrase to search for. Can match a Parallel asset ID (`address`:`tokenId`) or partially match a name."""
    phrase: String
    """A set of parameters to match."""
    match: ParallelAssetMatchers
    """A list of ranking attributes to apply."""
    rankings: [ParallelAssetRanking]
    """The maximum number of Parallel assets to return."""
    limit: Int
    """Where in the list the server should start when returning items. Use `count`+`offset` from the previous query to request the next page of results."""
    offset: Int
  ): ParallelAssetFilterConnection
  """Returns changes made to Parallel card metadata over time."""
  getParallelCardChanges(
    """The token ID for a Parallel asset."""
    tokenId: String
    """The time frame to request card changes."""
    timestamp: ParallelCardChangeQueryTimestampInput
    """The cursor to use for pagination."""
    cursor: String
    """The maximum number of Parallel card changes to return."""
    limit: Int
  ): ParallelCardChangesConnection
  """Returns a list of Prime pool cached assets."""
  getPrimePoolAssets(
    """The network ID the Prime pool is deployed on."""
    networkId: Int!
    """The contract address of the Prime pool."""
    poolContractAddress: String
    """The pool ID for the Prime pool, within the contract."""
    poolId: String
    """The owner wallet address to filter assets by."""
    walletAddress: String
    """The maximum number of Prime Pool assets to return."""
    limit: Int
    """The cursor to use for pagination."""
    cursor: String
  ): PrimePoolAssetConnection
  """Returns a list of Prime pool events."""
  getPrimePoolEvents(
    """The network ID the Prime pool is deployed on."""
    networkId: Int!
    """The contract address of the Prime pool."""
    poolContractAddress: String
    """The pool ID for the Prime pool, within the contract."""
    poolId: String
    """The calling wallet address to filter events by."""
    walletAddress: String
    """The event types to query for."""
    eventTypes: [PrimePoolEventType]
    """The maximum number of Prime Pool events to return."""
    limit: Int
    """The cursor to use for pagination."""
    cursor: String
  ): PrimePoolEventConnection
  """Returns a list of Prime pools."""
  getPrimePools(
    """The contract address for the prime pool."""
    address: String!
    """The network ID the prime pool is deployed on."""
    networkId: Int!
    """An optional list of pool IDs to filter by."""
    poolIds: [String]
    """The maximum number of Prime pools to return."""
    limit: Int
    """The cursor to use for pagination."""
    cursor: String
  ): PrimePoolConnection
  """Returns list of wallets that hold a given collection, ordered by holdings descending. Also has the unique count of holders for that collection."""
  nftHolders(
    input: NftHoldersInput!
  ): NftHoldersResponse!
  """Returns list of collections and quantity of NFTs held by a given wallet."""
  walletNftCollections(
    input: WalletNftCollectionsInput!
  ): WalletNftCollectionsResponse!
  """Returns list of NFT assets held by a given wallet for a single collection."""
  walletNftCollectionAssets(
    input: WalletNftCollectionAssetsInput!
  ): WalletNftCollectionAssetsResponse!
  """Returns a list of tokens based on a variety of filters."""
  filterTokens(
    """A set of filters to apply."""
    filters: TokenFilters
    """The type of statistics returned. Can be `FILTERED` or `UNFILTERED`"""
    statsType: TokenPairStatisticsType
    """A phrase to search for. Can match a token contract address or partially match a token's name or symbol."""
    phrase: String
    """A list of token IDs (`address:networkId`) or addresses. Can be left blank to discover new tokens."""
    tokens: [String]
    """A list of token IDs (`address:networkId`) to exclude from results"""
    excludeTokens: [String]
    """A list of ranking attributes to apply."""
    rankings: [TokenRanking]
    """The maximum number of tokens to return."""
    limit: Int
    """Where in the list the server should start when returning items. Use `count`+`page` from the previous query to request the next page of results."""
    offset: Int
  ): TokenFilterConnection
  """Returns a list of pairs based on a variety of filters."""
  filterPairs(
    """A set of filters to apply."""
    filters: PairFilters
    """The type of statistics returned. Can be `FILTERED` or `UNFILTERED`"""
    statsType: TokenPairStatisticsType
    """A phrase to search for. Can match a token or pair contract address or ID (`address:networkId`), or partially match a token name or symbol."""
    phrase: String
    """A list of pair or token contract addresses or IDs (`address:networkId`) to filter by."""
    pairs: [String]
    """A set of token contract addresses that make up a pair. Can be used in place of a pair contract address."""
    matchTokens: PairFilterMatchTokens
    """A list of ranking attributes to apply."""
    rankings: [PairRanking]
    """The maximum number of pairs to return."""
    limit: Int
    """Where in the list the server should start when returning items. Use `count`+`offset` from the previous query to request the next page of results."""
    offset: Int
  ): PairFilterConnection
  """Returns a list of exchanges based on a variety of filters."""
  filterExchanges(
    """A set of filters to apply."""
    filters: ExchangeFilters
    """A phrase to search for. Can match an exchange address or ID (`address:networkId`), or partially match an exchange name."""
    phrase: String
    """A list of ranking attributes to apply."""
    rankings: [ExchangeRanking]
    """The maximum number of exchanges to return."""
    limit: Int
    """Where in the list the server should start when returning items. Use `count`+`offset` from the previous query to request the next page of results."""
    offset: Int
  ): ExchangeFilterConnection
  """Returns bucketed stats for a given token within a pair."""
  getDetailedStats(
    """The ID of the pair (`address:networkId`)."""
    pairId: String!
    """The token of interest used to calculate token-specific stats for the pair. Can be `token0` or `token1`."""
    tokenOfInterest: TokenOfInterest
    """The unix timestamp for the stats. Defaults to current."""
    timestamp: Int
    """The list of window sizes to get detailed stats for."""
    windowSizes: [DetailedStatsWindowSize]
    """The number of aggregated values to receive. Note: Each duration has predetermined bucket sizes. The first n-1 buckets are historical. The last bucket is a snapshot of current data. duration `day1`: 6 buckets (4 hours each) plus 1 partial bucket duration `hour12`: 12 buckets (1 hour each) plus 1 partial bucket duration `hour4`: 8 buckets (30 min each) plus 1 partial bucket duration `hour1`: 12 buckets (5 min each) plus 1 partial bucket duration `min5`: 5 buckets (1 min each) plus 1 partial bucket For example, requesting 11 buckets for a `min5` duration will return the last 10 minutes worth of data plus a snapshot for the current minute."""
    bucketCount: Int
    """The type of statistics returned. Can be `FILTERED` or `UNFILTERED`"""
    statsType: TokenPairStatisticsType
  ): DetailedStats @deprecated(reason: "Use `getDetailedPairStats` instead, it has more resolutions and better support")
  """Returns bucketed stats for a given token within a pair."""
  getDetailedPairStats(
    """The contract address of the pair."""
    pairAddress: String!
    """The network ID the pair is deployed on."""
    networkId: Int!
    """The token of interest used to calculate token-specific stats for the pair. Can be `token0` or `token1`."""
    tokenOfInterest: TokenOfInterest
    """The unix timestamp for the stats. Defaults to current."""
    timestamp: Int
    """The list of durations to get detailed pair stats for."""
    durations: [DetailedPairStatsDuration]
    """The number of aggregated values to receive. Note: Each duration has predetermined bucket sizes. The first n-1 buckets are historical. The last bucket is a snapshot of current data. duration `day1`: 6 buckets (4 hours each) plus 1 partial bucket duration `hour12`: 12 buckets (1 hour each) plus 1 partial bucket duration `hour4`: 8 buckets (30 min each) plus 1 partial bucket duration `hour1`: 12 buckets (5 min each) plus 1 partial bucket duration `min5`: 5 buckets (1 min each) plus 1 partial bucket For example, requesting 11 buckets for a `min5` duration will return the last 10 minutes worth of data plus a snapshot for the current minute."""
    bucketCount: Int
    """The type of statistics returned. Can be `FILTERED` or `UNFILTERED`"""
    statsType: TokenPairStatisticsType
  ): DetailedPairStats
  """Returns bucketed stats for a given token within a list of pairs."""
  getDetailedPairsStats(
    input: [GetDetailedPairsStatsInput!]!
  ): [DetailedPairStats]
  """Returns a list of trending tokens across any given network(s)."""
  listTopTokens(
    """The maximum number of tokens to return. Max is `50`."""
    limit: Int
    """The list of network IDs to filter by."""
    networkFilter: [Int!]
    """The time frame for trending results. Can be `1`, `5`, `15`, `30`, `60`, `240`, `720`, or `1D`."""
    resolution: String
  ): [TokenWithMetadata!] @deprecated(reason: "This query is no longer supported and will not return up to date data. Use `filterTokens` instead.")
  """Returns charting metadata for a given pair. Used for implementing a Trading View datafeed."""
  getSymbol(
    """The ID of the pair (`address:networkId`)."""
    symbol: String!
    """The currency to use for the response. Can be `USD` (default) or `TOKEN`."""
    currencyCode: String
  ): SymbolResponse
  """Returns metadata for a given network supported on Codex."""
  getNetworkStats(
    """The network Id to filter by."""
    networkId: Int!
    """The exchange address to filter by (optional)."""
    exchangeAddress: String
  ): GetNetworkStatsResponse
  """Returns transactions for a pair."""
  getTokenEvents(
    """The maximum number of transactions to return."""
    limit: Int
    """The query filters to apply to the results."""
    query: EventsQueryInput!
    """The cursor to use for pagination."""
    cursor: String
    """The order to receive the token events. Can be `DESC` (default) or `ASC`."""
    direction: RankingDirection
  ): EventConnection
  """Returns a list of token events for a given maker."""
  getTokenEventsForMaker(
    """The maximum number of events to return."""
    limit: Int
    """The query filters to apply to the results."""
    query: MakerEventsQueryInput!
    """The cursor to use for pagination."""
    cursor: String
    """The order to receive the token events. Can be `DESC` (default) or `ASC`."""
    direction: RankingDirection
  ): MakerEventConnection
  """Returns real-time or historical prices for a list of tokens, fetched in batches."""
  getTokenPrices(
    """A list of `GetPriceInput`s. Accepts a maximum of 25 inputs (anything over will be truncated)."""
    inputs: [GetPriceInput]
  ): [Price]
  """Returns bar chart data to track price changes over time."""
  getBars(
    """The ID of the pair or token (`pairAddress:networkId` or `tokenAddress:networkId`). If a token contract address is provided, the token's top pair is used. For example, `0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:1` returns WETH's top pair on Ethereum."""
    symbol: String!
    """The unix timestamp for the start of the requested range."""
    from: Int!
    """The unix timestamp for the end of the requested range."""
    to: Int!
    """The time frame for each candle. Available options are `1S`, `5S`, `15S`, `30S`, `1`, `5`, `15`, `30`, `60`, `240`, `720`, `1D`, `7D`. Resolutions lower than 1 minute are only updated for the last 24 hours due to the volume of data produced."""
    resolution: String!
    """The currency to use for the response. Can be `USD` or `TOKEN`. Default is `USD`. Use `currencyCode: TOKEN` for native token pricing."""
    currencyCode: String
    """Whether to remove leading null values from the response. Default is `false`. To fetch a token's entire history, set resolution to `1D`, `from` value to `0` and `removeLeadingNullValues` to `true`."""
    removeLeadingNullValues: Boolean
    """Whether to remove empty bars from the response. This is useful for eliminating gaps in low-activity tokens. Default is `false`."""
    removeEmptyBars: Boolean
    """The token of interest within the token's top pair. Can be `token0` or `token1`. If omitted, the base token is inferred automatically. You can invert the pair by quoting the other token."""
    quoteToken: QuoteToken
    """The type of statistics returned. Can be `FILTERED` or `UNFILTERED`."""
    statsType: TokenPairStatisticsType
    """Guarantees number of bars returned is at most this number. Use `countback: 1500` with `from: 0` for maximum results."""
    countback: Int
    """Specify the type of symbol you want to fetch values for. Can be `TOKEN` or `POOL`."""
    symbolType: SymbolType
  ): BarsResponse
  """Returns a list of tokens matching a given query string."""
  searchTokens(
    """The maximum number of tokens to return."""
    limit: Int
    """Whether to filter out low volume results from the response. Low volume is less than $500 USD. This setting has no effect when only low volume results are found. Default is `true`."""
    lowVolumeFilter: Boolean
    """The list of network IDs to filter by."""
    networkFilter: [Int!]
    """The time frame to use for token metadata. Can be `60`, `240`, `720`, or `1D`."""
    resolution: String
    """The query string to search for. Can match a token or pair contract address or partially match a token's name or symbol. Automatically filters out tokens marked as scams."""
    search: String!
  ): TokenSearchResponse @deprecated(reason: "This query is no longer supported and will not return up to date data. Use `filterTokens` instead.")
  """Returns the percentage of a token's total supply held collectively by its top 10 holders."""
  top10HoldersPercent(
    tokenId: String!
  ): Float
  """Returns a list of decentralized exchange metadata."""
  getExchanges(
    """Get exchanges with missing fields. Default is `false`."""
    showNameless: Boolean
  ): [Exchange!]!
  """Returns a URL for a pair chart."""
  chartUrls(
    """Input required to fetch a pair chart."""
    input: ChartInput!
  ): ChartUrlsResponse
  """Returns a list of event labels for a pair."""
  getEventLabels(
    """The ID of the pair (`address:networkId`)."""
    id: String!
    """The maximum number of event labels to return."""
    limit: Int
    """The cursor to use for pagination."""
    cursor: String
    """The order to receive the token event labels. Can be `DESC` (default) or `ASC`."""
    direction: RankingDirection
  ): EventLabelConnection
  """Returns a list of token lifecycle events."""
  tokenLifecycleEvents(
    """The maximum number of events to return."""
    limit: Int
    """The query filters to apply to the results."""
    query: TokenLifecycleEventsQueryInput!
    """The cursor to use for pagination."""
    cursor: String
  ): TokenLifecycleEventConnection
  """Returns a single token by its address & network id."""
  token(
    """Input for a token ID."""
    input: TokenInput!
  ): EnhancedToken!
  """Returns a list of tokens by their addresses & network id, with pagination."""
  tokens(
    """A list of token ID input."""
    ids: [TokenInput!]
  ): [EnhancedToken]!
  """Returns metadata for a pair of tokens."""
  pairMetadata(
    """The ID of the pair (`address:networkId`)."""
    pairId: String!
    """The token of interest within the pair. Can be `token0` or `token1`."""
    quoteToken: QuoteToken
    """The type of statistics returned. Can be `FILTERED` or `UNFILTERED`"""
    statsType: TokenPairStatisticsType
  ): PairMetadata!
  """Returns new tokens listed over the last three days."""
  getLatestPairs(
    """The maximum number of tokens to return."""
    limit: Int
    """The list of network IDs to filter by."""
    networkFilter: [Int!]
    """The list of exchanges to filter by."""
    exchangeFilter: [String!]
    """The minimum amount of liquidity to filter by."""
    minLiquidityFilter: Int
    """The cursor to use for pagination."""
    cursor: String
  ): LatestPairConnection @deprecated(reason: "This query is longer supported. Instead use filterPairs with sort order on createdAt DESC")
  """Returns a list of pairs containing a given token."""
  listPairsForToken(
    """The maximum number of pairs to return."""
    limit: Int
    """The network ID the token is deployed on."""
    networkId: Int!
    """The contract address of the token."""
    tokenAddress: String!
  ): [Pair]!
  """Returns a list of pair metadata for a token."""
  listPairsWithMetadataForToken(
    """The maximum number of pairs to return."""
    limit: Int
    """The network ID the token is deployed on."""
    networkId: Int!
    """The contract address of the token."""
    tokenAddress: String!
  ): ListPairsForTokenResponse!
  """Returns a list of token simple chart data (sparklines) for the given tokens."""
  tokenSparklines(
    input: TokenSparklineInput!
  ): [TokenSparkline!]!
  """Returns list of token balances that a wallet has."""
  balances(
    input: BalancesInput!
  ): BalancesResponse!
  """Returns list of wallets that hold a given token, ordered by holdings descending. Also has the unique count of holders for that token."""
  holders(
    input: HoldersInput!
  ): HoldersResponse!
  """Returns a list of holders of the PRIME token on ethereum."""
  primeHolders(
    """Included in the results. Use the string as an argument to paginate through all the holders."""
    cursor: String
  ): PrimeHolders!
  """Returns a list of latest tokens."""
  getLatestTokens(
    """The maximum number of tokens to return. Maximum number of tokens is 50."""
    limit: Int
    """The list of network IDs to filter by."""
    networkFilter: [Int!]
    """The offset to use for pagination."""
    offset: Int
  ): LatestTokenConnection @deprecated(reason: "This query is no longer supported. Use `filterTokens` with a createdAt: DESC filter instead.")
  """Returns liquidity locks for a given pair."""
  liquidityLocks(
    """The address of the pair."""
    pairAddress: String
    """The address of the token."""
    tokenAddress: String
    """The network id of the pair."""
    networkId: Int!
    """A cursor for use in pagination."""
    cursor: String
  ): LiquidityLockConnection
  """Returns liquidity metadata for a given pair. Includes liquidity lock data."""
  liquidityMetadata(
    """The address of the pair."""
    pairAddress: String!
    """The network id of the pair."""
    networkId: Int!
  ): LiquidityMetadata
  """Returns liquidity metadata for a given token. Includes liquidity lock data for up to 100 pairs that the token is in."""
  liquidityMetadataByToken(
    """The address of the token."""
    tokenAddress: String!
    """The network id of the token."""
    networkId: Int!
  ): LiquidityMetadataByToken!
  """Once a wallet backfill has been triggered, this query can be used to check the status of the backfill."""
  walletAggregateBackfillState(
    input: WalletAggregateBackfillStateInput!
  ): WalletAggregateBackfillStateResponse!
  """Returns a list of top traders for a given token."""
  tokenTopTraders(
    input: TokenTopTradersInput!
  ): TokenTopTradersConnection!
  """Returns a list of wallets based on a variety of filters."""
  filterWallets(
    input: FilterWalletsInput!
  ): WalletFilterConnection!
  """Returns a list of wallets with stats narrowed down to a specific network."""
  filterNetworkWallets(
    input: FilterNetworkWalletsInput!
  ): NetworkWalletFilterConnection! @deprecated(reason: "Use filterWallets instead")
  """Returns a list of wallets with stats narrowed down to a specific token."""
  filterTokenWallets(
    input: FilterTokenWalletsInput!
  ): TokenWalletFilterConnection!
  """Returns detailed stats for a wallet."""
  detailedWalletStats(
    input: DetailedWalletStatsInput!
  ): DetailedWalletStats
  """Returns a chart of a wallet's activity."""
  walletChart(
    input: WalletChartInput!
  ): WalletChartResponse
  """Returns community gathered notes."""
  getCommunityNotes(
    input: CommunityNotesInput
  ): CommunityNotesResponse!
}

type Mutation {
  """Create a new set of short-lived api access tokens"""
  createApiTokens(
    input: CreateApiTokensInput!
  ): [ApiToken!]!
  """Delete a single short-lived api access token by id"""
  deleteApiToken(
    id: String!
  ): String!
  """Create price, raw transaction, token/pair event, and NFT event webhooks."""
  createWebhooks(
    """input: Input for creating webhooks."""
    input: CreateWebhooksInput!
  ): CreateWebhooksOutput!
  """Delete multiple webhooks."""
  deleteWebhooks(
    """input: Input for deleting webhooks."""
    input: DeleteWebhooksInput!
  ): DeleteWebhooksOutput
  """Backfill wallet aggregates (trading stats) for a given wallet. This is the data used in the filterWallet/filterTokenWallets and detailedWalletStats queries."""
  backfillWalletAggregates(
    input: WalletAggregateBackfillInput!
  ): WalletAggregateBackfillStateResponse!
}

type Subscription {
  """Live-streamed transactions for an NFT collection."""
  onNftEventsCreated(
    """The contract address for the NFT collection."""
    address: String
    """The network ID the NFT collection is deployed on."""
    networkId: Int
  ): AddNftEventsOutput
  """Live-streamed transactions for an NFT asset."""
  onNftAssetsCreated(
    """The contract address for the NFT collection"""
    address: String
    """The network ID the NFT collection is deployed on."""
    networkId: Int
    """The token ID of the NFT asset."""
    tokenId: String
  ): NftAsset
  """Live streamed NFT pool events for a given pool address or collection address."""
  onNftPoolEventsCreated(
    """The NFT pool address to filter by."""
    poolAddress: String
    """The network ID to filter by."""
    networkId: Int
    """The contract address of the NFT collection to filter by."""
    collectionAddress: String
    """The contract address of the NFT AMM marketplace to filter by."""
    exchangeAddress: String
  ): AddNftPoolEventsOutput
  """Live-streamed bar chart data to track price changes over time."""
  onBarsUpdated(
    """The ID of the pair (`address`:`networkId`)."""
    pairId: String
    """The token of interest within the pair. Can be `token0` or `token1`."""
    quoteToken: QuoteToken
  ): OnBarsUpdatedResponse
  """Unconfirmed live-streamed bar chart data to track price changes over time. (Solana only)"""
  onUnconfirmedBarsUpdated(
    """The ID of the pair (`address`:`networkId`)."""
    pairId: String
    """The token of interest within the pair. Can be `token0` or `token1`."""
    quoteToken: QuoteToken
  ): OnUnconfirmedBarsUpdated
  """Live-streamed bar chart data to track price changes over time for a token."""
  onTokenBarsUpdated(
    """The ID of the pair (`address`:`networkId`)."""
    tokenId: String
    """The networkId to use when getting all bars per network"""
    networkId: Int
  ): OnTokenBarsUpdatedResponse
  """Live-streamed transactions for a token."""
  onEventsCreated(
    """The pair contract address."""
    address: String
    """The ID of the pair (`address`:`networkId`)."""
    id: String
    """The token of interest within the pair. Can be `token0` or `token1`."""
    quoteToken: QuoteToken
    """The networkId to use when getting all events per network"""
    networkId: Int
  ): AddEventsOutput
  """Live-streamed transactions for a maker."""
  onEventsCreatedByMaker(
    input: OnEventsCreatedByMakerInput!
  ): AddEventsByMakerOutput
  """Live-streamed unconfirmed transactions for a token. (Solana only)"""
  onUnconfirmedEventsCreated(
    """The pair contract address."""
    address: String
    """The ID of the pair (`address`:`networkId`)."""
    id: String
    """The token of interest within the pair. Can be `token0` or `token1`."""
    quoteToken: QuoteToken
  ): AddUnconfirmedEventsOutput
  """Live-streamed unconfirmed transactions for a maker. (Solana only)"""
  onUnconfirmedEventsCreatedByMaker(
    input: OnUnconfirmedEventsCreatedByMakerInput!
  ): AddUnconfirmedEventsByMakerOutput
  """Live-streamed price updates for a token."""
  onPriceUpdated(
    """The token contract address."""
    address: String
    """The network ID the token is deployed on."""
    networkId: Int
    """The pair contract address from which to get pricing"""
    sourcePairAddress: String
  ): Price
  """Live-streamed price updates for multiple tokens."""
  onPricesUpdated(
    input: [OnPricesUpdatedInput!]!
  ): Price!
  """Live-streamed stat updates for a given token within a pair."""
  onPairMetadataUpdated(
    """The ID of the pair (`address`:`networkId`)."""
    id: String
    """The token of interest within the pair. Can be `token0` or `token1`."""
    quoteToken: QuoteToken
  ): PairMetadata
  """Live-streamed bucketed stats for a given token within a pair."""
  onDetailedStatsUpdated(
    """The ID of the pair (`address`:`networkId`)."""
    pairId: String
    """The token of interest within the pair. Can be `token0` or `token1`."""
    tokenOfInterest: TokenOfInterest
  ): DetailedStats
  """Live-streamed updates for newly listed pairs."""
  onLatestPairUpdated(
    """The ID of the pair (`address`:`networkId`)."""
    id: String
    """The network ID the pair is deployed on."""
    networkId: Int
  ): LatestPair @deprecated(reason: "No longer supported")
  """Live-streamed updates for newly listed tokens."""
  onLatestTokens(
    """The ID of the token (`tokenAddress`:`networkId`)."""
    id: String
    """The network ID the token is deployed on."""
    networkId: Int
    """The address of the token contract."""
    tokenAddress: String
  ): LatestToken @deprecated(reason: "No longer supported")
  """Live-streamed event labels for a token."""
  onEventLabelCreated(
    """The ID of the pair (`address`:`networkId`)."""
    id: String
  ): EventLabel
  """Live-streamed events for a given token across all it's pools"""
  onTokenEventsCreated(
    input: OnTokenEventsCreatedInput!
  ): AddTokenEventsOutput!
  """Live-streamed list of wallets that hold a given token. Also has the unique count of holders for that token."""
  onHoldersUpdated(
    tokenId: String!
  ): HoldersUpdate
  """Live-streamed balance updates for a given wallet."""
  onBalanceUpdated(
    walletAddress: String!
  ): Balance!
  """Live-streamed token lifecycle events (mints and burns)."""
  onTokenLifecycleEventsCreated(
    """The token contract address."""
    address: String
    """The network ID the token is deployed on."""
    networkId: Int
  ): AddTokenLifecycleEventsOutput!
  """Live-streamed launchpad token events batched (more efficient)."""
  onLaunchpadTokenEventBatch(
    input: OnLaunchpadTokenEventBatchInput
  ): [LaunchpadTokenEventOutput!]!
  """Live-streamed launchpad token event."""
  onLaunchpadTokenEvent(
    input: OnLaunchpadTokenEventInput
  ): LaunchpadTokenEventOutput!
}

"""Response returned by `onEventsCreatedByMaker`."""
type AddEventsByMakerOutput {
  """The address of the maker."""
  makerAddress: String!
  """A list of transactions for the maker."""
  events: [Event!]!
}

"""Response returned by `onEventsCreated`."""
type AddEventsOutput {
  """The contract address of the pair."""
  address: String!
  """The network ID that the token is deployed on."""
  networkId: Int!
  """The ID of the event (`address`:`networkId`). For example, `0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:1`."""
  id: String!
  """The token of interest within the pair. Can be `token0` or `token1`."""
  quoteToken: QuoteToken
  """A list of transactions for the token."""
  events: [Event]!
}

"""Response returned by `onNftEventsCreated`."""
type AddNftEventsOutput {
  """The contract address of the NFT collection."""
  address: String!
  """The network ID the collection is deployed on."""
  networkId: Int!
  """The id of the collection (`address`:`networkId`)."""
  id: String!
  """A list of NFT transactions streaming real-time."""
  events: [NftEvent]!
}

"""Response returned by `onNftPoolEventsCreated`."""
type AddNftPoolEventsOutput {
  collectionAddress: String!
  exchangeAddress: String!
  poolAddress: String!
  networkId: Int!
  id: String!
  events: [NftPoolEvent]!
}

"""Response returned by `onTokenEventsCreated`."""
type AddTokenEventsOutput {
  """The ID of the event (`address`:`networkId`). For example, `0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:1`."""
  id: String!
  """A list of transactions for the token."""
  events: [Event!]!
}

"""Response returned by `onTokenLifecycleEventsCreated`."""
type AddTokenLifecycleEventsOutput {
  id: String!
  events: [TokenLifecycleEvent!]!
}

"""Response returned by `onUnconfirmedEventsCreatedByMaker`."""
type AddUnconfirmedEventsByMakerOutput {
  """The wallet address of the maker."""
  makerAddress: String!
  """A list of transactions for the maker."""
  events: [UnconfirmedEvent!]!
}

"""Response returned by `onUnconfirmedEventsCreated`."""
type AddUnconfirmedEventsOutput {
  """The contract address of the pair."""
  address: String!
  """The network ID that the token is deployed on."""
  networkId: Int!
  """The ID of the event (`address`:`networkId`). For example, `0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:1`."""
  id: String!
  """The token of interest within the pair. Can be `token0` or `token1`."""
  quoteToken: QuoteToken
  """A list of transactions for the token."""
  events: [UnconfirmedEvent]!
}

"""The recurrence of the webhook. Can be `INDEFINITE` or `ONCE`."""
enum AlertRecurrence {
  INDEFINITE
  ONCE
}

type ApiToken {
  """Unique identifier for the token"""
  id: String!
  """JWT to be passed into the Authorization header for API requests"""
  token: String!
  """ISO time string for the expiry of the token"""
  expiresTimeString: String!
  """Number of root fields this api token is allowed to resolve before it's rate limited"""
  requestLimit: String!
  """Approximate number of remaining resolutions before this token is rate limited"""
  remaining: String
}

type ArenaTradeData {
  """Protocol specific token ID"""
  tokenId: String
  type: String!
}

"""Wallet balance of a token."""
type Balance {
  """The ID of the wallet (`walletAddress:networkId`)."""
  walletId: String!
  """The ID of the token (`tokenAddress:networkId`)."""
  tokenId: String!
  """The wallet address."""
  address: String!
  """The wallet network."""
  networkId: Int!
  """The contract address of the token."""
  tokenAddress: String!
  """The balance held by the wallet."""
  balance: String!
  """The balance held by the wallet, adjusted by the number of decimals in the token."""
  shiftedBalance: Float!
  """The balance held by the wallet in USD."""
  balanceUsd: String
  """The token price in USD."""
  tokenPriceUsd: String
  """The time that this address first held a token."""
  firstHeldTimestamp: Int
  """Metadata for the token."""
  token: EnhancedToken
}

input BalancesInput {
  """The wallet address to filter by."""
  walletAddress: String
  """The network IDs to filter by."""
  networks: [Int!]
  """The token IDs (`address:networkId`) or addresses to request the balance for. Requires a list of `networks` if only passing addresses. Include native network balances using `native` as the token address. Only applied when using `walletAddress` (not `walletId`). Max 200 tokens."""
  tokens: [String!]
  """Whether to include native network balances in the response (ID will be native:&lt;networkId&gt;). Requires a list of `networks`. Does not apply when using `tokens`."""
  includeNative: Boolean
  """The maximum number of holdings to return. Does not apply when using `tokens`."""
  limit: Int
  """A cursor for use in pagination."""
  cursor: String
  """Whether to remove scam tokens from the response."""
  removeScams: Boolean
  """The ID of the wallet (`walletAddress:networkId`)."""
  walletId: String @deprecated(reason: "Use walletAddress and networkId instead")
  """Optional token specifically request the balance for. Only works with `walletId`."""
  filterToken: String @deprecated(reason: "Use tokens list instead")
}

type BalancesResponse {
  """The list of token balances that a wallet has."""
  items: [Balance!]!
  """A cursor for use in pagination."""
  cursor: String
}

"""Bar chart data to track price changes over time."""
type BarsResponse {
  """The opening price."""
  o: [Float]!
  """The high price."""
  h: [Float]!
  """The low price."""
  l: [Float]!
  """The closing price."""
  c: [Float]!
  """The volume."""
  v: [Int]! @deprecated(reason: "Use volume field instead")
  """The timestamp for the bar."""
  t: [Int!]!
  """The status code for the batch: `ok` for successful data retrieval and `no_data` for empty responses signaling the end of server data."""
  s: String!
  """The volume with higher precision."""
  volume: [String]
  """The volume in the native token for the network"""
  volumeNativeToken: [String]
  """The number of unique buyers"""
  buyers: [Int]!
  """The number of buys"""
  buys: [Int]!
  """The buy volume in USD"""
  buyVolume: [String]!
  """The number of unique sellers"""
  sellers: [Int]!
  """The number of sells"""
  sells: [Int]!
  """The sell volume in USD"""
  sellVolume: [String]!
  """Liquidity in USD"""
  liquidity: [String]!
  """The number of traders"""
  traders: [Int]!
  """The number of transactions"""
  transactions: [Int]!
  """The pair that is being returned"""
  pair: Pair!
}

"""The mathematical formula that defines how the prices of NFTs change after each buy or sell within a pool."""
enum BondingCurveType {
  EXPONENTIAL
  LINEAR
  XYK
  GDA
}

"""Event data for a token burn event."""
type BurnEventData {
  """The amount of `token0` removed from the pair."""
  amount0: String
  """The amount of `token1` removed from the pair."""
  amount1: String
  """The amount of `token0` removed from the pair, adjusted by the number of decimals in the token. For example, if `amount0` is in WEI, `amount0Shifted` will be in ETH."""
  amount0Shifted: String
  """The amount of `token1` removed from the pair, adjusted by the number of decimals in the token. For example, USDC `amount1Shifted` will be by 6 decimals."""
  amount1Shifted: String
  """The lower tick boundary of the position. Only applicable for UniswapV3 events."""
  tickLower: String
  """The upper tick boundary of the position. Only applicable for UniswapV3 events."""
  tickUpper: String
  """The type of token event, `Burn`."""
  type: EventType!
}

"""Input options for the chart image."""
input ChartImageOptions {
  """The expiry time of the image in seconds. Max: 172800 (2 days). Default: 900 (15 minutes)."""
  expirationSeconds: Int
  """The width of the image in pixels. Max: 1200. Default: 800."""
  width: Int
  """The height of the image in pixels. Max: 1200. Default: 450."""
  height: Int
}

"""Input type of `chartUrls`."""
input ChartInput {
  """The input required to fetch a pair chart."""
  pair: PairChartInput
}

"""The color theme of the chart."""
enum ChartTheme {
  LIGHT
  DARK
}

"""The chart url."""
type ChartUrl {
  """The chart url."""
  url: String!
}

"""The response type for a chart url query."""
type ChartUrlsResponse {
  """The pair chart url."""
  pair: ChartUrl!
}

"""Community gathered proposals for an asset."""
type CommunityNote {
  """The contract address of the contract."""
  address: String!
  contractType: ContractType!
  currentContract: EnhancedContract
  """The contract after the community note was applied."""
  currentData: JSON
  """The ID of the contract (`address:id`)."""
  id: String!
  """The unix timestamp of when the community note was moderated."""
  moderatedAt: Int
  """The network ID the contract is deployed on."""
  networkId: Int!
  """The contract before the community note was applied."""
  previousData: JSON
  """The data of the community note."""
  proposalData: JSON!
  """The ordinal number of the community note."""
  proposalNum: Int!
  """The type of the community note."""
  proposalType: CommunityNoteType!
  """The unix timestamp of when the community note was created."""
  proposedAt: Int!
  """The status of the community note."""
  status: ContractProposalStatus!
  sortKey: String!
}

"""Filters for community notes."""
input CommunityNotesFilter {
  """The contract address of the contract."""
  address: String
  contractType: ContractType
  """The network ID the contract is deployed on."""
  networkId: [Int]
  """The type of the proposal."""
  proposalType: CommunityNoteType
}

"""Input type of `getCommunityNotes`."""
input CommunityNotesInput {
  """A set of filters to apply"""
  filter: CommunityNotesFilter
  """The maximum number of community notes to return."""
  limit: Int
  """The cursor to use for pagination."""
  cursor: String
}

"""Community notes data."""
type CommunityNotesResponse {
  """The list of community notes matching the filter parameters."""
  items: [CommunityNote!]!
  """The number of community notes returned."""
  count: Int!
  """A cursor for use in pagination."""
  cursor: String
}

"""Type of the community gathered note."""
enum CommunityNoteType {
  """An contract attribute change."""
  ATTRIBUTE
  """A scam report."""
  SCAM
  """A logo change."""
  LOGO
}

"""Comparison operators."""
type ComparisonOperator {
  """Greater than."""
  gt: String
  """Greater than or equal to."""
  gte: String
  """Less than."""
  lt: String
  """Less than or equal to."""
  lte: String
  """Equal to."""
  eq: String
}

"""Input for comparison operators."""
input ComparisonOperatorInput {
  """Greater than."""
  gt: String
  """Greater than or equal."""
  gte: String
  """Less than."""
  lt: String
  """Less than or equal."""
  lte: String
  """Equal to."""
  eq: String
}

"""Metadata for a contract label."""
type ContractLabel {
  """The unix timestamp for when the contract label was created."""
  createdAt: Int!
  """The contract label sub-type. Can be `Generic`, `HighTax`, `HoneyPot` or `Imitator`."""
  subType: ContractLabelSubType!
  """The contract label type. Can be `Scam`."""
  type: ContractLabelType!
}

"""The contract label sub-type."""
enum ContractLabelSubType {
  Generic
  HighTax
  HoneyPot
  Imitator
}

"""The contract label type."""
enum ContractLabelType {
  Scam
  Verified
}

enum ContractProposalStatus {
  ACCEPTED
  PENDING
  REJECTED
  REVERTED
}

"""Type of the contract."""
enum ContractType {
  TOKEN
  NFT
}

input CreateApiTokensInput {
  """Number of tokens to create, default is 1"""
  count: Int
  """Number of requests allowed per token, represented as a string, default is 5000"""
  requestLimit: String
  """Number of seconds until the token expires, defaults to 1 hour (3600)"""
  expiresIn: Int
}

"""Input for creating a market cap webhook."""
input CreateMarketCapWebhookArgs {
  """The name of the webhook (max 128 characters)."""
  name: String!
  """The url to which the webhook message should be sent."""
  callbackUrl: String!
  """A string value to hash along with `deduplicationId` using SHA-256. Included in the webhook message for added security."""
  securityToken: String!
  """The recurrence of the webhook. Can be `INDEFINITE` or `ONCE`."""
  alertRecurrence: AlertRecurrence!
  """A webhook group ID (max 64 characters). Can be used to group webhooks so that their messages are kept in order as a group rather than by individual webhook."""
  groupId: String
  """The conditions which must be met in order for the webhook to send a message."""
  conditions: MarketCapEventWebhookConditionInput!
  """The settings for retrying failed webhook messages."""
  retrySettings: RetrySettingsInput
  """An optional bucket ID (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks)."""
  bucketId: String
  """An optional bucket sort key (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks)."""
  bucketSortkey: String
  """The type of publishing for the webhook. If not set, it defaults to `SINGLE`."""
  publishingType: PublishingType
  """If enabled, new webhooks won't be created if a webhook with the same parameters already exists. If callbackUrl, conditions, publishingType, and alertRecurrence all match, then we return the existing webhook."""
  deduplicate: Boolean
}

"""Input for creating market cap webhooks."""
input CreateMarketCapWebhooksInput {
  """A list of market cap webhooks to create."""
  webhooks: [CreateMarketCapWebhookArgs!]!
}

"""Input for creating an NFT event webhook."""
input CreateNftEventWebhookArgs {
  """The name of the webhook (max 128 characters)."""
  name: String!
  """The url to which the webhook message should be sent."""
  callbackUrl: String!
  """A string value to hash along with `deduplicationId` using SHA-256. Included in the webhook message for added security."""
  securityToken: String!
  """The recurrence of the webhook. Can be `INDEFINITE` or `ONCE`."""
  alertRecurrence: AlertRecurrence!
  """A webhook group ID (max 64 characters). Can be used to group webhooks so that their messages are kept in order as a group rather than by individual webhook."""
  groupId: String
  """The conditions which must be met in order for the webhook to send a message."""
  conditions: NftEventWebhookConditionInput!
  """The settings for retrying failed webhook messages."""
  retrySettings: RetrySettingsInput
  """An optional bucket ID (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks)."""
  bucketId: String
  """An optional bucket sort key (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks)."""
  bucketSortkey: String
  """The type of publishing for the webhook. If not set, it defaults to `SINGLE`."""
  publishingType: PublishingType
  """If enabled, new webhooks won't be created if a webhook with the same parameters already exists. If callbackUrl, conditions, publishingType, and alertRecurrence all match, then we return the existing webhook."""
  deduplicate: Boolean
}

"""Input for creating NFT event webhooks."""
input CreateNftEventWebhooksInput {
  """A list of NFT event webhooks to create."""
  webhooks: [CreateNftEventWebhookArgs!]!
}

"""Input for creating a price webhook."""
input CreatePriceWebhookArgs {
  """The name of the webhook (max 128 characters)."""
  name: String!
  """The url to which the webhook message should be sent."""
  callbackUrl: String!
  """A string value to hash along with `deduplicationId` using SHA-256. Included in the webhook message for added security."""
  securityToken: String!
  """The recurrence of the webhook. Can be `INDEFINITE` or `ONCE`."""
  alertRecurrence: AlertRecurrence!
  """A webhook group ID (max 64 characters). Can be used to group webhooks so that their messages are kept in order as a group rather than by individual webhook."""
  groupId: String
  """The conditions which must be met in order for the webhook to send a message."""
  conditions: PriceEventWebhookConditionInput!
  """The settings for retrying failed webhook messages."""
  retrySettings: RetrySettingsInput
  """An optional bucket ID (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks)."""
  bucketId: String
  """An optional bucket sort key (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks)."""
  bucketSortkey: String
  """The type of publishing for the webhook. If not set, it defaults to `SINGLE`."""
  publishingType: PublishingType
  """If enabled, new webhooks won't be created if a webhook with the same parameters already exists. If callbackUrl, conditions, publishingType, and alertRecurrence all match, then we return the existing webhook."""
  deduplicate: Boolean
}

"""Input for creating price webhooks."""
input CreatePriceWebhooksInput {
  """A list of price webhooks to create."""
  webhooks: [CreatePriceWebhookArgs!]!
}

"""Input for creating a Raw Transaction webhook."""
input CreateRawTransactionWebhookArgs {
  """The name of the webhook (max 128 characters)."""
  name: String!
  """The url to which the webhook message should be sent."""
  callbackUrl: String!
  """A string value to hash along with `deduplicationId` using SHA-256. Included in the webhook message for added security."""
  securityToken: String!
  """The recurrence of the webhook. Can be `INDEFINITE` or `ONCE`."""
  alertRecurrence: AlertRecurrence!
  """A webhook group ID (max 64 characters). Can be used to group webhooks so that their messages are kept in order as a group rather than by individual webhook."""
  groupId: String
  """The conditions which must be met in order for the webhook to send a message."""
  conditions: RawTransactionWebhookConditionInput!
  """The settings for retrying failed webhook messages."""
  retrySettings: RetrySettingsInput
  """An optional bucket ID (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks)."""
  bucketId: String
  """An optional bucket sort key (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks)."""
  bucketSortkey: String
  """The type of publishing for the webhook. If not set, it defaults to `SINGLE`."""
  publishingType: PublishingType
  """If enabled, new webhooks won't be created if a webhook with the same parameters already exists. If callbackUrl, conditions, publishingType, and alertRecurrence all match, then we return the existing webhook."""
  deduplicate: Boolean
}

"""Input for creating Raw Transaction webhooks."""
input CreateRawTransactionWebhooksInput {
  """A list of Raw Transaction webhooks to create."""
  webhooks: [CreateRawTransactionWebhookArgs!]!
}

"""Input for creating a token pair event webhook."""
input CreateTokenPairEventWebhookArgs {
  """The name of the webhook (max 128 characters)."""
  name: String!
  """The url to which the webhook message should be sent."""
  callbackUrl: String!
  """A string value to hash along with `deduplicationId` using SHA-256. Included in the webhook message for added security."""
  securityToken: String!
  """The recurrence of the webhook. Can be `INDEFINITE` or `ONCE`."""
  alertRecurrence: AlertRecurrence!
  """A webhook group ID (max 64 characters). Can be used to group webhooks so that their messages are kept in order as a group rather than by individual webhook."""
  groupId: String
  """The conditions which must be met in order for the webhook to send a message."""
  conditions: TokenPairEventWebhookConditionInput!
  """The settings for retrying failed webhook messages."""
  retrySettings: RetrySettingsInput
  """An optional bucket ID (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks)."""
  bucketId: String
  """An optional bucket sort key (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks)."""
  bucketSortkey: String
  """The type of publishing for the webhook. If not set, it defaults to `SINGLE`."""
  publishingType: PublishingType
  """If enabled, new webhooks won't be created if a webhook with the same parameters already exists. If callbackUrl, conditions, publishingType, and alertRecurrence all match, then we return the existing webhook."""
  deduplicate: Boolean
}

"""Input for creating token pair event webhooks."""
input CreateTokenPairEventWebhooksInput {
  """A list of token pair event webhooks to create."""
  webhooks: [CreateTokenPairEventWebhookArgs!]!
}

"""Input for creating webhooks."""
input CreateWebhooksInput {
  """Input for creating price webhooks."""
  priceWebhooksInput: CreatePriceWebhooksInput
  """Input for creating token pair event webhooks."""
  tokenPairEventWebhooksInput: CreateTokenPairEventWebhooksInput
  """Input for creating NFT event webhooks."""
  nftEventWebhooksInput: CreateNftEventWebhooksInput
  """Input for creating raw transaction webhooks."""
  rawTransactionWebhooksInput: CreateRawTransactionWebhooksInput
  """Input for creating market cap webhooks."""
  marketCapWebhooksInput: CreateMarketCapWebhooksInput
}

"""Result returned by `createWebhooks`."""
type CreateWebhooksOutput {
  """The list of price webhooks that were created."""
  priceWebhooks: [Webhook]!
  """The list of token pair event webhooks that were created."""
  tokenPairEventWebhooks: [Webhook]!
  """The list of NFT event webhooks that were created."""
  nftEventWebhooks: [Webhook]!
  """The list of raw transaction webhooks that were created."""
  rawTransactionWebhooks: [Webhook]!
  """The list of market cap event webhooks that were created."""
  marketCapWebhooks: [Webhook]!
}

"""Price data for a bar at a specific resolution."""
type CurrencyBarData {
  """The timestamp for the bar."""
  t: Int!
  """Bar chart data in USD."""
  usd: IndividualBarData!
  """Bar chart data in the network's base token."""
  token: IndividualBarData!
}

"""Input for deleting webhooks."""
input DeleteWebhooksInput {
  """A list of webhook IDs to delete."""
  webhookIds: [String!]!
}

"""Result returned by `deleteWebhooks`."""
type DeleteWebhooksOutput {
  """The list of webhook IDs that were deleted."""
  deletedIds: [String]
}

"""Detailed stats for an NFT collection."""
type DetailedNftStats {
  """The contract address of the NFT collection."""
  collectionAddress: String!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The marketplace address or `all`. Can be used to get marketplace-specific metrics."""
  grouping: String
  """The breakdown of stats over an hour window."""
  stats_hour1: WindowedDetailedNftStats
  """The breakdown of stats over a 4 hour window."""
  stats_hour4: WindowedDetailedNftStats
  """The breakdown of stats over a 12 hour window."""
  stats_hour12: WindowedDetailedNftStats
  """The breakdown of stats over a 24 hour window."""
  stats_day1: WindowedDetailedNftStats
  """The breakdown of stats over a 7 day window."""
  stats_week1: WindowedDetailedNftStats
  """The breakdown of stats over a 30 day window."""
  stats_day30: WindowedDetailedNftStats
}

"""The start/end timestamp for a given bucket within the window."""
type DetailedNftStatsBucketTimestamp {
  """The unix timestamp for the start of the window."""
  start: Int!
  """The unix timestamp for the end of the window."""
  end: Int!
}

"""The duration used to request detailed NFT stats."""
enum DetailedNftStatsDuration {
  day30
  week1
  day1
  hour12
  hour4
  hour1
}

"""Number metrics for detailed NFT stats."""
type DetailedNftStatsNumberMetrics {
  """The percent change between the `currentValue` and `previousValue`."""
  change: Float
  """The total value for the most recent duration."""
  currentValue: Int
  """The total value for the previous duration."""
  previousValue: Int
  """The list of aggregated values for each bucket."""
  buckets: [Int]!
}

"""String metrics for detailed NFT stats."""
type DetailedNftStatsStringMetrics {
  """The percent change between the `currentValue` and `previousValue`."""
  change: Float
  """The total value for the most recent duration."""
  currentValue: String
  """The total value for the previous duration."""
  previousValue: String
  """The list of aggregated values for each bucket."""
  buckets: [String]!
}

"""Detailed stats for a token within a pair."""
type DetailedPairStats {
  """The contract address of the pair."""
  pairAddress: String!
  """The network ID the pair is deployed on."""
  networkId: Int!
  """The token of interest used to calculate token-specific stats."""
  tokenOfInterest: TokenOfInterest
  """The unix timestamp for the last transaction to happen on the pair."""
  lastTransaction: Int
  """The type of statistics returned. Can be `FILTERED` or `UNFILTERED`"""
  statsType: TokenPairStatisticsType!
  """The breakdown of stats over a 5 minute window."""
  stats_min5: WindowedDetailedPairStats
  """The breakdown of stats over a 15 minute window."""
  stats_min15: WindowedDetailedPairStats
  """The breakdown of stats over an hour window."""
  stats_hour1: WindowedDetailedPairStats
  """The breakdown of stats over a 4 hour window."""
  stats_hour4: WindowedDetailedPairStats
  """The breakdown of stats over a 12 hour window."""
  stats_hour12: WindowedDetailedPairStats
  """The breakdown of stats over a 24 hour window."""
  stats_day1: WindowedDetailedPairStats
  """The breakdown of stats over a 7 day window."""
  stats_week1: WindowedDetailedPairStats
  """The breakdown of stats over a 30 day window."""
  stats_day30: WindowedDetailedPairStats
  """Number of aggregated buckets specified in input"""
  bucketCount: Int
  """The timestamp specified as input to the query"""
  queryTimestamp: Int
  pair: Pair
}

"""The start/end timestamp for a given bucket within the window."""
type DetailedPairStatsBucketTimestamp {
  """The unix timestamp for the start of the bucket."""
  start: Int!
  """The unix timestamp for the start of the bucket."""
  end: Int!
}

"""The duration used to request detailed pair stats."""
enum DetailedPairStatsDuration {
  day30
  week1
  day1
  hour12
  hour4
  hour1
  min15
  min5
}

"""Number metrics for detailed pair stats."""
type DetailedPairStatsNumberMetrics {
  """The percent change between the `currentValue` and `previousValue`. Decimal format."""
  change: Float
  """The total value for the most recent duration."""
  currentValue: Int
  """The total value for the previous duration."""
  previousValue: Int
  """The list of aggregated values for each bucket."""
  buckets: [Int]!
}

"""String metrics for detailed pair stats."""
type DetailedPairStatsStringMetrics {
  """The percent change between the `currentValue` and `previousValue`. Decimal format."""
  change: Float
  """The total value for the most recent duration."""
  currentValue: String
  """The total value for the previous duration."""
  previousValue: String
  """The list of aggregated values for each bucket."""
  buckets: [String]!
}

"""Detailed stats for a token within a pair."""
type DetailedStats {
  """The ID of the pair (`pairAddress:networkId`)."""
  pairId: String!
  """The token of interest used to calculate token-specific stats."""
  tokenOfInterest: TokenOfInterest!
  """The type of statistics returned. Can be `FILTERED` or `UNFILTERED`"""
  statsType: TokenPairStatisticsType!
  """The breakdown of stats over a 5 minute window."""
  stats_min5: WindowedDetailedStats
  """The breakdown of stats over an hour window."""
  stats_hour1: WindowedDetailedStats
  """The breakdown of stats over a 4 hour window."""
  stats_hour4: WindowedDetailedStats
  """The breakdown of stats over a 12 hour window."""
  stats_hour12: WindowedDetailedStats
  """The breakdown of stats over a 24 hour window."""
  stats_day1: WindowedDetailedStats
  """Number of aggregated buckets specified in input"""
  bucketCount: Int
  """The timestamp specified as input to the query"""
  queryTimestamp: Int
}

"""The start/end timestamp for a given bucket within the window."""
type DetailedStatsBucketTimestamp {
  """The unix timestamp for the start of the bucket."""
  start: Int!
  """The unix timestamp for the start of the bucket."""
  end: Int!
}

"""Number metrics for detailed stats."""
type DetailedStatsNumberMetrics {
  """The percent change between the `currentValue` and `previousValue`. Decimal format."""
  change: Float!
  """The total value for the most recent window."""
  currentValue: Int!
  """The total value for the previous window."""
  previousValue: Int!
  """The list of aggregated values for each bucket."""
  buckets: [Int]!
}

"""String metrics for detailed stats."""
type DetailedStatsStringMetrics {
  """The percent change between the `currentValue` and `previousValue`. Decimal format."""
  change: Float!
  """The total value for the most recent window."""
  currentValue: String!
  """The total value for the previous window."""
  previousValue: String!
  """The list of aggregated values for each bucket."""
  buckets: [String]!
}

"""The window size used to request detailed stats."""
enum DetailedStatsWindowSize {
  day1
  hour12
  hour4
  hour1
  min5
}

"""The detailed stats for a wallet."""
type DetailedWalletStats {
  """The wallet address"""
  walletAddress: String!
  """The last transaction timestamp"""
  lastTransactionAt: Int!
  """The network specific stats"""
  networkSpecificStats: [NetworkWalletStats!] @deprecated(reason: "Use networkBreakdown instead")
  """The network breakdown"""
  networkBreakdown: [NetworkBreakdown!]
  """The labels associated with the wallet"""
  labels: [String!]!
  """The likelihood of the wallet being a scammer"""
  scammerScore: Int
  """The likelihood of the wallet being a bot"""
  botScore: Int
  """The stats for the last day"""
  statsDay1: WindowedWalletStats
  """The stats for the last week"""
  statsWeek1: WindowedWalletStats
  """The stats for the last 30 days"""
  statsDay30: WindowedWalletStats
  """The stats for the last year"""
  statsYear1: WindowedWalletStats
}

"""The input for detailed wallet stats."""
input DetailedWalletStatsInput {
  """The wallet address"""
  walletAddress: String!
  """The network ID"""
  networkId: Int
  """The timestamp to get stats for"""
  timestamp: Int
  """Whether to include network breakdown stats"""
  includeNetworkBreakdown: Boolean
}

"""Metadata for a contract."""
union EnhancedContract = EnhancedToken | EnhancedNftContract

"""Metadata for an NFT collection."""
type EnhancedNftContract {
  """The ID of the NFT collection (`address`:`networkId`)."""
  id: String!
  """The contract address of the NFT collection."""
  address: String!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The token standard. Can be a variation of `ERC-721` or `ERC-1155`."""
  ercType: String!
  """The name of the NFT collection."""
  name: String
  """The description of the NFT collection."""
  description: String
  """The symbol of the NFT collection."""
  symbol: String
  """The total supply of the NFT collection."""
  totalSupply: String
  """Community gathered links for the socials of this NFT collection."""
  socialLinks: SocialLinks
  """The URL for an image of the NFT collection."""
  image: String
  """A list of labels for the NFT collection."""
  labels: [ContractLabel]
}

"""Metadata for a token."""
type EnhancedToken {
  """The contract address of the token."""
  address: String!
  """The token ID on CoinMarketCap."""
  cmcId: Int
  """The precision to which the token can be divided. For example, the smallest unit for USDC is 0.000001 (6 decimals)."""
  decimals: Int!
  """The ID of the token (`address:networkId`)."""
  id: String!
  """Whether the token has been flagged as a scam."""
  isScam: Boolean
  """The token name. For example, `ApeCoin`."""
  name: String
  """The network ID the token is deployed on."""
  networkId: Int!
  """The token symbol. For example, `APE`."""
  symbol: String
  """The total supply of the token."""
  totalSupply: String @deprecated(reason: "Use the TokenInfo type")
  """Community gathered links for the socials of this token."""
  socialLinks: SocialLinks
  """More metadata about the token."""
  info: TokenInfo
  """Information about the token from 3rd party sources."""
  explorerData: ExplorerTokenData @deprecated(reason: "Use the TokenInfo type")
  """A list of exchanges where the token has been traded."""
  exchanges: [Exchange!]
  """The thumbnail token logo URL."""
  imageThumbUrl: String @deprecated(reason: "Use the TokenInfo type")
  """The small token logo URL."""
  imageSmallUrl: String @deprecated(reason: "Use the TokenInfo type")
  """The large token logo URL."""
  imageLargeUrl: String @deprecated(reason: "Use the TokenInfo type")
  """The circulating supply of the token."""
  circulatingSupply: String @deprecated(reason: "Use the TokenInfo type")
  """The amount of this token in the pair."""
  pooled: String @deprecated(reason: "Pooled can be found on the pair instead")
  """The token creator's wallet address."""
  creatorAddress: String
  """The block height the token was created at."""
  createBlockNumber: Int
  """The transaction hash of the token's creation."""
  createTransactionHash: String
  """The unix timestamp for the creation of the token."""
  createdAt: Int
  """Whether or not the token is mintable"""
  mintable: String
  """Whether or not the token is freezable"""
  freezable: String
  """The launchpad data for the token, if applicable."""
  launchpad: LaunchpadData
}

"""A token transaction."""
type Event {
  """The contract address of the token's top pair."""
  address: String!
  """The price of the network's base token."""
  baseTokenPrice: String
  """The hash of the block where the transaction occurred."""
  blockHash: String!
  """The block number for the transaction."""
  blockNumber: Int!
  """The event-specific data for the transaction. Can be `BurnEventData` or `MintEventData` or `SwapEventData`."""
  data: EventData
  """The type of transaction event. Can be `Burn`, `Mint`, `Swap`, `Sync`, `Collect`, or `CollectProtocol`."""
  eventType: EventType!
  """The ID of the event (`address:networkId`). For example, `0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:1`."""
  id: String!
  """The contract address of the token with higher liquidity in the token's top pair."""
  liquidityToken: String
  """The index of the log in the block."""
  logIndex: Int!
  """The wallet address that performed the transaction."""
  maker: String
  """The network ID that the token is deployed on."""
  networkId: Int!
  """The token of interest within the token's top pair. Can be `token0` or `token1`."""
  quoteToken: QuoteToken
  """The unix timestamp for when the transaction occurred."""
  timestamp: Int!
  """The address of the event's token0."""
  token0Address: String
  """The address of the event's token1."""
  token1Address: String
  """The price of `token0` paid/received in USD, including any fees."""
  token0SwapValueUsd: String
  """The price of `token1` paid/received in USD, including any fees."""
  token1SwapValueUsd: String
  """The price of `token0` paid/received in the network's base token, including fees."""
  token0ValueBase: String
  """The price of `token1` paid/received in the network's base token, including fees."""
  token1ValueBase: String
  """The updated price of `token0` in USD, calculated after the transaction."""
  token0PoolValueUsd: String
  """The updated price of `token1` in USD, calculated after the transaction."""
  token1PoolValueUsd: String
  """The unique hash for the transaction."""
  transactionHash: String!
  """The index of the transaction within the block."""
  transactionIndex: Int!
  """A more specific breakdown of `eventType`. Splits `Swap` into `Buy` or `Sell`."""
  eventDisplayType: EventDisplayType
  """Labels attributed to the event."""
  labels: LabelsForEvent
  """The age of the wallet in seconds."""
  walletAge: Int
  """Labels attributed to the wallet."""
  walletLabels: [String!]
}

"""Response returned by `getTokenEvents`."""
type EventConnection {
  """A list of transactions for a token's top pair."""
  items: [Event]
  """A cursor for use in pagination."""
  cursor: String
}

"""Event-specific data for a token transaction."""
union EventData = BurnEventData | MintEventData | SwapEventData | PoolBalanceChangedEventData

"""A more specific breakdown of `EventType`. Splits `Swap` into `Buy` and `Sell`."""
enum EventDisplayType {
  Burn
  Mint
  Buy
  Sell
  Sync
  Collect
  CollectProtocol
}

"""Metadata for an event label."""
type EventLabel {
  """Specific data for the event label type."""
  data: EventLabelData!
  """The ID of the pair (`address:networkId`)."""
  id: String!
  """The event label type."""
  label: EventLabelType!
  """The index of the log in the block."""
  logIndex: Int!
  """The network ID the pair is deployed on."""
  networkId: Int!
  """The unix timestamp for the transaction."""
  timestamp: Int!
  """The index of the transaction within the block."""
  transactionIndex: Int!
  """The unique hash for the transaction."""
  transactionHash: String!
}

"""Response returned by `getEventLabels`."""
type EventLabelConnection {
  """A list of event labels for a pair."""
  items: [EventLabel]
  """The cursor to use for pagination."""
  cursor: String
}

"""Specific data for an event label."""
union EventLabelData = FrontRunLabelData | SandwichedLabelData

"""The event label type."""
enum EventLabelType {
  FrontRun
  Sandwiched
}

"""Input type of `EventQueryTimestamp`."""
input EventQueryTimestampInput {
  """The unix timestamp for the start of the requested range."""
  from: Int!
  """The unix timestamp for the end of the requested range."""
  to: Int!
}

"""Input type of `EventsQuery`."""
input EventsQueryInput {
  """The pair contract address to filter by. If you pass a token address in here, it will instead find the top pair for that token and use that."""
  address: String!
  """The token of interest. Can be `token0` or `token1`."""
  quoteToken: QuoteToken
  """The amount of `quoteToken` involved in the swap."""
  amountNonLiquidityToken: NumberFilter
  """The list of event display types to filter by."""
  eventDisplayType: [EventDisplayType]
  """The specific event type to filter by."""
  eventType: EventType
  """The specific wallet address to filter by."""
  maker: String
  """The network ID to filter by."""
  networkId: Int!
  """The time range to filter by."""
  timestamp: EventQueryTimestampInput
  """The price per `quoteToken` at the time of the swap in the network's base token."""
  priceBaseToken: NumberFilter
  """The total amount of `quoteToken` involved in the swap in the network's base token (`amountNonLiquidityToken` x `priceBaseToken`)."""
  priceBaseTokenTotal: NumberFilter
  """The price per `quoteToken` at the time of the swap in USD."""
  priceUsd: NumberFilter
  """The total amount of `quoteToken` involved in the swap in USD (`amountNonLiquidityToken` x `priceUsd`)."""
  priceUsdTotal: NumberFilter
  """Specify the type of symbol you want to fetch values for (TOKEN | POOL)"""
  symbolType: SymbolType
}

"""The event type for a token transaction."""
enum EventType {
  Burn
  Mint
  Swap
  Sync
  Collect
  CollectProtocol
  PoolBalanceChanged
}

"""Metadata for a decentralized exchange."""
type Exchange {
  """The contract address of the exchange."""
  address: String!
  """The hex string for the exchange color."""
  color: String
  """The ID of the exchange (`address:id`)."""
  id: String!
  """The name of the exchange."""
  name: String
  """The version of the exchange, if applicable."""
  exchangeVersion: String
  """The exchange logo URL."""
  iconUrl: String
  """The network ID the exchange is deployed on."""
  networkId: Int!
  """The URL for the exchange."""
  tradeUrl: String
}

"""Response returned by `filterExchanges`."""
type ExchangeFilterConnection {
  """The list of exchanges matching the filter parameters."""
  results: [ExchangeFilterResult]
  """The number of exchanges returned."""
  count: Int
  """Where in the list the server started when returning items."""
  offset: Int
}

"""An exchange matching a set of filter parameters."""
type ExchangeFilterResult {
  """Exchange metadata."""
  exchange: FilterExchange
  """The number of transactions on the exchange in the past hour."""
  txnCount1: String
  """The number of transactions on the exchange in the past 4 hours."""
  txnCount4: String
  """The number of transactions on the exchange in the past 12 hours."""
  txnCount12: String
  """The number of transactions on the exchange in the past 24 hours."""
  txnCount24: String
  """The trade volume in USD in the past hour."""
  volumeUSD1: String
  """The trade volume in USD in the past 4 hours."""
  volumeUSD4: String
  """The trade volume in USD in the past 12 hours."""
  volumeUSD12: String
  """The trade volume in USD in the past 24 hours."""
  volumeUSD24: String
  """The trade volume in the network's base token in the past hour."""
  volumeNBT1: String
  """The trade volume in the network's base token in the past 4 hours."""
  volumeNBT4: String
  """The trade volume in the network's base token in the past 12 hours."""
  volumeNBT12: String
  """The trade volume in the network's base token in the past 24 hours."""
  volumeNBT24: String
  """The total unique daily active users."""
  dailyActiveUsers: Int
  """The total unique monthly active users (30 days)."""
  monthlyActiveUsers: Int
}

"""Input type of `ExchangeFilters`."""
input ExchangeFilters {
  """The number of transactions on the exchange in the past hour."""
  txnCount1: StringFilter
  """The number of transactions on the exchange in the past 4 hours."""
  txnCount4: StringFilter
  """The number of transactions on the exchange in the past 12 hours."""
  txnCount12: StringFilter
  """The number of transactions on the exchange in the past 24 hours."""
  txnCount24: StringFilter
  """The trade volume in USD in the past hour."""
  volumeUSD1: StringFilter
  """The trade volume in USD in the past 4 hours."""
  volumeUSD4: StringFilter
  """The trade volume in USD in the past 12 hours."""
  volumeUSD12: StringFilter
  """The trade volume in USD in the past 24 hours."""
  volumeUSD24: StringFilter
  """The trade volume in the network's base token in the past hour."""
  volumeNBT1: StringFilter
  """The trade volume in the network's base token in the past 4 hours."""
  volumeNBT4: StringFilter
  """The trade volume in the network's base token in the past 12 hours."""
  volumeNBT12: StringFilter
  """The trade volume in the network's base token in the past 24 hours."""
  volumeNBT24: StringFilter
  """The total unique daily active users."""
  dailyActiveUsers: NumberFilter
  """The total unique monthly active users (30 days)."""
  monthlyActiveUsers: NumberFilter
  """The list of exchange contract addresses to filter by."""
  address: [String]
  """The list of network IDs to filter by."""
  network: [Int]
  """Scope to only verified exchanges"""
  verified: Boolean
}

"""Input type of `ExchangeRanking`."""
input ExchangeRanking {
  """The attribute to rank exchanges by."""
  attribute: ExchangeRankingAttribute
  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""The attribute used to rank exchanges."""
enum ExchangeRankingAttribute {
  txnCount1
  txnCount4
  txnCount12
  txnCount24
  volumeUSD1
  volumeUSD4
  volumeUSD12
  volumeUSD24
  volumeNBT1
  volumeNBT4
  volumeNBT12
  volumeNBT24
  dailyActiveUsers
  monthlyActiveUsers
}

"""Third party token data sourced from off chain."""
type ExplorerTokenData {
  """The ID of the token (`address:networkId`)."""
  id: String!
  """Whether the token has been verified on CoinGecko."""
  blueCheckmark: Boolean
  """A description of the token."""
  description: String
  """The precision to which the token can be divided."""
  divisor: String
  """The token price in USD."""
  tokenPriceUSD: String
  """The token type."""
  tokenType: String
}

"""Filter for fillsource based NFT stats."""
input FillsourceStatsFilter {
  """The fillsource to target for the current window."""
  fillsource: String!
  """The total value for the current window."""
  current: NumberFilter
  """The total value for the previous window."""
  previous: NumberFilter
  """The percent change between the `current` and `previous`."""
  change: NumberFilter
}

"""Metadata for an exchange."""
type FilterExchange {
  """The address for the exchange factory contract."""
  address: String!
  """The ID of the exchange (`address:networkId`)."""
  id: String!
  """The name of the exchange."""
  name: String
  """The version of the exchange. For example, `3` for UniswapV3."""
  exchangeVersion: String
  """The URL for the exchange's icon."""
  iconUrl: String
  """The network ID the factory is deployed on."""
  networkId: Int!
  """The URL for the exchange's trading platform."""
  tradeUrl: String
}

"""The input for filtering wallets for a network."""
input FilterNetworkWalletsInput {
  """The network ID to filter wallets for"""
  networkId: Int!
  """A set of filters to apply."""
  filters: WalletNetworkFilters
  """A list of wallet addresses to filter by."""
  wallets: [String]
  """Exclude wallets with these labels. See [`WalletLabel`](/api-reference/enums/index#walletlabel) for possible values."""
  excludeLabels: [String]
  """Include wallets with these labels. See [`WalletLabel`](/api-reference/enums/index#walletlabel) for possible values."""
  includeLabels: [String]
  """A list of ranking attributes to apply."""
  rankings: [WalletNetworkRanking]
  """The maximum number of wallets to return."""
  limit: Int
  """Where in the list the server should start when returning items. Use `count`+`offset` from the previous query to request the next page of results."""
  offset: Int
}

"""The input for filtering wallets for a token."""
input FilterTokenWalletsInput {
  """The ID of the token to filter wallets for"""
  tokenId: String
  """The wallet address to filter wallets for"""
  walletAddress: String @deprecated(reason: "Use wallets instead")
  """A list of wallet addresses to filter wallets for"""
  wallets: [String]
  """The network ID to filter wallets for"""
  networkId: Int
  """A set of filters to apply"""
  filters: WalletTokenFilters @deprecated(reason: "Use filtersV2 instead")
  """A set of filters to apply"""
  filtersV2: WalletTokenFiltersV2
  """A phrase to search for in token symbol and name"""
  phrase: String
  """A list of ranking attributes to apply"""
  rankings: [WalletTokenRanking]
  """Exclude wallets with these labels. See [`WalletLabel`](/api-reference/enums/index#walletlabel) for possible values."""
  excludeLabels: [String]
  """Include wallets with these labels. See [`WalletLabel`](/api-reference/enums/index#walletlabel) for possible values."""
  includeLabels: [String]
  """The maximum number of wallets to return"""
  limit: Int
  """Where in the list the server should start when returning items"""
  offset: Int
}

"""The input for filtering wallets."""
input FilterWalletsInput {
  """A set of filters to apply."""
  filters: WalletFilters
  """A list of wallet addresses to filter by."""
  wallets: [String]
  """Exclude wallets with these labels. See [`WalletLabel`](/api-reference/enums/index#walletlabel) for possible values."""
  excludeLabels: [String]
  """Include wallets with these labels. See [`WalletLabel`](/api-reference/enums/index#walletlabel) for possible values."""
  includeLabels: [String]
  """A list of ranking attributes to apply."""
  rankings: [WalletRanking]
  """The maximum number of wallets to return."""
  limit: Int
  """Where in the list the server should start when returning items. Use `count`+`offset` from the previous query to request the next page of results."""
  offset: Int
}

"""Metadata for a front-run label."""
type FrontRunLabelData {
  """The index of the front-run label. Can be 0 or 1."""
  index: Int
  """The amount of `token0` drained in the attack."""
  token0DrainedAmount: String!
  """The amount of `token1` drained in the attack."""
  token1DrainedAmount: String!
}

"""Input type of `getDetailedPairsStats`."""
input GetDetailedPairsStatsInput {
  """The contract address of the pair."""
  pairAddress: String!
  """The network ID the pair is deployed on."""
  networkId: Int!
  """The token of interest used to calculate token-specific stats for the pair. Can be `token0` or `token1`."""
  tokenOfInterest: TokenOfInterest
  """The unix timestamp for the stats. Defaults to current."""
  timestamp: Int
  """The list of durations to get detailed pair stats for."""
  durations: [DetailedPairStatsDuration]
  """The number of aggregated values to receive. Note: Each duration has predetermined bucket sizes. The first n-1 buckets are historical. The last bucket is a snapshot of current data. duration `day1`: 6 buckets (4 hours each) plus 1 partial bucket duration `hour12`: 12 buckets (1 hour each) plus 1 partial bucket duration `hour4`: 8 buckets (30 min each) plus 1 partial bucket duration `hour1`: 12 buckets (5 min each) plus 1 partial bucket duration `min5`: 5 buckets (1 min each) plus 1 partial bucket For example, requesting 11 buckets for a `min5` duration will return the last 10 minutes worth of data plus a snapshot for the current minute."""
  bucketCount: Int
  """The type of statistics returned. Can be `FILTERED` or `UNFILTERED`"""
  statsType: TokenPairStatisticsType
}

"""Response returned by `getNetworkStats`."""
type GetNetworkStatsResponse {
  """The network trade volume in USD over the past 24 hours."""
  volume24: Float!
  """The network trade volume in USD over the past 12 hours."""
  volume12: Float!
  """The network trade volume in USD over the past 4 hours."""
  volume4: Float!
  """The network trade volume in USD over the past hour."""
  volume1: Float!
  """The network trade volume in USD over the past 5 minutes."""
  volume5m: Float!
  """The network trade volume change over the last 24 hours"""
  volumeChange24: Float!
  """The network trade volume change over the last 12 hours"""
  volumeChange12: Float!
  """The network trade volume change over the last 4 hours"""
  volumeChange4: Float!
  """The network trade volume change over the last hour"""
  volumeChange1: Float!
  """The network trade volume change over the last 5 minutes"""
  volumeChange5m: Float!
  """The network liquidity in USD."""
  liquidity: Float!
  """The unique number of transactions in the past 24 hours."""
  transactions24: Int!
  """The unique number of transactions in the past 12 hours."""
  transactions12: Int!
  """The unique number of transactions in the past 4 hours."""
  transactions4: Int!
  """The unique number of transactions in the past hour."""
  transactions1: Int!
  """The unique number of transactions in the past 5 minutes."""
  transactions5m: Int!
}

"""Response returned by `getNftPoolCollectionsByExchange`."""
type GetNftPoolCollectionsResponse {
  """A list of NFT collections."""
  items: [NftPoolCollectionResponse]
  """A cursor for use in pagination."""
  cursor: String
}

"""Response returned by `getNftPoolsByCollectionAndExchange` and `getNftPoolsByOwner`."""
type GetNftPoolsResponse {
  """A list of NFT pools."""
  items: [NftPoolResponse]!
  """A cursor for use in pagination."""
  cursor: String
}

"""Input type of `getTokenPrices`."""
input GetPriceInput {
  """The contract address of the token."""
  address: String!
  """The network ID the token is deployed on."""
  networkId: Int!
  """The unix timestamp for the price."""
  timestamp: Int
  """The address of the pool, when omitted the top pool is used."""
  poolAddress: String
  """The maximum number of deviations from the token's Liquidity-Weighted Mean Price. This is used to mitigate low liquidity pairs producing prices that are not representative of reality. Default is `1`."""
  maxDeviations: Float @deprecated(reason: "This isn't taken into account anymore.")
}

"""Input type of `getTokensInfo`."""
input GetTokensInfoInput {
  """The contract address of the token."""
  address: String!
  """The network ID the token is deployed on."""
  networkId: Int!
}

"""Response returned by `getWebhooks`."""
type GetWebhooksResponse {
  """A list of webhooks belonging to a user."""
  items: [Webhook]
  """A cursor for use in pagination."""
  cursor: String
}

"""The pool variant."""
enum GraphQlNftPoolVariant {
  ERC20
  NATIVE
}

input HoldersInput {
  """The ID of the token (`tokenAddress:networkId`)."""
  tokenId: String!
  """The maximum number of holders to return. Default is 50, maximum is 200."""
  limit: Int
  """A cursor for use in pagination."""
  cursor: String
  """The attribute to sort the list on"""
  sort: HoldersInputSort
}

input HoldersInputSort {
  """The attribute to sort the list on"""
  attribute: HoldersSortAttribute
  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""Response returned by `holders`."""
type HoldersResponse {
  """The list of wallets holding the token."""
  items: [Balance!]!
  """The unique count of holders for the token."""
  count: Int!
  """A cursor for use in pagination."""
  cursor: String
  """Status of holder. Disabled if on unsupported network or there is insufficient holder data."""
  status: HoldersStatus!
  """What percentage of the total supply do the top 10 holders hold."""
  top10HoldersPercent: Float
}

enum HoldersSortAttribute {
  BALANCE
  DATE
}

enum HoldersStatus {
  ENABLED
  DISABLED
}

"""Response returned by `onHoldersUpdated`."""
type HoldersUpdate {
  """The number of different wallets holding the token."""
  holders: Int!
  """The ID of the token (`tokenAddress:networkId`)."""
  tokenId: String!
  """The token's contract address."""
  tokenAddress: String!
  """The network ID that the token is deployed on."""
  networkId: Int!
  """The list of wallets holding the token."""
  balances: [Balance!]!
}

"""Bar chart data."""
type IndividualBarData {
  """The opening price."""
  o: Float!
  """The high price."""
  h: Float!
  """The low price."""
  l: Float!
  """The closing price."""
  c: Float!
  """The volume."""
  v: Int
  """The timestamp for the bar."""
  t: Int!
  """The volume with higher precision."""
  volume: String!
  """The volume in the network's base token"""
  volumeNativeToken: String!
  """The number of unique buyers"""
  buyers: Int!
  """The number of buys"""
  buys: Int!
  """The buy volume in USD"""
  buyVolume: String!
  """The number of unique sellers"""
  sellers: Int!
  """The number of sells"""
  sells: Int!
  """The sell volume in USD"""
  sellVolume: String!
  """Liquidity in USD"""
  liquidity: String!
  """The number of traders"""
  traders: Int!
  """The number of transactions"""
  transactions: Int!
}

"""Integer equals condition."""
type IntEqualsCondition {
  """The integer to equal."""
  eq: Int!
}

"""Input for integer equals condition."""
input IntEqualsConditionInput {
  """The integer to equal."""
  eq: Int!
}

scalar join__FieldSet

enum join__Graph {
  API_ADMIN
  DECODINGS
  META
  NFTS
  TOKENS
  USERS
}

scalar JSON

"""Event labels. Can be `sandwich` or `washtrade`."""
type LabelsForEvent {
  sandwich: SandwichLabelForEvent
  washtrade: WashtradeLabelForEvent
}

"""Metadata for a newly listed pair."""
type LatestPair {
  """The contract address for the pair."""
  address: String!
  """The contract address for the exchange."""
  exchangeHash: String!
  """The ID of the pair (`address:networkId`)."""
  id: String!
  """The listing price, or first known price for the pair, in USD."""
  initialPriceUsd: String!
  """The unix timestamp for when liquidity was added to the pair."""
  liquidAt: Int
  """The total liquidity in the pair."""
  liquidity: String!
  """The token with higher liquidity within the pair. Can be `token0` or `token1`."""
  liquidityToken: String
  """The network ID the pair is deployed on."""
  networkId: Int!
  """The newly added token within the pair. Can be `token0` or `token1`."""
  newToken: String!
  """The token with lower liquidity within the pair. Can be `token0` or `token1`."""
  nonLiquidityToken: String
  """The pre-existing token within the pair. Can be `token0` or `token1`."""
  oldToken: String!
  """The percent price change between the listing price and the current price."""
  priceChange: Float!
  """The newly added token price in USD."""
  priceUsd: String!
  """Metadata for `token0`."""
  token0: LatestPairToken!
  """Metadata for `token1`."""
  token1: LatestPairToken!
  """The unique hash for the transaction that added liquidity, if applicable, otherwise the transaction that added the pair."""
  transactionHash: String!
}

"""Response returned by `getLatestPairs`."""
type LatestPairConnection {
  """A list of newly listed pairs."""
  items: [LatestPair!]!
  """A cursor for use in pagination."""
  cursor: String
}

"""Metadata for a token within a newly listed pair."""
type LatestPairToken {
  """The contract address for the token."""
  address: String!
  """The amount of `token` currently in the pair."""
  currentPoolAmount: String!
  """The precision to which the token can be divided. For example, the smallest unit for USDC is 0.000001 (6 decimals)."""
  decimals: Int!
  """The ID of the token (`address:networkId`)."""
  id: String!
  """The initial amount of `token` added to the pair."""
  initialPoolAmount: String!
  """The name of the token."""
  name: String!
  """The network ID the token is deployed on."""
  networkId: Int!
  """The ID of the pair (`pairAddress:networkId`)."""
  pairId: String!
  """The percent change `token` remaining in the pair since the initial add."""
  poolVariation: Float!
  """The symbol for the token."""
  symbol: String!
}

"""Metadata for a newly created token."""
type LatestToken {
  """The id of the new token. (tokenAddress:networkId)"""
  id: String!
  """The contract address of the new token."""
  tokenAddress: String!
  """The network ID the token is deployed on."""
  networkId: Int!
  """The block number of the token contract's creation."""
  blockNumber: Int!
  """The index of the transaction within the block."""
  transactionIndex: Int!
  """The index of the trace within the token contract's creation transaction."""
  traceIndex: Int!
  """The unique hash for the token contract's creation transaction."""
  transactionHash: String!
  """The unique hash for the token contract's creation block."""
  blockHash: String!
  """The unix timestamp for the creation of the token."""
  timeCreated: Int!
  """The address of the token creator."""
  creatorAddress: String!
  """The token creator's network token balance."""
  creatorBalance: String!
  """The name of the token."""
  tokenName: String!
  """The total supply of the token."""
  totalSupply: String!
  """The symbol of the token."""
  tokenSymbol: String!
  """The token's number of decimals."""
  decimals: Int!
  """Simulated token contract results, if available."""
  simulationResults: [LatestTokenSimResults!]!
}

"""Response returned by `getLatestTokens`."""
type LatestTokenConnection {
  """A list of newly created tokens."""
  items: [LatestToken!]!
}

"""Metadata for a newly created token."""
type LatestTokenSimResults {
  """Whether or not a token was able to be succesfully bought during simulation."""
  buySuccess: Boolean
  """Tax paid for a buy transaction during simulation."""
  buyTax: String
  """Gas used for a buy transaction during simulation."""
  buyGasUsed: String
  """The maximum token amount an address can buy during simulation."""
  maxBuyAmount: String
  """Whether or not a token was able to be succesfully sold during simulation."""
  sellSuccess: Boolean
  """Tax paid for a sell transaction during simulation."""
  sellTax: String
  """Gas used for a sell transaction during simulation."""
  sellGasUsed: String
  """The maximum token amount an address can sell during simulation."""
  maxSellAmount: String
  """Whether or not the contract ownership was able to be transferred during simulation."""
  canTransferOwnership: Boolean
  """Whether or not the contract ownership was able to be renounced during simulation."""
  canRenounceOwnership: Boolean
  """Whether or not the contract ownership is already renounced during simulation (owner is 0x0)."""
  isOwnerRenounced: Boolean
  """If a call was found to trigger liquidity & trading, this is the call name."""
  openTradingCall: String
}

type LaunchpadData {
  """The name of the launchpad."""
  name: String @deprecated(reason: "Use launchpadName instead")
  """The name of the launchpad. One of the following: Pump.fun, Bonk, Baseapp, Zora, Zora Creator, Four.meme, Believe, Moonshot, Jupiter Studio, boop, ArenaTrade, Moonit, LaunchLab, MeteoraDBC, Vertigo, Cooking.City, time.fun, BAGS, Circus, Dealr, OhFuckFun, PrintFun, Trend, shout.fun, xApple, Sendshot, DubDub, cults."""
  launchpadName: String
  """The percentage of the pool that was sold to the public."""
  graduationPercent: Float
  """The address of the pool."""
  poolAddress: String
  """The unix timestamp when the launchpad was completed."""
  completedAt: Int
  """Indicates if the launchpad is completed."""
  completed: Boolean
  """The slot number when the launchpad was completed."""
  completedSlot: Int
  """The slot number when the launchpad was migrated."""
  migratedSlot: Int
  """The unix timestamp when the launchpad was migrated."""
  migratedAt: Int
  """Indicates if the launchpad was migrated."""
  migrated: Boolean
  """The pool address after the launchpad was migrated."""
  migratedPoolAddress: String
  """The launchpad protocol."""
  launchpadProtocol: String
  """The icon URL of the launchpad."""
  launchpadIconUrl: String
}

"""Response returned by `onLaunchpadTokenEvent`."""
type LaunchpadTokenEventOutput {
  """The contract address of the token."""
  address: String!
  """The network ID that the token is deployed on."""
  networkId: Int!
  """The protocol of the token."""
  protocol: String!
  """The name of the launchpad. One of the following: Pump.fun, Bonk, Baseapp, Zora, Zora Creator, Four.meme, Believe, Moonshot, Jupiter Studio, boop, ArenaTrade, Moonit, LaunchLab, MeteoraDBC, Vertigo, Cooking.City, time.fun, BAGS, Circus, Dealr, OhFuckFun, PrintFun, Trend, shout.fun, xApple, Sendshot, DubDub, cults."""
  launchpadName: String!
  """Metadata for the token."""
  token: EnhancedToken!
  """The number of buys in the last 24 hours."""
  buyCount1: Int
  """The type of event."""
  eventType: LaunchpadTokenEventType!
  """The number of holders."""
  holders: Int
  """The market cap of the token."""
  marketCap: String
  """The price of the token."""
  price: Float
  """The number of sells in the last 24 hours."""
  sellCount1: Int
  """The volume of the token in the last 24 hours."""
  volume1: Int
  """The number of transactions in the last 24 hours."""
  transactions1: Int
  """The liquidity of the token's top pair."""
  liquidity: String
}

"""The type of event. Note that associated statistics such as `buyCount1`, `price`, etc. are only available for `Updated` events."""
enum LaunchpadTokenEventType {
  """The token has been discovered"""
  Deployed
  """The token has been created with metadata"""
  Created
  """The token's statistics have been updated"""
  Updated
  """The token has been completed"""
  Completed
  """The token has been migrated"""
  Migrated
  """The token has been discovered (not finalized)"""
  UnconfirmedDeployed
  """The token's metadata has been processed (not finalized)"""
  UnconfirmedMetadata
}

"""The protocol of the token."""
enum LaunchpadTokenProtocol {
  """Protocol name for Pump.fun."""
  Pump
  """Protocol name for Four.meme."""
  FourMeme
  """Protocol name for LaunchLab and Bonk."""
  RaydiumLaunchpad
  """Protocol name for boop.fun."""
  BoopFun
  """Protocol name for Vertigo."""
  Vertigo
  """Protocol name for Rainbow."""
  Rainbow
  """Protocol name for EgoTech."""
  EgoTech
  """Protocol name for ArenaTrade."""
  ArenaTrade
  """Protocol name for Moonit (formerly Moonshot)."""
  Moonit
  """Protocol name for MeteoraDBC."""
  MeteoraDBC
  """Protocol name for Baseapp."""
  Baseapp
  """Protocol name for Zora."""
  ZoraV4
  """Protocol name for ZoraCreator."""
  ZoraCreatorV4
}

scalar link__Import

enum link__Purpose {
  """`SECURITY` features provide metadata necessary to securely resolve fields."""
  SECURITY
  """`EXECUTION` features provide metadata necessary for operation execution."""
  EXECUTION
}

"""Data about liquidity in a pair."""
type LiquidityData {
  """The active liquidity in the pair."""
  active: String!
  """The inactive liquidity in the pair."""
  inactive: String!
}

"""A record of locked liquidity."""
type LiquidityLock {
  """The pair address."""
  pairAddress: String!
  """The network ID the pair is deployed on."""
  networkId: Int!
  """The wallet address of the owner."""
  ownerAddress: String!
  """The address of the locker contract."""
  lockerAddress: String!
  """The unix timestamp for when the lock was created."""
  createdAt: Int!
  """The unix timestamp for when the lock expires."""
  unlockAt: Int
  """The protocol with which the liquidity is locked."""
  lockProtocol: LiquidityLockProtocol!
  """The protocol that created the pair"""
  liquidityProtocol: LiquidityProtocol! @deprecated(reason: "Use liquidityProtocolV2 instead")
  """The protocol that created the pair"""
  liquidityProtocolV2: String!
  """The amount of liquidity locked."""
  liquidityAmount: String!
  """The inital amount of token0 locked."""
  initialAmountToken0: String!
  """The inital amount of token1 locked."""
  initialAmountToken1: String!
  """If the liquidity position is represented by an NFT, this will contain the NFT data."""
  liquidityNftData: LiquidityNftData
}

"""A breakdown of how much and where liquidity is locked."""
type LiquidityLockBreakdownForToken {
  """The protocol with which the liquidity is locked."""
  lockProtocol: LiquidityLockProtocol!
  """The amount of liquidity locked in USD."""
  amountLockedUsd: String!
  """The amount of tokens locked in the protocol."""
  amountLockedTokens: String!
  """The amount of tokens locked in the protocol shifted by number of decimals the token has."""
  amountLockedTokensShifted: String!
}

"""Response returned by `liquidityLocks`."""
type LiquidityLockConnection {
  """A list of liquidity locks."""
  items: [LiquidityLock!]!
  """A cursor for use in pagination."""
  cursor: String
}

"""Protocols that can lock liquidity."""
enum LiquidityLockProtocol {
  BASECAMP_V1
  UNCX_V2
  UNCX_V3
  BURN
  BITBOND
}

"""Metadata about a pair's liquidity. Includes locked liquidity data."""
type LiquidityMetadata {
  """Data about locked liquidity."""
  lockedLiquidity: LockedLiquidityData!
  """Data about unlocked liquidity."""
  liquidity: LiquidityData!
}

"""Metadata about a token's liquidity. Includes locked liquidity data for up to 100 pairs that the token is in."""
type LiquidityMetadataByToken {
  """The address of the token."""
  tokenAddress: String!
  """The network ID the token is deployed on."""
  networkId: Int!
  """The total liquidity in USD."""
  totalLiquidityUsd: String!
  """The locked liquidity in USD."""
  lockedLiquidityUsd: String!
  """The total amount of tokens in pairs."""
  totalTokenLiquidity: String!
  """The total amount of tokens in pairs shifted by number of decimals the token has."""
  totalTokenLiquidityShifted: String!
  """The locked amount of tokens in pairs."""
  lockedTokenLiquidity: String!
  """The locked amount of tokens in pairs shifted by number of decimals the token has."""
  lockedTokenLiquidityShifted: String!
  """The percentage of liquidity that is locked."""
  lockedLiquidityPercentage: Float!
  """A breakdown of how much and where liquidity is locked."""
  lockBreakdown: [LiquidityLockBreakdownForToken]!
}

"""Liquidity NFT position data."""
type LiquidityNftData {
  """The tokenId of the liquidity position nft."""
  nftTokenId: String!
  """The address of the nft position manager contract."""
  nftPositionManagerAddress: String!
}

"""Protocols that create trading pairs."""
enum LiquidityProtocol {
  UNISWAP_V3
  UNISWAP_V2
  RAYDIUM_V4
  PUMP_V1
  USE_LIQUIDITY_PROTOCOL_V2
}

"""Response returned by `listPairsWithMetadataForToken`."""
type ListPairsForTokenResponse {
  """A list of pairs containing a given token."""
  results: [ListPairsForTokenValue!]!
}

"""Metadata for a pair containing a given token."""
type ListPairsForTokenValue {
  """The volume for the pair in USD."""
  volume: String!
  """The total liquidity in the pair."""
  liquidity: String!
  """Metadata for token with higher liquidity within the pair."""
  token: EnhancedToken!
  """Metadata for token with lower liquidity within the pair."""
  backingToken: EnhancedToken!
  """Metadata for the pair."""
  pair: Pair!
  """Exchange metadata for the pair."""
  exchange: Exchange!
  """The token of interest within the pair. Can be `token0` or `token1`."""
  quoteToken: QuoteToken
}

"""Breakdown of how much and where liquidity is locked."""
type LockBreakdown {
  """The protocol with which the liquidity is locked."""
  lockProtocol: LiquidityLockProtocol!
  """The amount of active liquidity locked."""
  active: String!
  """The amount of inactive liquidity locked."""
  inactive: String!
}

"""Data about locked liquidity."""
type LockedLiquidityData {
  """The amount of active liquidity locked."""
  active: String!
  """The amount of inactive liquidity locked."""
  inactive: String!
  """A breakdown of how much and where liquidity is locked."""
  lockBreakdown: [LockBreakdown]!
}

"""Response returned by `getTokenEventsForMaker`."""
type MakerEventConnection {
  """A list of transactions for a token's top pair."""
  items: [Event]
  """A cursor for use in pagination."""
  cursor: String
}

input MakerEventsQueryInput {
  """The specific wallet address to filter by."""
  maker: String!
  """The time range to filter by."""
  timestamp: EventQueryTimestampInput
  """The network ID to filter by."""
  networkId: Int
  """The total amount of `quoteToken` involved in the swap in USD (`amountNonLiquidityToken` x `priceUsd`)."""
  priceUsdTotal: NumberFilter
  """The specific event type to filter by."""
  eventType: EventType
  """The token involved in the event."""
  tokenAddress: String
}

"""Webhook conditions for a market cap event."""
type MarketCapEventWebhookCondition {
  """The token contract address the webhook is listening for."""
  tokenAddress: StringEqualsCondition!
  """The network ID the webhook is listening on."""
  networkId: IntEqualsCondition!
  """The market cap condition that must be met in order for the webhook to send."""
  fdvMarketCapUsd: ComparisonOperator
  """The circulating market cap condition that must be met in order for the webhook to send."""
  circulatingMarketCapUsd: ComparisonOperator
  """The pair contract address the webhook is listening for."""
  pairAddress: StringEqualsCondition
}

"""Input conditions for a market cap event webhook."""
input MarketCapEventWebhookConditionInput {
  """The contract address of the token to listen for."""
  tokenAddress: StringEqualsConditionInput!
  """The network ID to listen on."""
  networkId: IntEqualsConditionInput!
  """The price conditions to listen for."""
  fdvMarketCapUsd: ComparisonOperatorInput
  """The circulating market cap conditions to listen for."""
  circulatingMarketCapUsd: ComparisonOperatorInput
  """The contract address of the pair to listen for."""
  pairAddress: StringEqualsConditionInput
}

"""The status for a network supported on Defined."""
type MetadataResponse {
  """The last processed block on the network."""
  lastProcessedBlock: Int
  """The unix timestamp for the last processed block on the network."""
  lastProcessedTimestamp: Int
  """The network ID."""
  networkId: Int!
  """The name of the network."""
  networkName: String!
}

"""Event data for a token mint event."""
type MintEventData {
  """The amount of `token0` added to the pair."""
  amount0: String
  """The amount of `token1` added to the pair."""
  amount1: String
  """The amount of `token0` added to the pair, adjusted by the number of decimals in the token. For example, if `amount0` is in WEI, `amount0Shifted` will be in ETH."""
  amount0Shifted: String
  """The amount of `token1` added to the pair, adjusted by the number of decimals in the token. For example, USDC `amount1Shifted` will be by 6 decimals."""
  amount1Shifted: String
  """The lower tick boundary of the position. Only applicable for UniswapV3 events."""
  tickLower: String
  """The upper tick boundary of the position. Only applicable for UniswapV3 events."""
  tickUpper: String
  """The type of token event, `Mint`."""
  type: EventType!
}

"""A network supported on Defined."""
type Network {
  """The name of the network. For example, `arbitrum`."""
  name: String!
  """The network ID. For example, `42161` for `arbitrum`."""
  id: Int!
  networkShortName: String
}

"""A breakdown of the wallet's activity by network."""
type NetworkBreakdown {
  """The network ID"""
  networkId: Int!
  """The native token balance"""
  nativeTokenBalance: String!
  """The stats for the last day"""
  statsDay1: WindowedWalletStats
  """The stats for the last week"""
  statsWeek1: WindowedWalletStats
  """The stats for the last 30 days"""
  statsDay30: WindowedWalletStats
  """The stats for the last year"""
  statsYear1: WindowedWalletStats
}

"""A connection of wallets matching a filter on a specific network."""
type NetworkWalletFilterConnection {
  """The list of wallets matching the filter parameters."""
  results: [NetworkWalletFilterResult!]!
  """The number of wallets returned."""
  count: Int!
  """Where in the list the server started when returning items."""
  offset: Int!
}

"""A wallet matching a filter on a specific network."""
type NetworkWalletFilterResult {
  """The wallet address"""
  address: String!
  """The network ID of the wallet"""
  networkId: Int!
  """The unix timestamp for the first transaction from this wallet"""
  firstTransactionAt: Int
  """The unix timestamp for the last transaction from this wallet"""
  lastTransactionAt: Int!
  """The native token balance of the wallet"""
  nativeTokenBalance: String!
  """The labels associated with the wallet"""
  labels: [String!]!
  """Volume in USD in the past day"""
  volumeUsd1d: String!
  """Total volume in USD in the past day including all tokens"""
  volumeUsdAll1d: String!
  """Realized profit in USD in the past day"""
  realizedProfitUsd1d: String!
  """Average profit in USD per trade in the past day"""
  averageProfitUsdPerTrade1d: String!
  """Average swap amount in USD in the past day"""
  averageSwapAmountUsd1d: String!
  """Realized profit percentage in the past day"""
  realizedProfitPercentage1d: Float!
  """Number of swaps in the past day"""
  swaps1d: Int!
  """Total number of swaps in the past day including all tokens"""
  swapsAll1d: Int!
  """Number of unique tokens traded in the past day"""
  uniqueTokens1d: Int!
  """Win rate in the past day"""
  winRate1d: Float!
  """Volume in USD in the past week"""
  volumeUsd1w: String!
  """Total volume in USD in the past week including all tokens"""
  volumeUsdAll1w: String!
  """Realized profit in USD in the past week"""
  realizedProfitUsd1w: String!
  """Average profit in USD per trade in the past week"""
  averageProfitUsdPerTrade1w: String!
  """Average swap amount in USD in the past week"""
  averageSwapAmountUsd1w: String!
  """Realized profit percentage in the past week"""
  realizedProfitPercentage1w: Float!
  """Number of swaps in the past week"""
  swaps1w: Int!
  """Total number of swaps in the past week including all tokens"""
  swapsAll1w: Int!
  """Number of unique tokens traded in the past week"""
  uniqueTokens1w: Int!
  """Win rate in the past week"""
  winRate1w: Float!
  """Volume in USD in the past 30 days"""
  volumeUsd30d: String!
  """Total volume in USD in the past 30 days including all tokens"""
  volumeUsdAll30d: String!
  """Realized profit in USD in the past 30 days"""
  realizedProfitUsd30d: String!
  """Average profit in USD per trade in the past 30 days"""
  averageProfitUsdPerTrade30d: String!
  """Average swap amount in USD in the past 30 days"""
  averageSwapAmountUsd30d: String!
  """Realized profit percentage in the past 30 days"""
  realizedProfitPercentage30d: Float!
  """Number of swaps in the past 30 days"""
  swaps30d: Int!
  """Total number of swaps in the past 30 days including all tokens"""
  swapsAll30d: Int!
  """Number of unique tokens traded in the past 30 days"""
  uniqueTokens30d: Int!
  """Win rate in the past 30 days"""
  winRate30d: Float!
  """Volume in USD in the past year"""
  volumeUsd1y: String!
  """Total volume in USD in the past year including all tokens"""
  volumeUsdAll1y: String!
  """Realized profit in USD in the past year"""
  realizedProfitUsd1y: String!
  """Average profit in USD per trade in the past year"""
  averageProfitUsdPerTrade1y: String!
  """Average swap amount in USD in the past year"""
  averageSwapAmountUsd1y: String!
  """Realized profit percentage in the past year"""
  realizedProfitPercentage1y: Float!
  """Number of swaps in the past year"""
  swaps1y: Int!
  """Total number of swaps in the past year including all tokens"""
  swapsAll1y: Int!
  """Number of unique tokens traded in the past year"""
  uniqueTokens1y: Int!
  """Win rate in the past year"""
  winRate1y: Float!
  """The scammer score for the wallet."""
  scammerScore: Int
  """The bot score for the wallet."""
  botScore: Int
  """The backfill state of the wallet."""
  backfillState: WalletAggregateBackfillState
}

"""Native token balance for a wallet on a network."""
type NetworkWalletStats {
  """The network ID"""
  networkId: Int!
  """The native token balance"""
  nativeTokenBalance: String!
}

"""Event data for creating a new NFT pool."""
type NewPoolEventData {
  """The type of NFT pool event, `NEW_POOL`."""
  type: NftPoolEventType!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The contract address of the NFT pool."""
  poolAddress: String!
  """The contract address of the NFT collection."""
  collectionAddress: String!
  """The contract address of the liquidity token of the pool (usually WETH)."""
  tokenAddress: String!
  """The wallet address of the pool owner."""
  ownerAddress: String!
  """The wallet address that will receive the tokens or NFT sent to the pair during swaps."""
  assetRecipientAddress: String!
  """The contract address of the bonding curve."""
  bondingCurveAddress: String!
  """The bonding curve type that defines how the prices of NFTs change after each buy or sell within a pool."""
  bondingCurveType: BondingCurveType!
  """The initial delta used in the bonding curve."""
  delta: String!
  """The pool fee amount in the pool's liquidity token."""
  feeAmountT: String!
  """The initial spot price in the pool's liquidity token."""
  startPriceT: String!
  """The initial price at which the pool is willing to buy an NFT in the pool's liquidity token."""
  buyPriceT: String!
  """The initial price at which the pool is willing to sell an NFT in the pool's liquidity token."""
  sellPriceT: String!
  """The unix timestamp for the time the pool was created."""
  createdAt: Int!
  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!
  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for creating a new NFT pool."""
type NewPoolEventDataV2 {
  """The type of NFT pool event, `NEW_POOL`."""
  type: NftPoolEventType!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The contract address of the NFT pool."""
  poolAddress: String!
  """The contract address of the NFT collection."""
  collectionAddress: String!
  """The contract address of the liquidity token of the pool (usually WETH)."""
  tokenAddress: String!
  """The wallet address of the pool owner."""
  ownerAddress: String!
  """The wallet address that will receive the tokens or NFT sent to the pair during swaps."""
  assetRecipientAddress: String!
  """The contract address of the bonding curve."""
  bondingCurveAddress: String!
  """The bonding curve type that defines how the prices of NFTs change after each buy or sell within a pool."""
  bondingCurveType: BondingCurveType!
  """The initial delta used in the bonding curve."""
  delta: String!
  """The pool fee amount in the pool's liquidity token."""
  feeAmountT: String!
  """The initial spot price in the pool's liquidity token."""
  startPriceT: String!
  """The initial price at which the pool is willing to buy an NFT in the pool's liquidity token."""
  buyPriceT: String!
  """The initial price at which the pool is willing to sell an NFT in the pool's liquidity token."""
  sellPriceT: String!
  """The unix timestamp for the time the pool was created."""
  createdAt: Int!
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!
  """The ratio of the transaction token to USD."""
  usdRatio: String!
  """The list of NFT token IDs initially deposited."""
  nftTokenIds: [String!]!
  """The amount of each NFT token initially deposited."""
  nftTokenQuantities: [String]!
  """*New Param*: The list of NFT assets withdrawn. More extensive info than nftTokenIds."""
  nftAssets: [NftAsset]
  """The type of NFT in the pool."""
  poolNftType: PoolNftType!
  """The list of royalties for the pool. Only applicable for `SUDOSWAP_V2` pools."""
  royalties: [NftPoolRoyalty]
  """The property checker contract address for the pool."""
  propertyChecker: String
}

"""An NFT asset."""
type NftAsset {
  """The ID of the NFT asset (`address`:`networkId`)."""
  id: String!
  """The contract address of the NFT collection."""
  address: String!
  """The token ID of the NFT asset."""
  tokenId: String!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The NFT asset media."""
  media: NftAssetMedia
  """The name of the NFT asset."""
  name: String
  """The description of the NFT asset."""
  description: String
  """The source image URI linked by smart contract metadata."""
  originalImage: String
  """The URI provided by the smart contract. Typically JSON that contains metadata."""
  uri: String
  """The attributes for the NFT asset."""
  attributes: [NftAssetAttribute!]
  """The number of NFT assets with the same NFT token ID. Only applicable for ERC1155 tokens."""
  quantity: String
  """Raw NFT metadata from the smart contract."""
  rawAssetData: RawNftAssetData
}

"""Attributes for an NFT asset."""
type NftAssetAttribute {
  """Suggested class name to use for css styling. An optional attribute of ERC-1155 assets."""
  class: String
  """Suggested CSS styling. An optional attribute of ERC-1155 assets."""
  css: String
  """The attribute display type. Can be `Trait`, `Stat`, `Ranking`, `BoostNumber`, `BoostPercentage` or `Date`."""
  displayType: NftAssetAttributeDisplayType!
  """The max value, if applicable."""
  maxValue: String
  """The name of the attribute."""
  name: String!
  """The value of the attribute."""
  value: String!
  """The type for the `value` field. Can be `String`, `Number` or `Array`."""
  valueType: NftAssetAttributeType!
}

"""The display type for the NFT asset attribute."""
enum NftAssetAttributeDisplayType {
  Trait
  Stat
  Ranking
  BoostNumber
  BoostPercentage
  Date
}

"""The type for the NFT asset attribute `value` field."""
enum NftAssetAttributeType {
  String
  Number
  Array
}

"""An NFT asset error."""
type NftAssetError {
  """The ID of the NFT asset (`address`:`networkId`)."""
  id: String!
  """The contract address of the NFT collection."""
  address: String!
  """The token ID of the NFT asset."""
  tokenId: String!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The status of the asset error."""
  status: NftAssetErrorStatus!
  """The message of the asset error."""
  message: String!
}

"""The status of an NFT asset error."""
enum NftAssetErrorStatus {
  NOT_FOUND
  INDEXING_IN_PROGRESS
}

"""NFT asset media."""
type NftAssetMedia {
  """The URL for a full size image of the NFT asset."""
  image: String!
  """The URL for small generated thumbnail of the NFT asset."""
  thumbSm: String!
  """The URL for large generated thumbnail of the NFT asset."""
  thumbLg: String!
  """Whether the NFT asset media has finished processing."""
  processed: Boolean
}

"""Response returned by `getNftAssets`."""
type NftAssetsConnection {
  """A list of NFT assets."""
  items: [NftAsset]
  """A list of errors encountered while fetching the NFT assets. Errors correspond to null values in `items` by array index."""
  itemErrors: [NftAssetError]
  """A cursor for use in pagination."""
  cursor: String
}

"""Wallet balance of an Nft Collection."""
type NftBalance {
  """The address of the wallet."""
  walletAddress: String!
  """The ID of the collection (`collectionAddress:networkId`)."""
  collectionId: String!
  """The number of items held by the wallet."""
  balance: String!
}

"""Price stats for an NFT collection over a time frame. Either in USD or the network's base token."""
type NftCollectionCurrencyStats {
  """The volume over the time frame."""
  volume: NftStatsStringMetrics
  """The volume partitioned by fillsource over the time frame"""
  volumeByFillsource: [NftFillsourceStatsStringMetrics]
  """The percentages of total volume partitioned by fillsource over the time frame"""
  volumePercentByFillsource: [NftFillsourceStatsNumberMetrics]
  """The average sale price in the time frame."""
  average: NftStatsStringMetrics
  """The opening price for the time frame."""
  open: NftStatsStringMetrics
  """The closing price for the time frame."""
  close: NftStatsStringMetrics
  """The lowest sale price in the time frame."""
  lowestSale: NftStatsStringMetrics
  """The highest sale price in the time frame."""
  highestSale: NftStatsStringMetrics
}

"""Stat and change for a string based fillsource amount."""
type NftCollectionFillsourceNumberStat {
  """The marketplace that filled the NFT order volume. (ex. OPENSEA, BLUR, etc.)"""
  fillsource: String!
  """The amount of the stat traded in the current time frame."""
  amount: Float!
  """The change in fillsource volume between the previous and current time frame."""
  change: Float
}

"""Stat and change for a string based fillsource amount."""
type NftCollectionFillsourceStringStat {
  """The marketplace that filled the NFT order volume. (ex. OPENSEA, BLUR, etc.)"""
  fillsource: String!
  """The amount of the stat traded in the current time frame."""
  amount: String!
  """The change in fillsource volume between the previous and current time frame."""
  change: Float
}

"""Response returned by `filterNftCollections`."""
type NftCollectionFilterConnection {
  """The list of NFT collections matching the filter parameters."""
  results: [NftCollectionFilterResult]
  """The number of NFT collections returned."""
  count: Int
  """Where in the list the server started when returning items."""
  offset: Int
}

"""An NFT collection matching a set of filter parameters."""
type NftCollectionFilterResult {
  """The ID of the NFT collection (`address`:`networkId`)."""
  id: String
  """The contract address of the NFT collection."""
  address: String
  """The marketplace address or `all`. Can be used to get marketplace-specific metrics."""
  grouping: String
  """The network ID the NFT collection is deployed on."""
  networkId: Int
  """The name of the NFT collection."""
  name: String
  """The symbol of the NFT collection."""
  symbol: String
  """The unix timestamp for the last event."""
  lastEventTimestamp: Int
  """The token standard. Can be a variation of `ERC-721` or `ERC-1155`."""
  ercType: String
  """The image URL for the collection or one of the assets within the collection."""
  imageUrl: String
  """The total supply of the NFT collection."""
  totalSupply: String
  """The unix timestamp indicating the last time the data was updated. Updates daily."""
  timestamp: Int
  """Stats for the past hour."""
  stats1h: NftStatsWindowWithChange
  """Stats for the past 4 hours."""
  stats4h: NftStatsWindowWithChange
  """Stats for the past 12 hours."""
  stats12h: NftStatsWindowWithChange
  """Stats for the past 24 hours."""
  stats24h: NftStatsWindowWithChange
}

"""Input filters for `filterNftCollections`."""
input NftCollectionFilters {
  """The total supply of the NFT collection."""
  totalSupply: NumberFilter
  """The unix timestamp for the last event."""
  lastEventTimestamp: NumberFilter
  """The list of token standards to filter by."""
  ercType: [NftContractErcType]
  """The list of network IDs to filter by."""
  network: [Int]
  """Stats for the past hour."""
  stats1h: NftStatsWindowFilter
  """Stats for the past 4 hours."""
  stats4h: NftStatsWindowFilter
  """Stats for the past 12 hours."""
  stats12h: NftStatsWindowFilter
  """Stats for the past 24 hours."""
  stats24h: NftStatsWindowFilter
}

"""Response returned by `getNftCollectionMetadata`."""
type NftCollectionMetadataResponse {
  """The ID of the NFT collection (`address`:`networkId`)."""
  id: String!
  """Metadata for the NFT collection."""
  contract: NftContract!
  """A list of stats for the NFT collection across different time frames."""
  stats: [NftCollectionWindowStats]
  """The media for one of the assets within the NFT collection."""
  media: NftAssetMedia
}

"""Numerical stats for an NFT collection over a time frame."""
type NftCollectionNonCurrencyStats {
  """The number of mints over the time frame."""
  mints: NftStatsNumberMetrics
  """The number of sales over the time frame."""
  sales: NftStatsNumberMetrics
  """The number of tokens sold over the time frame."""
  tokensSold: NftStatsStringMetrics
  """The number of transfers over the time frame."""
  transfers: NftStatsNumberMetrics
  """The number of unique buyers over the time frame."""
  uniqueBuyers: NftStatsNumberMetrics
  """The number of unique sellers over the time frame."""
  uniqueSellers: NftStatsNumberMetrics
  """The number of unique wallets (buyers or sellers) over the time frame."""
  uniqueSalesWallets: NftStatsNumberMetrics
  """The number of unique minters over the time frame."""
  uniqueMinters: NftStatsNumberMetrics
}

"""Price stats for an NFT collection over a time frame. Either in USD or the network's base token."""
type NftCollectionPriceStats {
  """The trade volume."""
  volume: String!
  """The lowest sale price."""
  floor: String!
  """The average sale price."""
  average: String!
  """The highest sale price."""
  ceiling: String!
  """The change in volume between the previous and current time frame."""
  volumeChange: Float
  """The change in floor price between the previous and current time frame."""
  floorChange: Float
  """The change in average price between the previous and current time frame."""
  averageChange: Float
  """The change in ceiling price between the previous and current time frame."""
  ceilingChange: Float
  """The volume partitioned by fillsource over the time frame"""
  volumeByFillsource: [NftCollectionFillsourceStringStat]
  """The percentages of total volume partitioned by fillsource over the time frame"""
  volumePercentByFillsource: [NftCollectionFillsourceNumberStat]
}

"""Input type of `NftCollectionRanking`."""
input NftCollectionRanking {
  """The attribute to rank NFT collections by."""
  attribute: NftCollectionRankingAttribute
  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""The attribute used to rank NFT collections."""
enum NftCollectionRankingAttribute {
  totalSupply
  lastEventTimestamp
  stats1hUsdVolumeCurrent
  stats1hUsdVolumePrevious
  stats1hUsdVolumeChange
  stats1hUsdVolumeByFillsourceOpenseaCurrent
  stats1hUsdVolumeByFillsourceOpenseaChange
  stats1hUsdVolumeByFillsourceOpenseaPrevious
  stats1hUsdVolumeByFillsourceOpenseaProCurrent
  stats1hUsdVolumeByFillsourceOpenseaProChange
  stats1hUsdVolumeByFillsourceOpenseaProPrevious
  stats1hUsdVolumeByFillsourceSeaportCurrent
  stats1hUsdVolumeByFillsourceSeaportChange
  stats1hUsdVolumeByFillsourceSeaportPrevious
  stats1hUsdVolumeByFillsourceX2Y2Current
  stats1hUsdVolumeByFillsourceX2Y2Change
  stats1hUsdVolumeByFillsourceX2Y2Previous
  stats1hUsdVolumeByFillsourceLooksrareCurrent
  stats1hUsdVolumeByFillsourceLooksrareChange
  stats1hUsdVolumeByFillsourceLooksrarePrevious
  stats1hUsdVolumeByFillsourceLooksrareV2Current
  stats1hUsdVolumeByFillsourceLooksrareV2Change
  stats1hUsdVolumeByFillsourceLooksrareV2Previous
  stats1hUsdVolumeByFillsourceBlurCurrent
  stats1hUsdVolumeByFillsourceBlurChange
  stats1hUsdVolumeByFillsourceBlurPrevious
  stats1hUsdVolumeByFillsourceBlurV2Current
  stats1hUsdVolumeByFillsourceBlurV2Change
  stats1hUsdVolumeByFillsourceBlurV2Previous
  stats1hUsdVolumeByFillsourceBlendCurrent
  stats1hUsdVolumeByFillsourceBlendChange
  stats1hUsdVolumeByFillsourceBlendPrevious
  stats1hUsdVolumeByFillsourceGemCurrent
  stats1hUsdVolumeByFillsourceGemChange
  stats1hUsdVolumeByFillsourceGemPrevious
  stats1hUsdVolumeByFillsourceSudoswapCurrent
  stats1hUsdVolumeByFillsourceSudoswapChange
  stats1hUsdVolumeByFillsourceSudoswapPrevious
  stats1hUsdVolumeByFillsourceSudoswapV2Current
  stats1hUsdVolumeByFillsourceSudoswapV2Change
  stats1hUsdVolumeByFillsourceSudoswapV2Previous
  stats1hUsdVolumeByFillsourceCryptopunksCurrent
  stats1hUsdVolumeByFillsourceCryptopunksChange
  stats1hUsdVolumeByFillsourceCryptopunksPrevious
  stats1hUsdAverageCurrent
  stats1hUsdAveragePrevious
  stats1hUsdAverageChange
  stats1hUsdOpenCurrent
  stats1hUsdOpenPrevious
  stats1hUsdOpenChange
  stats1hUsdCloseCurrent
  stats1hUsdClosePrevious
  stats1hUsdCloseChange
  stats1hUsdLowestSaleCurrent
  stats1hUsdLowestSalePrevious
  stats1hUsdLowestSaleChange
  stats1hUsdHighestSaleCurrent
  stats1hUsdHighestSalePrevious
  stats1hUsdHighestSaleChange
  stats1hNetworkBaseTokenVolumeCurrent
  stats1hNetworkBaseTokenVolumePrevious
  stats1hNetworkBaseTokenVolumeChange
  stats1hNetworkBaseTokenVolumeByFillsourceOpenseaCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceOpenseaChange
  stats1hNetworkBaseTokenVolumeByFillsourceOpenseaPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceOpenseaProCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceOpenseaProChange
  stats1hNetworkBaseTokenVolumeByFillsourceOpenseaProPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceSeaportCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceSeaportChange
  stats1hNetworkBaseTokenVolumeByFillsourceSeaportPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceX2Y2Current
  stats1hNetworkBaseTokenVolumeByFillsourceX2Y2Change
  stats1hNetworkBaseTokenVolumeByFillsourceX2Y2Previous
  stats1hNetworkBaseTokenVolumeByFillsourceLooksrareCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceLooksrareChange
  stats1hNetworkBaseTokenVolumeByFillsourceLooksrarePrevious
  stats1hNetworkBaseTokenVolumeByFillsourceLooksrareV2Current
  stats1hNetworkBaseTokenVolumeByFillsourceLooksrareV2Change
  stats1hNetworkBaseTokenVolumeByFillsourceLooksrareV2Previous
  stats1hNetworkBaseTokenVolumeByFillsourceBlurCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceBlurChange
  stats1hNetworkBaseTokenVolumeByFillsourceBlurPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceBlurV2Current
  stats1hNetworkBaseTokenVolumeByFillsourceBlurV2Change
  stats1hNetworkBaseTokenVolumeByFillsourceBlurV2Previous
  stats1hNetworkBaseTokenVolumeByFillsourceBlendCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceBlendChange
  stats1hNetworkBaseTokenVolumeByFillsourceBlendPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceGemCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceGemChange
  stats1hNetworkBaseTokenVolumeByFillsourceGemPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceSudoswapCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceSudoswapChange
  stats1hNetworkBaseTokenVolumeByFillsourceSudoswapPrevious
  stats1hNetworkBaseTokenVolumeByFillsourceSudoswapV2Current
  stats1hNetworkBaseTokenVolumeByFillsourceSudoswapV2Change
  stats1hNetworkBaseTokenVolumeByFillsourceSudoswapV2Previous
  stats1hNetworkBaseTokenVolumeByFillsourceCryptopunksCurrent
  stats1hNetworkBaseTokenVolumeByFillsourceCryptopunksChange
  stats1hNetworkBaseTokenVolumeByFillsourceCryptopunksPrevious
  stats1hNetworkBaseTokenAverageCurrent
  stats1hNetworkBaseTokenAveragePrevious
  stats1hNetworkBaseTokenAverageChange
  stats1hNetworkBaseTokenOpenCurrent
  stats1hNetworkBaseTokenOpenPrevious
  stats1hNetworkBaseTokenOpenChange
  stats1hNetworkBaseTokenCloseCurrent
  stats1hNetworkBaseTokenClosePrevious
  stats1hNetworkBaseTokenCloseChange
  stats1hNetworkBaseTokenLowestSaleCurrent
  stats1hNetworkBaseTokenLowestSalePrevious
  stats1hNetworkBaseTokenLowestSaleChange
  stats1hNetworkBaseTokenHighestSaleCurrent
  stats1hNetworkBaseTokenHighestSalePrevious
  stats1hNetworkBaseTokenHighestSaleChange
  stats1hNonCurrencyMintsCurrent
  stats1hNonCurrencyMintsPrevious
  stats1hNonCurrencyMintsChange
  stats1hNonCurrencySalesCurrent
  stats1hNonCurrencySalesPrevious
  stats1hNonCurrencySalesChange
  stats1hNonCurrencyTokensSoldCurrent
  stats1hNonCurrencyTokensSoldPrevious
  stats1hNonCurrencyTokensSoldChange
  stats1hNonCurrencyTransfersCurrent
  stats1hNonCurrencyTransfersPrevious
  stats1hNonCurrencyTransfersChange
  stats1hNonCurrencyUniqueBuyersCurrent
  stats1hNonCurrencyUniqueBuyersPrevious
  stats1hNonCurrencyUniqueBuyersChange
  stats1hNonCurrencyUniqueSellersCurrent
  stats1hNonCurrencyUniqueSellersPrevious
  stats1hNonCurrencyUniqueSellersChange
  stats1hNonCurrencyUniqueSalesWalletsCurrent
  stats1hNonCurrencyUniqueSalesWalletsPrevious
  stats1hNonCurrencyUniqueSalesWalletsChange
  stats1hNonCurrencyUniqueMintersCurrent
  stats1hNonCurrencyUniqueMintersPrevious
  stats1hNonCurrencyUniqueMintersChange
  stats4hUsdVolumeCurrent
  stats4hUsdVolumePrevious
  stats4hUsdVolumeChange
  stats4hUsdVolumeByFillsourceOpenseaCurrent
  stats4hUsdVolumeByFillsourceOpenseaChange
  stats4hUsdVolumeByFillsourceOpenseaPrevious
  stats4hUsdVolumeByFillsourceOpenseaProCurrent
  stats4hUsdVolumeByFillsourceOpenseaProChange
  stats4hUsdVolumeByFillsourceOpenseaProPrevious
  stats4hUsdVolumeByFillsourceSeaportCurrent
  stats4hUsdVolumeByFillsourceSeaportChange
  stats4hUsdVolumeByFillsourceSeaportPrevious
  stats4hUsdVolumeByFillsourceX2Y2Current
  stats4hUsdVolumeByFillsourceX2Y2Change
  stats4hUsdVolumeByFillsourceX2Y2Previous
  stats4hUsdVolumeByFillsourceLooksrareCurrent
  stats4hUsdVolumeByFillsourceLooksrareChange
  stats4hUsdVolumeByFillsourceLooksrarePrevious
  stats4hUsdVolumeByFillsourceLooksrareV2Current
  stats4hUsdVolumeByFillsourceLooksrareV2Change
  stats4hUsdVolumeByFillsourceLooksrareV2Previous
  stats4hUsdVolumeByFillsourceBlurCurrent
  stats4hUsdVolumeByFillsourceBlurChange
  stats4hUsdVolumeByFillsourceBlurPrevious
  stats4hUsdVolumeByFillsourceBlurV2Current
  stats4hUsdVolumeByFillsourceBlurV2Change
  stats4hUsdVolumeByFillsourceBlurV2Previous
  stats4hUsdVolumeByFillsourceBlendCurrent
  stats4hUsdVolumeByFillsourceBlendChange
  stats4hUsdVolumeByFillsourceBlendPrevious
  stats4hUsdVolumeByFillsourceGemCurrent
  stats4hUsdVolumeByFillsourceGemChange
  stats4hUsdVolumeByFillsourceGemPrevious
  stats4hUsdVolumeByFillsourceSudoswapCurrent
  stats4hUsdVolumeByFillsourceSudoswapChange
  stats4hUsdVolumeByFillsourceSudoswapPrevious
  stats4hUsdVolumeByFillsourceSudoswapV2Current
  stats4hUsdVolumeByFillsourceSudoswapV2Change
  stats4hUsdVolumeByFillsourceSudoswapV2Previous
  stats4hUsdVolumeByFillsourceCryptopunksCurrent
  stats4hUsdVolumeByFillsourceCryptopunksChange
  stats4hUsdVolumeByFillsourceCryptopunksPrevious
  stats4hUsdAverageCurrent
  stats4hUsdAveragePrevious
  stats4hUsdAverageChange
  stats4hUsdOpenCurrent
  stats4hUsdOpenPrevious
  stats4hUsdOpenChange
  stats4hUsdCloseCurrent
  stats4hUsdClosePrevious
  stats4hUsdCloseChange
  stats4hUsdLowestSaleCurrent
  stats4hUsdLowestSalePrevious
  stats4hUsdLowestSaleChange
  stats4hUsdHighestSaleCurrent
  stats4hUsdHighestSalePrevious
  stats4hUsdHighestSaleChange
  stats4hNetworkBaseTokenVolumeCurrent
  stats4hNetworkBaseTokenVolumePrevious
  stats4hNetworkBaseTokenVolumeChange
  stats4hNetworkBaseTokenVolumeByFillsourceOpenseaCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceOpenseaChange
  stats4hNetworkBaseTokenVolumeByFillsourceOpenseaPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceOpenseaProCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceOpenseaProChange
  stats4hNetworkBaseTokenVolumeByFillsourceOpenseaProPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceSeaportCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceSeaportChange
  stats4hNetworkBaseTokenVolumeByFillsourceSeaportPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceX2Y2Current
  stats4hNetworkBaseTokenVolumeByFillsourceX2Y2Change
  stats4hNetworkBaseTokenVolumeByFillsourceX2Y2Previous
  stats4hNetworkBaseTokenVolumeByFillsourceLooksrareCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceLooksrareChange
  stats4hNetworkBaseTokenVolumeByFillsourceLooksrarePrevious
  stats4hNetworkBaseTokenVolumeByFillsourceLooksrareV2Current
  stats4hNetworkBaseTokenVolumeByFillsourceLooksrareV2Change
  stats4hNetworkBaseTokenVolumeByFillsourceLooksrareV2Previous
  stats4hNetworkBaseTokenVolumeByFillsourceBlurCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceBlurChange
  stats4hNetworkBaseTokenVolumeByFillsourceBlurPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceBlurV2Current
  stats4hNetworkBaseTokenVolumeByFillsourceBlurV2Change
  stats4hNetworkBaseTokenVolumeByFillsourceBlurV2Previous
  stats4hNetworkBaseTokenVolumeByFillsourceBlendCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceBlendChange
  stats4hNetworkBaseTokenVolumeByFillsourceBlendPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceGemCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceGemChange
  stats4hNetworkBaseTokenVolumeByFillsourceGemPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceSudoswapCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceSudoswapChange
  stats4hNetworkBaseTokenVolumeByFillsourceSudoswapPrevious
  stats4hNetworkBaseTokenVolumeByFillsourceSudoswapV2Current
  stats4hNetworkBaseTokenVolumeByFillsourceSudoswapV2Change
  stats4hNetworkBaseTokenVolumeByFillsourceSudoswapV2Previous
  stats4hNetworkBaseTokenVolumeByFillsourceCryptopunksCurrent
  stats4hNetworkBaseTokenVolumeByFillsourceCryptopunksChange
  stats4hNetworkBaseTokenVolumeByFillsourceCryptopunksPrevious
  stats4hNetworkBaseTokenAverageCurrent
  stats4hNetworkBaseTokenAveragePrevious
  stats4hNetworkBaseTokenAverageChange
  stats4hNetworkBaseTokenOpenCurrent
  stats4hNetworkBaseTokenOpenPrevious
  stats4hNetworkBaseTokenOpenChange
  stats4hNetworkBaseTokenCloseCurrent
  stats4hNetworkBaseTokenClosePrevious
  stats4hNetworkBaseTokenCloseChange
  stats4hNetworkBaseTokenLowestSaleCurrent
  stats4hNetworkBaseTokenLowestSalePrevious
  stats4hNetworkBaseTokenLowestSaleChange
  stats4hNetworkBaseTokenHighestSaleCurrent
  stats4hNetworkBaseTokenHighestSalePrevious
  stats4hNetworkBaseTokenHighestSaleChange
  stats4hNonCurrencyMintsCurrent
  stats4hNonCurrencyMintsPrevious
  stats4hNonCurrencyMintsChange
  stats4hNonCurrencySalesCurrent
  stats4hNonCurrencySalesPrevious
  stats4hNonCurrencySalesChange
  stats4hNonCurrencyTokensSoldCurrent
  stats4hNonCurrencyTokensSoldPrevious
  stats4hNonCurrencyTokensSoldChange
  stats4hNonCurrencyTransfersCurrent
  stats4hNonCurrencyTransfersPrevious
  stats4hNonCurrencyTransfersChange
  stats4hNonCurrencyUniqueBuyersCurrent
  stats4hNonCurrencyUniqueBuyersPrevious
  stats4hNonCurrencyUniqueBuyersChange
  stats4hNonCurrencyUniqueSellersCurrent
  stats4hNonCurrencyUniqueSellersPrevious
  stats4hNonCurrencyUniqueSellersChange
  stats4hNonCurrencyUniqueSalesWalletsCurrent
  stats4hNonCurrencyUniqueSalesWalletsPrevious
  stats4hNonCurrencyUniqueSalesWalletsChange
  stats4hNonCurrencyUniqueMintersCurrent
  stats4hNonCurrencyUniqueMintersPrevious
  stats4hNonCurrencyUniqueMintersChange
  stats12hUsdVolumeCurrent
  stats12hUsdVolumePrevious
  stats12hUsdVolumeChange
  stats12hUsdVolumeByFillsourceOpenseaCurrent
  stats12hUsdVolumeByFillsourceOpenseaChange
  stats12hUsdVolumeByFillsourceOpenseaPrevious
  stats12hUsdVolumeByFillsourceOpenseaProCurrent
  stats12hUsdVolumeByFillsourceOpenseaProChange
  stats12hUsdVolumeByFillsourceOpenseaProPrevious
  stats12hUsdVolumeByFillsourceSeaportCurrent
  stats12hUsdVolumeByFillsourceSeaportChange
  stats12hUsdVolumeByFillsourceSeaportPrevious
  stats12hUsdVolumeByFillsourceX2Y2Current
  stats12hUsdVolumeByFillsourceX2Y2Change
  stats12hUsdVolumeByFillsourceX2Y2Previous
  stats12hUsdVolumeByFillsourceLooksrareCurrent
  stats12hUsdVolumeByFillsourceLooksrareChange
  stats12hUsdVolumeByFillsourceLooksrarePrevious
  stats12hUsdVolumeByFillsourceLooksrareV2Current
  stats12hUsdVolumeByFillsourceLooksrareV2Change
  stats12hUsdVolumeByFillsourceLooksrareV2Previous
  stats12hUsdVolumeByFillsourceBlurCurrent
  stats12hUsdVolumeByFillsourceBlurChange
  stats12hUsdVolumeByFillsourceBlurPrevious
  stats12hUsdVolumeByFillsourceBlurV2Current
  stats12hUsdVolumeByFillsourceBlurV2Change
  stats12hUsdVolumeByFillsourceBlurV2Previous
  stats12hUsdVolumeByFillsourceBlendCurrent
  stats12hUsdVolumeByFillsourceBlendChange
  stats12hUsdVolumeByFillsourceBlendPrevious
  stats12hUsdVolumeByFillsourceGemCurrent
  stats12hUsdVolumeByFillsourceGemChange
  stats12hUsdVolumeByFillsourceGemPrevious
  stats12hUsdVolumeByFillsourceSudoswapCurrent
  stats12hUsdVolumeByFillsourceSudoswapChange
  stats12hUsdVolumeByFillsourceSudoswapPrevious
  stats12hUsdVolumeByFillsourceSudoswapV2Current
  stats12hUsdVolumeByFillsourceSudoswapV2Change
  stats12hUsdVolumeByFillsourceSudoswapV2Previous
  stats12hUsdVolumeByFillsourceCryptopunksCurrent
  stats12hUsdVolumeByFillsourceCryptopunksChange
  stats12hUsdVolumeByFillsourceCryptopunksPrevious
  stats12hUsdAverageCurrent
  stats12hUsdAveragePrevious
  stats12hUsdAverageChange
  stats12hUsdOpenCurrent
  stats12hUsdOpenPrevious
  stats12hUsdOpenChange
  stats12hUsdCloseCurrent
  stats12hUsdClosePrevious
  stats12hUsdCloseChange
  stats12hUsdLowestSaleCurrent
  stats12hUsdLowestSalePrevious
  stats12hUsdLowestSaleChange
  stats12hUsdHighestSaleCurrent
  stats12hUsdHighestSalePrevious
  stats12hUsdHighestSaleChange
  stats12hNetworkBaseTokenVolumeCurrent
  stats12hNetworkBaseTokenVolumePrevious
  stats12hNetworkBaseTokenVolumeChange
  stats12hNetworkBaseTokenVolumeByFillsourceOpenseaCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceOpenseaChange
  stats12hNetworkBaseTokenVolumeByFillsourceOpenseaPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceOpenseaProCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceOpenseaProChange
  stats12hNetworkBaseTokenVolumeByFillsourceOpenseaProPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceSeaportCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceSeaportChange
  stats12hNetworkBaseTokenVolumeByFillsourceSeaportPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceX2Y2Current
  stats12hNetworkBaseTokenVolumeByFillsourceX2Y2Change
  stats12hNetworkBaseTokenVolumeByFillsourceX2Y2Previous
  stats12hNetworkBaseTokenVolumeByFillsourceLooksrareCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceLooksrareChange
  stats12hNetworkBaseTokenVolumeByFillsourceLooksrarePrevious
  stats12hNetworkBaseTokenVolumeByFillsourceLooksrareV2Current
  stats12hNetworkBaseTokenVolumeByFillsourceLooksrareV2Change
  stats12hNetworkBaseTokenVolumeByFillsourceLooksrareV2Previous
  stats12hNetworkBaseTokenVolumeByFillsourceBlurCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceBlurChange
  stats12hNetworkBaseTokenVolumeByFillsourceBlurPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceBlurV2Current
  stats12hNetworkBaseTokenVolumeByFillsourceBlurV2Change
  stats12hNetworkBaseTokenVolumeByFillsourceBlurV2Previous
  stats12hNetworkBaseTokenVolumeByFillsourceBlendCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceBlendChange
  stats12hNetworkBaseTokenVolumeByFillsourceBlendPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceGemCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceGemChange
  stats12hNetworkBaseTokenVolumeByFillsourceGemPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceSudoswapCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceSudoswapChange
  stats12hNetworkBaseTokenVolumeByFillsourceSudoswapPrevious
  stats12hNetworkBaseTokenVolumeByFillsourceSudoswapV2Current
  stats12hNetworkBaseTokenVolumeByFillsourceSudoswapV2Change
  stats12hNetworkBaseTokenVolumeByFillsourceSudoswapV2Previous
  stats12hNetworkBaseTokenVolumeByFillsourceCryptopunksCurrent
  stats12hNetworkBaseTokenVolumeByFillsourceCryptopunksChange
  stats12hNetworkBaseTokenVolumeByFillsourceCryptopunksPrevious
  stats12hNetworkBaseTokenAverageCurrent
  stats12hNetworkBaseTokenAveragePrevious
  stats12hNetworkBaseTokenAverageChange
  stats12hNetworkBaseTokenOpenCurrent
  stats12hNetworkBaseTokenOpenPrevious
  stats12hNetworkBaseTokenOpenChange
  stats12hNetworkBaseTokenCloseCurrent
  stats12hNetworkBaseTokenClosePrevious
  stats12hNetworkBaseTokenCloseChange
  stats12hNetworkBaseTokenLowestSaleCurrent
  stats12hNetworkBaseTokenLowestSalePrevious
  stats12hNetworkBaseTokenLowestSaleChange
  stats12hNetworkBaseTokenHighestSaleCurrent
  stats12hNetworkBaseTokenHighestSalePrevious
  stats12hNetworkBaseTokenHighestSaleChange
  stats12hNonCurrencyMintsCurrent
  stats12hNonCurrencyMintsPrevious
  stats12hNonCurrencyMintsChange
  stats12hNonCurrencySalesCurrent
  stats12hNonCurrencySalesPrevious
  stats12hNonCurrencySalesChange
  stats12hNonCurrencyTokensSoldCurrent
  stats12hNonCurrencyTokensSoldPrevious
  stats12hNonCurrencyTokensSoldChange
  stats12hNonCurrencyTransfersCurrent
  stats12hNonCurrencyTransfersPrevious
  stats12hNonCurrencyTransfersChange
  stats12hNonCurrencyUniqueBuyersCurrent
  stats12hNonCurrencyUniqueBuyersPrevious
  stats12hNonCurrencyUniqueBuyersChange
  stats12hNonCurrencyUniqueSellersCurrent
  stats12hNonCurrencyUniqueSellersPrevious
  stats12hNonCurrencyUniqueSellersChange
  stats12hNonCurrencyUniqueSalesWalletsCurrent
  stats12hNonCurrencyUniqueSalesWalletsPrevious
  stats12hNonCurrencyUniqueSalesWalletsChange
  stats12hNonCurrencyUniqueMintersCurrent
  stats12hNonCurrencyUniqueMintersPrevious
  stats12hNonCurrencyUniqueMintersChange
  stats24hUsdVolumeCurrent
  stats24hUsdVolumePrevious
  stats24hUsdVolumeChange
  stats24hUsdVolumeByFillsourceOpenseaCurrent
  stats24hUsdVolumeByFillsourceOpenseaChange
  stats24hUsdVolumeByFillsourceOpenseaPrevious
  stats24hUsdVolumeByFillsourceOpenseaProCurrent
  stats24hUsdVolumeByFillsourceOpenseaProChange
  stats24hUsdVolumeByFillsourceOpenseaProPrevious
  stats24hUsdVolumeByFillsourceSeaportCurrent
  stats24hUsdVolumeByFillsourceSeaportChange
  stats24hUsdVolumeByFillsourceSeaportPrevious
  stats24hUsdVolumeByFillsourceX2Y2Current
  stats24hUsdVolumeByFillsourceX2Y2Change
  stats24hUsdVolumeByFillsourceX2Y2Previous
  stats24hUsdVolumeByFillsourceLooksrareCurrent
  stats24hUsdVolumeByFillsourceLooksrareChange
  stats24hUsdVolumeByFillsourceLooksrarePrevious
  stats24hUsdVolumeByFillsourceLooksrareV2Current
  stats24hUsdVolumeByFillsourceLooksrareV2Change
  stats24hUsdVolumeByFillsourceLooksrareV2Previous
  stats24hUsdVolumeByFillsourceBlurCurrent
  stats24hUsdVolumeByFillsourceBlurChange
  stats24hUsdVolumeByFillsourceBlurPrevious
  stats24hUsdVolumeByFillsourceBlurV2Current
  stats24hUsdVolumeByFillsourceBlurV2Change
  stats24hUsdVolumeByFillsourceBlurV2Previous
  stats24hUsdVolumeByFillsourceBlendCurrent
  stats24hUsdVolumeByFillsourceBlendChange
  stats24hUsdVolumeByFillsourceBlendPrevious
  stats24hUsdVolumeByFillsourceGemCurrent
  stats24hUsdVolumeByFillsourceGemChange
  stats24hUsdVolumeByFillsourceGemPrevious
  stats24hUsdVolumeByFillsourceSudoswapCurrent
  stats24hUsdVolumeByFillsourceSudoswapChange
  stats24hUsdVolumeByFillsourceSudoswapPrevious
  stats24hUsdVolumeByFillsourceSudoswapV2Current
  stats24hUsdVolumeByFillsourceSudoswapV2Change
  stats24hUsdVolumeByFillsourceSudoswapV2Previous
  stats24hUsdVolumeByFillsourceCryptopunksCurrent
  stats24hUsdVolumeByFillsourceCryptopunksChange
  stats24hUsdVolumeByFillsourceCryptopunksPrevious
  stats24hUsdAverageCurrent
  stats24hUsdAveragePrevious
  stats24hUsdAverageChange
  stats24hUsdOpenCurrent
  stats24hUsdOpenPrevious
  stats24hUsdOpenChange
  stats24hUsdCloseCurrent
  stats24hUsdClosePrevious
  stats24hUsdCloseChange
  stats24hUsdLowestSaleCurrent
  stats24hUsdLowestSalePrevious
  stats24hUsdLowestSaleChange
  stats24hUsdHighestSaleCurrent
  stats24hUsdHighestSalePrevious
  stats24hUsdHighestSaleChange
  stats24hNetworkBaseTokenVolumeCurrent
  stats24hNetworkBaseTokenVolumePrevious
  stats24hNetworkBaseTokenVolumeChange
  stats24hNetworkBaseTokenVolumeByFillsourceOpenseaCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceOpenseaChange
  stats24hNetworkBaseTokenVolumeByFillsourceOpenseaPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceOpenseaProCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceOpenseaProChange
  stats24hNetworkBaseTokenVolumeByFillsourceOpenseaProPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceSeaportCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceSeaportChange
  stats24hNetworkBaseTokenVolumeByFillsourceSeaportPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceX2Y2Current
  stats24hNetworkBaseTokenVolumeByFillsourceX2Y2Change
  stats24hNetworkBaseTokenVolumeByFillsourceX2Y2Previous
  stats24hNetworkBaseTokenVolumeByFillsourceLooksrareCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceLooksrareChange
  stats24hNetworkBaseTokenVolumeByFillsourceLooksrarePrevious
  stats24hNetworkBaseTokenVolumeByFillsourceLooksrareV2Current
  stats24hNetworkBaseTokenVolumeByFillsourceLooksrareV2Change
  stats24hNetworkBaseTokenVolumeByFillsourceLooksrareV2Previous
  stats24hNetworkBaseTokenVolumeByFillsourceBlurCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceBlurChange
  stats24hNetworkBaseTokenVolumeByFillsourceBlurPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceBlurV2Current
  stats24hNetworkBaseTokenVolumeByFillsourceBlurV2Change
  stats24hNetworkBaseTokenVolumeByFillsourceBlurV2Previous
  stats24hNetworkBaseTokenVolumeByFillsourceBlendCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceBlendChange
  stats24hNetworkBaseTokenVolumeByFillsourceBlendPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceGemCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceGemChange
  stats24hNetworkBaseTokenVolumeByFillsourceGemPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceSudoswapCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceSudoswapChange
  stats24hNetworkBaseTokenVolumeByFillsourceSudoswapPrevious
  stats24hNetworkBaseTokenVolumeByFillsourceSudoswapV2Current
  stats24hNetworkBaseTokenVolumeByFillsourceSudoswapV2Change
  stats24hNetworkBaseTokenVolumeByFillsourceSudoswapV2Previous
  stats24hNetworkBaseTokenVolumeByFillsourceCryptopunksCurrent
  stats24hNetworkBaseTokenVolumeByFillsourceCryptopunksChange
  stats24hNetworkBaseTokenVolumeByFillsourceCryptopunksPrevious
  stats24hNetworkBaseTokenAverageCurrent
  stats24hNetworkBaseTokenAveragePrevious
  stats24hNetworkBaseTokenAverageChange
  stats24hNetworkBaseTokenOpenCurrent
  stats24hNetworkBaseTokenOpenPrevious
  stats24hNetworkBaseTokenOpenChange
  stats24hNetworkBaseTokenCloseCurrent
  stats24hNetworkBaseTokenClosePrevious
  stats24hNetworkBaseTokenCloseChange
  stats24hNetworkBaseTokenLowestSaleCurrent
  stats24hNetworkBaseTokenLowestSalePrevious
  stats24hNetworkBaseTokenLowestSaleChange
  stats24hNetworkBaseTokenHighestSaleCurrent
  stats24hNetworkBaseTokenHighestSalePrevious
  stats24hNetworkBaseTokenHighestSaleChange
  stats24hNonCurrencyMintsCurrent
  stats24hNonCurrencyMintsPrevious
  stats24hNonCurrencyMintsChange
  stats24hNonCurrencySalesCurrent
  stats24hNonCurrencySalesPrevious
  stats24hNonCurrencySalesChange
  stats24hNonCurrencyTokensSoldCurrent
  stats24hNonCurrencyTokensSoldPrevious
  stats24hNonCurrencyTokensSoldChange
  stats24hNonCurrencyTransfersCurrent
  stats24hNonCurrencyTransfersPrevious
  stats24hNonCurrencyTransfersChange
  stats24hNonCurrencyUniqueBuyersCurrent
  stats24hNonCurrencyUniqueBuyersPrevious
  stats24hNonCurrencyUniqueBuyersChange
  stats24hNonCurrencyUniqueSellersCurrent
  stats24hNonCurrencyUniqueSellersPrevious
  stats24hNonCurrencyUniqueSellersChange
  stats24hNonCurrencyUniqueSalesWalletsCurrent
  stats24hNonCurrencyUniqueSalesWalletsPrevious
  stats24hNonCurrencyUniqueSalesWalletsChange
  stats24hNonCurrencyUniqueMintersCurrent
  stats24hNonCurrencyUniqueMintersPrevious
  stats24hNonCurrencyUniqueMintersChange
}

"""The duration used to rank NFTs."""
enum NftCollectionsLeaderboardDuration {
  day30
  week1
  day1
  hour12
  hour4
  hour1
  min15
}

"""The attribute used to rank NFT collections."""
enum NftCollectionsLeaderboardMetric {
  volumeUsd
  volumeUsdGain
  sales
  salesGain
  tokensSold
  tokensSoldGain
  volumeBase
  volumeBaseGain
  mints
  mintsGain
  buyers
  buyersGain
  sellers
  sellersGain
}

"""Stats for an NFT collection for a time frame."""
type NftCollectionWindowStats {
  """The time frame used to calculate the stats."""
  window: String!
  """The price stats for the NFT collection in USD."""
  usdPriceStats: NftCollectionPriceStats!
  """The price stats for the NFT collection in the network's base token."""
  networkBaseTokenPriceStats: NftCollectionPriceStats!
  """The trade count over the `window`."""
  tradeCount: String!
  """The change in trade count between the previous and current `window`."""
  tradeCountChange: Float!
}

"""Metadata for an NFT collection."""
type NftContract {
  """The ID of the NFT collection (`address`:`networkId`)."""
  id: String!
  """The contract address of the NFT collection."""
  address: String!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The token standard. Can be a variation of `ERC-721` or `ERC-1155`."""
  ercType: String!
  """The name of the NFT collection."""
  name: String
  """The description of the NFT collection."""
  description: String
  """The symbol for the NFT collection."""
  symbol: String
  """The total supply of the NFT collection."""
  totalSupply: String
  """The URL for an image of the NFT collection."""
  image: String
}

"""Token standards."""
enum NftContractErcType {
  ERC721
  ERC721Metadata
  ERC721Enumerable
  ERC1155
  ERC1155Metadata
  Unsupported
}

"""Input type of `getNftContracts`."""
input NftContractInput {
  """The NFT contract address."""
  address: String!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
}

"""An NFT collection transaction."""
type NftEvent {
  """The ID of the NFT event (`contractAddress`:`tokenId`:`networkId`)."""
  id: String!
  """The contract address of the NFT collection."""
  contractAddress: String!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The token ID of the NFT asset involved in the transaction."""
  tokenId: String!
  """The wallet address of the buyer."""
  maker: String!
  """The wallet address of the seller."""
  taker: String!
  tokenPrice: String! @deprecated(reason: "Some events may lack this value - use the nullable totalTradePrice. tokenPrice will return null values as an empty string.")
  totalPrice: String! @deprecated(reason: "Some events may lack this value - use the nullable totalTradePrice. totalPrice will return null values as an empty string.")
  """The total trade price for the transaction in the purchasing token. (The transaction can include more than 1 token)."""
  totalTradePrice: String
  individualTokenPrice: String @deprecated(reason: "Some events may lack this value - use the nullable individualTradePrice. individualTokenPrice will return null values as an empty string.")
  individualPrice: String @deprecated(reason: "Some events may lack this value - use the nullable individualTradePrice. individualPrice will return null values as an empty string.")
  """The price of each individual NFT in the purchasing token."""
  individualTradePrice: String
  baseTokenAddress: String! @deprecated(reason: "No longer supported")
  """The contract address of the purchasing token."""
  paymentTokenAddress: String!
  baseTokenPrice: String @deprecated(reason: "No longer supported")
  """The total trade price for the transaction in USD. (The transaction can include more than 1 token)."""
  totalPriceUsd: String
  individualBaseTokenPrice: String @deprecated(reason: "No longer supported")
  """The price of each individual NFT in USD."""
  individualPriceUsd: String
  networkBaseTokenPrice: String @deprecated(reason: "No longer supported")
  """The total trade price for the transaction in the network's base token. (The transaction can include more than 1 token)."""
  totalPriceNetworkBaseToken: String
  individualNetworkBaseTokenPrice: String @deprecated(reason: "No longer supported")
  """The price of each individual NFT in the network's base token."""
  individualPriceNetworkBaseToken: String
  """The event type of the transaction."""
  eventType: String!
  """The NFT marketplace address of the transaction."""
  exchangeAddress: String!
  """The sortKey for the event (`blockNumber`#`transactionIndex`#`logIndex` (+ #`marketplaceEventLogIndex` if applicable), zero padded). For example, `0000000016414564#00000224#00000413#00000414`."""
  sortKey: String!
  """The block number for the transaction."""
  blockNumber: Int!
  """The index of the transaction within the block."""
  transactionIndex: Int!
  """The index of the log in the block."""
  logIndex: Int!
  """The unique hash for the transaction."""
  transactionHash: String!
  """The unix timestamp for the transaction."""
  timestamp: Int!
  """The number of assets involved in the transaction."""
  numberOfTokens: String
  """The contract address of the marketplace aggregator that routed the transaction."""
  aggregatorAddress: String
  """The contract address of the NFT pool, if applicable."""
  poolAddress: String
  """The name of the marketplace that processed the transaction."""
  fillSource: String
  """The reason for the price error, if applicable. Can be `NO_TOKEN_DATA`, `NO_TOKEN_PRICE`, or `LOW_LIQUIDITY_PAIR`."""
  priceError: String
  """The tokens/NFTs that were offered to make this transaction occur."""
  tradeOffer: [NftEventTradeItem!]
  """The tokens/NFTs that were received in this transaction."""
  tradeReceived: [NftEventTradeItem!]
  """The direction of the order. One of 'BUY', 'SELL', or 'OFFER_ACCEPTED'."""
  orderDirection: NftEventOrderDirection
}

"""NFT marketplaces for a webhook to listen on."""
type NftEventFillSourceCondition {
  """The list of NFT marketplaces."""
  oneOf: [WebhookNftEventFillSource!]!
}

"""Input for NFT event fill source condition."""
input NftEventFillSourceConditionInput {
  """The list of NFT marketplace to equal."""
  oneOf: [WebhookNftEventFillSource!]!
}

"""Details for an NFT offered or received as part of an nft trade."""
type NftEventNftTradeItem {
  """The contract address for the NFT."""
  address: String!
  """The number of tokens transferred. (Always 1 for ERC721 NFTs)"""
  amount: String!
  """The recipient of the NFT."""
  recipient: String
  """The type of item involved in the trade. (Always NFT)"""
  type: NftEventTradeItemType!
  """The token ID of the exchanged NFT"""
  tokenId: String!
}

"""The direction of the nft sale event."""
enum NftEventOrderDirection {
  BUY
  SELL
  OFFER_ACCEPTED
}

"""Response returned by `getNftEvents`."""
type NftEventsConnection {
  """A list of transactions for an NFT collection."""
  items: [NftEvent]
  """A cursor for use in pagination."""
  cursor: String
}

"""Details for a token(s) offered or received as part of an nft trade."""
type NftEventTokenTradeItem {
  """The contract address for the token."""
  address: String!
  """The number of tokens transferred."""
  amount: String!
  """The recipient of the tokens."""
  recipient: String
  """The type of item involved in the trade. (Always TOKEN)"""
  type: NftEventTradeItemType!
  """Whether this should be summed to calculate the price of the NFT received in the base event. Tokens that are payment fees or involved with other sales in the transaction are often represented in sales and would have a value of `false`."""
  isPrice: Boolean!
  """The total trade price for the transaction in the purchasing token. (The transaction can include more than 1 token)."""
  totalTradePrice: String
  """The price of each individual NFT in the purchasing token."""
  individualTradePrice: String
  """The total trade price for the transaction in USD. (The transaction can include more than 1 token)."""
  totalPriceUsd: String
  """The price of each individual NFT in USD."""
  individualPriceUsd: String
  """The total trade price for the transaction in the network's base token. (The transaction can include more than 1 token)."""
  totalPriceNetworkBaseToken: String
  """The price of each individual NFT in the network's base token."""
  individualPriceNetworkBaseToken: String
  """The reason for the price error, if applicable. Can be `NO_TOKEN_DATA`, `NO_TOKEN_PRICE`, or `LOW_LIQUIDITY_PAIR`."""
  priceError: String
}

"""An item that was either offered or received as part of an NFT trade."""
union NftEventTradeItem = NftEventNftTradeItem | NftEventTokenTradeItem

"""Fields that are common in all items offered or received as part of an nft trade."""
interface NftEventTradeItemBase {
  """The contract address for the item."""
  address: String!
  """The number of items transferred."""
  amount: String
  """The recipient of the items."""
  recipient: String
  """The type of item involved in the trade. (NFT or TOKEN)"""
  type: NftEventTradeItemType!
}

"""The type of item involved in the trade."""
enum NftEventTradeItemType {
  NFT
  TOKEN
}

"""An NFT event type for a webhook to listen for."""
type NftEventTypeCondition {
  """The NFT event type."""
  eq: WebhookNftEventType!
}

"""Input for NFT event type."""
input NftEventTypeConditionInput {
  """The NFT event type to equal."""
  eq: WebhookNftEventType!
}

"""Webhook conditions for an NFT event."""
type NftEventWebhookCondition {
  """The list of network IDs the webhook is listening on."""
  networkId: OneOfNumberCondition
  """The maker wallet address the webhook is listening for."""
  maker: StringEqualsCondition
  """The NFT collection contract address the webhook is listening for."""
  contractAddress: StringEqualsCondition
  """The exchange contract address the webhook is listening for."""
  exchangeAddress: StringEqualsCondition
  """The token ID the webhook is listening for."""
  tokenId: StringEqualsCondition
  """The token contract address the webhook is listening for."""
  tokenAddress: StringEqualsCondition
  """The base token price the webhook is listening for."""
  individualBaseTokenPrice: ComparisonOperator
  """The NFT event type the webhook is listening for."""
  eventType: NftEventTypeCondition
  """The NFT marketplaces the webhook is listening on."""
  fillSource: NftEventFillSourceCondition
  """Option to ignore all nft transfer events"""
  ignoreTransfers: Boolean
}

"""Input conditions for an NFT event webhook."""
input NftEventWebhookConditionInput {
  """A list of network IDs to listen on."""
  networkId: OneOfNumberConditionInput
  """The maker wallet address to listen for."""
  maker: StringEqualsConditionInput
  """The NFT collection contract address to listen for."""
  contractAddress: StringEqualsConditionInput
  """The exchange contract address to listen for."""
  exchangeAddress: StringEqualsConditionInput
  """The token ID to listen for."""
  tokenId: StringEqualsConditionInput
  """The NFT event type to listen for."""
  eventType: NftEventTypeConditionInput
  """The NFT marketplaces to listen for."""
  fillSource: NftEventFillSourceConditionInput
  """Option to ignore all nft transfer events"""
  ignoreTransfers: Boolean
}

"""NFT marketplaces."""
enum NftExchange {
  OPENSEA
  SEAPORT
  X2Y2
  SUDOSWAPV2
  LOOKSRARE
  LOOKSRAREV2
  TOFUNFT
  TREASURE
  ZEROEXV3
  ZEROEXV4
  QUIXOTIC
  JOEPEGS
  STRATOS
  PLAYDAPP
  BLUR
  CRYPTOPUNKS
  BITKEEP
  MINTED
  ALTO
  PROVENANT
  BLURV2
  BLEND
  SUDOSWAPAMMV2
}

"""Number metrics for NFT fillsource stats."""
type NftFillsourceStatsNumberMetrics {
  """Marketplace that filled the NFT order volume. (ex. OPENSEA, BLUR, etc.)"""
  fillsource: String
  """The total value for the current window."""
  current: Float
  """The total value for the previous window."""
  previous: Float
  """The percent change between the `current` and `previous`."""
  change: Float
}

"""String metrics for NFT stats."""
type NftFillsourceStatsStringMetrics {
  """Marketplace that filled the NFT order volume. (ex. OPENSEA, BLUR, etc.)"""
  fillsource: String
  """The total value for the current window."""
  current: String
  """The total value for the previous window."""
  previous: String
  """The percent change between the `current` and `previous`."""
  change: Float
}

input NftHoldersInput {
  """The address of the collection contract."""
  collectionAddress: String!
  """The network ID the collection is deployed on."""
  networkId: Int!
  """A cursor for use in pagination."""
  cursor: String
}

type NftHoldersResponse {
  """The list wallets for a collection."""
  items: [NftBalance!]!
  """the unique count of holders for the collection."""
  count: Int!
  """A cursor for use in pagination."""
  cursor: String
  """Status of holder. Disabled if on unsupported network or there is insufficient holder data."""
  status: HoldersStatus!
}

"""Event data for updating the asset recipient of a pool."""
type NftPoolAssetRecipientUpdateEventData {
  """The type of NFT pool event, `ASSET_RECIPIENT_CHANGE`."""
  type: NftPoolEventType!
  """The updated wallet address that will receive the tokens or NFT sent to the pair during swaps."""
  newAssetRecipient: String!
}

"""Response returned by `filterNftPoolCollections`."""
type NftPoolCollectionFilterConnection {
  """The list of NFT collections matching the filter parameters."""
  results: [NftPoolCollectionFilterResult]
  """The number of NFT collections returned."""
  count: Int
  """Where in the list the server started when returning items."""
  page: Int
}

"""An NFT pool collection."""
type NftPoolCollectionFilterResult {
  """The ID of the NFT collection (`collectionAddress`:`exchangeAddress`:`networkId`)."""
  id: String!
  """The unix timestamp indicating the last time the data was updated. Updates every 2 hours."""
  timestamp: Int
  """The name of the NFT collection."""
  name: String
  """The symbol for the NFT collection."""
  symbol: String
  """The contract address of the NFT AMM marketplace."""
  exchangeAddress: String
  """The contract address of the NFT collection."""
  collectionAddress: String
  """The network ID the NFT collection is deployed on."""
  networkId: Int
  """The token standard. Can be a variation of `ERC-721` or `ERC-1155`."""
  ercType: String
  """The image URL for the collection or one of the assets within the collection."""
  imageUrl: String
  """The number of NFTs in all of the collection's pools."""
  nftBalance: Int @deprecated(reason: "nftBalance is changing from Int to String - use nftBalanceV2 instead.")
  """The number of NFTs in all of the collection's pools."""
  nftBalanceV2: String
  """The total liquidity of the collection in the network's base token."""
  balanceNBT: String
  """The lowest price at which any of the collection's pools are willing to sell an NFT in the network's base token."""
  floorNBT: String
  """The highest price at which any of the collection's pools are willing to buy an NFT in the network's base token."""
  offerNBT: String
  """The total liquidity of the collection in USD."""
  balanceUSD: String
  """The lowest price at which any of the collection's pools are willing to sell an NFT in USD."""
  floorUSD: String
  """The highest price at which any of the collection's pools are willing to buy an NFT in USD."""
  offerUSD: String
  """The total supply of the collection."""
  totalSupply: Int @deprecated(reason: "totalSupply is changing from Int to String - use totalSupplyV2 instead.")
  totalSupplyV2: String
  """The number of NFTs sold in any of the collection's pools over the collection's lifetime."""
  nftsSoldAll: Int @deprecated(reason: "nftsSoldAll is changing from Int to String - use nftsSoldAllV2 instead.")
  """The number of NFTs sold in any of the collection's pools over the collection's lifetime."""
  nftsSoldAllV2: String
  """The number of NFTs bought in any of the collection's pools over the collection's lifetime."""
  nftsBoughtAll: Int @deprecated(reason: "nftsBoughtAll is changing from Int to String - use nftsBoughtAllV2 instead.")
  """The number of NFTs bought in any of the collection's pools over the collection's lifetime."""
  nftsBoughtAllV2: String
  """The number of NFTs bought or sold in any of the collection's pools over the collection's lifetime."""
  nftVolumeAll: Int @deprecated(reason: "nftVolumeAll is changing from Int to String - use nftVolumeAllV2 instead.")
  """The number of NFTs bought or sold in any of the collection's pools over the collection's lifetime."""
  nftVolumeAllV2: String
  """The total volume of the collection in the network's base token over the collection's lifetime."""
  volumeNBTAll: String
  """The total buy volume of the collection in the network's base token over the collection's lifetime."""
  revenueNBTAll: String
  """The total sell volume of the collection in the network's base token over the collection's lifetime."""
  expenseNBTAll: String
  """The highest sale price within the collection in the network's base token in the collection's lifetime."""
  highPriceNBTAll: String
  """The lowest sale price within the collection in the network's base token in the collection's lifetime."""
  lowPriceNBTAll: String
  """The sum of pool fees generated by the collection in the network's base token over the collection's lifetime."""
  poolFeesNBTAll: String
  """The sum of protocol fees generated by the collection in the network's base token over the collection's lifetime."""
  protocolFeesNBTAll: String
  """The total volume of the collection in USD over the collection's lifetime."""
  volumeUSDAll: String
  """The total buy volume of the collection in USD over the collection's lifetime."""
  revenueUSDAll: String
  """The total sell volume of the collection in USD over the collection's lifetime."""
  expenseUSDAll: String
  """The highest sale price within the collection in USD in the collection's lifetime."""
  highPriceUSDAll: String
  """The lowest sale price within the collection in USD in the collection's lifetime."""
  lowPriceUSDAll: String
  """The sum of pool fees generated by the collection in USD over the collection's lifetime."""
  poolFeesUSDAll: String
  """The sum of protocol fees generated by the collection in USD over the collection's lifetime."""
  protocolFeesUSDAll: String
  """The number of NFTs sold in any of the collection's pools over the past 24 hours."""
  nftsSold24: Int @deprecated(reason: "nftsSold24 is changing from Int to String - use nftsSold24V2 instead.")
  """The number of NFTs sold in any of the collection's pools over the past 24 hours."""
  nftsSold24V2: String
  """The number of NFTs bought in any of the collection's pools over the past 24 hours."""
  nftsBought24: Int @deprecated(reason: "nftsBought24 is changing from Int to String - use nftsBought24V2 instead.")
  """The number of NFTs bought in any of the collection's pools over the past 24 hours."""
  nftsBought24V2: String
  """The number of NFTs bought and sold in any of the collection's pools over the past 24 hours."""
  nftVolume24: Int @deprecated(reason: "nftVolume24 is changing from Int to String - use nftVolume24V2 instead.")
  """The number of NFTs bought and sold in any of the collection's pools over the past 24 hours."""
  nftVolume24V2: String
  """The total volume of the collection in the network's base token over the past 24 hours."""
  volumeNBT24: String
  """The total buy volume of the collection in the network's base token over the past 24 hours."""
  revenueNBT24: String
  """The total sell volume of the collection in the network's base token over the past 24 hours."""
  expenseNBT24: String
  """The highest sale price within the collection in the network's base token in the past 24 hours."""
  highPriceNBT24: String
  """The lowest sale price within the collection in the network's base token in the past 24 hours."""
  lowPriceNBT24: String
  """The sum of pool fees generated by the collection in the network's base token over the past 24 hours."""
  poolFeesNBT24: String
  """The sum of protocol fees generated by the collection in the network's base token over the past 24 hours."""
  protocolFeesNBT24: String
  """The total volume of the collection in USD over the past 24 hours."""
  volumeUSD24: String
  """The total buy volume of the collection in USD over the past 24 hours."""
  revenueUSD24: String
  """The total sell volume of the collection in USD over the past 24 hours."""
  expenseUSD24: String
  """The highest sale price within the collection in USD in the past 24 hours."""
  highPriceUSD24: String
  """The lowest sale price within the collection in USD in the past 24 hours."""
  lowPriceUSD24: String
  """The sum of pool fees generated by the collection in USD over the past 24 hours."""
  poolFeesUSD24: String
  """The sum of protocol fees generated by the collection in USD over the past 24 hours."""
  protocolFeesUSD24: String
}

"""Input type of `NftPoolCollectionFilters`."""
input NftPoolCollectionFilters {
  """The number of NFTs in all of the collection's pools."""
  nftBalance: NumberFilter
  """The total liquidity of the collection in the network's base token."""
  balanceNBT: NumberFilter
  """The lowest price at which any of the collection's pools are willing to sell an NFT in the network's base token."""
  floorNBT: NumberFilter
  """The highest price at which any of the collection's pools are willing to buy an NFT in the network's base token."""
  offerNBT: NumberFilter
  """The total liquidity of the collection in USD."""
  balanceUSD: NumberFilter
  """The lowest price at which any of the collection's pools are willing to sell an NFT in USD."""
  floorUSD: NumberFilter
  """The highest price at which any of the collection's pools are willing to buy an NFT in USD."""
  offerUSD: NumberFilter
  """The total supply of the collection."""
  totalSupply: NumberFilter
  """The number of NFTs sold in any of the collection's pools over the collection's lifetime."""
  nftsSoldAll: NumberFilter
  """The number of NFTs bought in any of the collection's pools over the collection's lifetime."""
  nftsBoughtAll: NumberFilter
  """The number of NFTs bought or sold in any of the collection's pools over the collection's lifetime."""
  nftVolumeAll: NumberFilter
  """The total volume of the collection in the network's base token over the collection's lifetime."""
  volumeNBTAll: NumberFilter
  """The total buy volume of the collection in the network's base token over the collection's lifetime."""
  revenueNBTAll: NumberFilter
  """The total sell volume of the collection in the network's base token over the collection's lifetime."""
  expenseNBTAll: NumberFilter
  """The highest sale price within the collection in the network's base token in the collection's lifetime."""
  highPriceNBTAll: NumberFilter
  """The lowest sale price within the collection in the network's base token in the collection's lifetime."""
  lowPriceNBTAll: NumberFilter
  """The sum of pool fees generated by the collection in the network's base token over the collection's lifetime."""
  poolFeesNBTAll: NumberFilter
  """The sum of protocol fees generated by the collection in the network's base token over the collection's lifetime."""
  protocolFeesNBTAll: NumberFilter
  """The total volume of the collection in USD over the collection's lifetime."""
  volumeUSDAll: NumberFilter
  """The total buy volume of the collection in USD over the collection's lifetime."""
  revenueUSDAll: NumberFilter
  """The total sell volume of the collection in USD over the collection's lifetime."""
  expenseUSDAll: NumberFilter
  """The highest sale price within the collection in USD in the collection's lifetime."""
  highPriceUSDAll: NumberFilter
  """The lowest sale price within the collection in USD in the collection's lifetime."""
  lowPriceUSDAll: NumberFilter
  """The sum of pool fees generated by the collection in USD over the collection's lifetime."""
  poolFeesUSDAll: NumberFilter
  """The sum of protocol fees generated by the collection in USD over the collection's lifetime."""
  protocolFeesUSDAll: NumberFilter
  """The number of NFTs sold in any of the collection's pools over the past 24 hours."""
  nftsSold24: NumberFilter
  """The number of NFTs bought in any of the collection's pools over the past 24 hours."""
  nftsBought24: NumberFilter
  """The number of NFTs bought in any of the collection's pools over the past 24 hours."""
  nftVolume24: NumberFilter
  """The total volume of the collection in the network's base token over the past 24 hours."""
  volumeNBT24: NumberFilter
  """The total buy volume of the collection in the network's base token over the past 24 hours."""
  revenueNBT24: NumberFilter
  """The total sell volume of the collection in the network's base token over the past 24 hours."""
  expenseNBT24: NumberFilter
  """The highest sale price within the collection in the network's base token in the past 24 hours."""
  highPriceNBT24: NumberFilter
  """The lowest sale price within the collection in the network's base token in the past 24 hours."""
  lowPriceNBT24: NumberFilter
  """The sum of pool fees generated by the collection in the network's base token over the past 24 hours."""
  poolFeesNBT24: NumberFilter
  """The sum of protocol fees generated by the collection in the network's base token over the past 24 hours."""
  protocolFeesNBT24: NumberFilter
  """The total volume of the collection in USD over the past 24 hours."""
  volumeUSD24: NumberFilter
  """The total buy volume of the collection in USD over the past 24 hours."""
  revenueUSD24: NumberFilter
  """The total sell volume of the collection in USD over the past 24 hours."""
  expenseUSD24: NumberFilter
  """The highest sale price within the collection in USD in the past 24 hours."""
  highPriceUSD24: NumberFilter
  """The lowest sale price within the collection in USD in the past 24 hours."""
  lowPriceUSD24: NumberFilter
  """The sum of pool fees generated by the collection in USD over the past 24 hours."""
  poolFeesUSD24: NumberFilter
  """The sum of protocol fees generated by the collection in USD over the past 24 hours."""
  protocolFeesUSD24: NumberFilter
  """The list of network IDs to filter by."""
  network: [Int]
  """The list of NFT AMM marketplace addresses to filter by."""
  exchange: [String]
  """The list of token standards to filter by. Can be a variation of `ERC-721` or `ERC-1155`."""
  ercType: [String]
}

"""Input type of `NftPoolCollectionRanking`."""
input NftPoolCollectionRanking {
  """The attribute to rank NFT collections by."""
  attribute: NftPoolCollectionRankingAttribute
  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""The attribute used to rank NFT collections."""
enum NftPoolCollectionRankingAttribute {
  balanceNBT
  balanceUSD
  expenseNBT24
  expenseNBTAll
  expenseUSD24
  expenseUSDAll
  floorNBT
  floorUSD
  highPriceNBT24
  highPriceNBTAll
  highPriceUSD24
  highPriceUSDAll
  lowPriceNBT24
  lowPriceNBTAll
  lowPriceUSD24
  lowPriceUSDAll
  nftBalance
  nftsBought24
  nftsBoughtAll
  nftsSold24
  nftsSoldAll
  nftVolume24
  nftVolumeAll
  offerNBT
  offerUSD
  poolFeesNBT24
  poolFeesNBTAll
  poolFeesUSD24
  poolFeesUSDAll
  protocolFeesNBT24
  protocolFeesNBTAll
  protocolFeesUSD24
  protocolFeesUSDAll
  revenueNBT24
  revenueNBTAll
  revenueUSD24
  revenueUSDAll
  totalSupply
  volumeNBT24
  volumeNBTAll
  volumeUSD24
  volumeUSDAll
}

"""An NFT collection in an NFT pool."""
type NftPoolCollectionResponse {
  """The ID of the NFT collection (`collectionAddress`:`networkId`)."""
  collectionId: String!
  """The contract address of the NFT collection."""
  collectionAddress: String!
  """The symbol of the NFT collection."""
  collectionSymbol: String!
  """The ID of the exchange (`exchangeAddress`:`networkId`)."""
  exchangeId: String!
  """The contract address of the NFT AMM marketplace."""
  exchangeAddress: String!
  """The name of the NFT collection."""
  name: String
  """An image associated with the NFT collection."""
  image: String
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The lowest price at which any of the NFT collection's pools are willing to sell an NFT in the network's base token."""
  floorNBT: String
  """The highest price at which any of the NFT collection's pools are willing to buy an NFT in the network's base token."""
  offerNBT: String
  """The total liquidity of the collection in the network's base token."""
  balanceNBT: String!
  """The current number of NFTs in all the NFT collection's pools."""
  nftBalance: Int! @deprecated(reason: "nftBalance is changing from Int to String - use nftBalanceV2 instead.")
  """The current number of NFTs in all the NFT collection's pools."""
  nftBalanceV2: String!
  """The total volume of the collection in the network's base token over the collection's lifetime."""
  volumeAllTimeNBT: String
  """The total volume of the collection in USD over the collection's lifetime."""
  volumeAllTimeUSD: String
  """The total number of NFTs bought and sold over the collection's lifetime."""
  nftVolumeAllTime: Int @deprecated(reason: "nftVolumeAllTime is changing from Int to String - use nftVolumeAllTimeV2 instead.")
  """The total number of NFTs bought and sold over the collection's lifetime."""
  nftVolumeAllTimeV2: String
  """The media for one of the assets within the NFT collection."""
  media: NftAssetMedia @deprecated(reason: "Use `image` from `NftContract` instead.")
  """The sum of protocol fees generated by the collection in the network's base token over the collection's lifetime."""
  protocolFeesNBTAll: String
  """The sum of protocol fees generated by the collection in USD over the collection's lifetime."""
  protocolFeesUSDAll: String
  """The sum of pool fees generated by the collection in the network's base token over the collection's lifetime."""
  poolFeesNBTAll: String
  """The sum of pool fees generated by the collection in USD over the collection's lifetime."""
  poolFeesUSDAll: String
  """As estimated sum in the network's base token of the collection's royalties paid to creators by pool swaps over the collection's lifetime."""
  royaltiesNBTAllEstimate: String
  """An estimated sum in USD of the collection's royalties paid to creators by pool swaps over the collection's lifetime."""
  royaltiesUSDAllEstimate: String
}

"""The NFT pool contract version."""
enum NftPoolContractVersion {
  SUDOSWAP_V1
  SUDOSWAP_V2
}

"""Event data for updating the delta of a pool."""
type NftPoolDeltaUpdateEventData {
  """The type of NFT pool event, `DELTA_UPDATE`."""
  type: NftPoolEventType!
  """The updated delta used in the bonding curve."""
  newDelta: String!
}

"""An NFT pool transaction."""
type NftPoolEvent {
  """The ID of the NFT pool (`poolAddress`:`networkId`). For example, `0xdbea289dcc10eed8431e78753414a3d81b8e7201:1`."""
  id: String!
  """The contract address of the NFT pool."""
  poolAddress: String!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The contract address of the NFT collection."""
  collectionAddress: String!
  """The ID of the NFT collection (`collectionAddress`:`networkId`)."""
  collectionId: String!
  """The contract address of the NFT AMM marketplace."""
  exchangeAddress: String!
  """The contract address of the liquidity token of the pool (usually WETH)."""
  tokenAddress: String!
  """The block number for the transaction."""
  blockNumber: Int!
  """The index of the log in the block."""
  logIndex: Int!
  """The index of the transaction within the block."""
  transactionIndex: Int!
  """The hash of the block where the transaction occurred."""
  blockHash: String!
  """The unique hash for the transaction."""
  transactionHash: String!
  """The unix timestamp for the transaction."""
  timestamp: Int!
  """The wallet address that transacted."""
  maker: String!
  """The type of liquidity pool."""
  poolType: NftPoolType!
  """The event type of the transaction."""
  eventType: NftPoolEventType!
  """The event-specific data for the transaction."""
  data: NftPoolEventData!
}

"""Event-specific data for an NFT pool transaction."""
union NftPoolEventData = NewPoolEventData | SwapNftOutPoolEventData | SwapNftInPoolEventData | NftPoolNftDepositEventData | NftPoolNftWithdrawalEventData | NftPoolTokenDepositEventData | NftPoolTokenWithdrawalEventData | NftPoolSpotPriceUpdateEventData | NftPoolDeltaUpdateEventData | NftPoolFeeUpdateEventData | NftPoolAssetRecipientUpdateEventData | NewPoolEventDataV2 | SwapNftOutPoolEventDataV2 | SwapNftInPoolEventDataV2 | NftPoolNftDepositEventDataV2 | NftPoolNftWithdrawalEventDataV2 | NftPoolTokenDepositEventDataV2 | NftPoolTokenWithdrawalEventDataV2 | NftPoolSpotPriceUpdateEventDataV2 | NftPoolOwnershipTransferredEventDataV2

"""Metadata for an NFT transfer."""
type NftPoolEventNftTransfer {
  """The NFT token ID involved in the transfer."""
  nftTokenId: String!
  """The value of the NFT at the time of transfer."""
  amountT: String!
}

"""Metadata for an NFT transfer."""
type NftPoolEventNftTransferV2 {
  """The NFT token ID involved in the transfer."""
  nftTokenId: String!
  """The number of tokens involved in the transfer."""
  nftQuantity: String!
  """The number of tokens involved in the transfer."""
  nftTokenQuantity: String! @deprecated(reason: "nftTokenQuantity is no longer supported - use nftQuantity instead.")
  """The value of the token at the time of transfer."""
  amountT: String!
}

"""Response returned by `getNftPoolEvents`."""
type NftPoolEventsResponse {
  """A list of transactions for an NFT pool."""
  items: [NftPoolEvent]
  """A cursor for use in pagination."""
  cursor: String
}

"""The type of an NFT pool event."""
enum NftPoolEventType {
  NEW_POOL
  SWAP_NFT_IN_POOL
  SWAP_NFT_OUT_POOL
  NFT_DEPOSIT
  NFT_WITHDRAWAL
  TOKEN_DEPOSIT
  TOKEN_WITHDRAWAL
  SPOT_PRICE_UPDATE
  DELTA_UPDATE
  FEE_UPDATE
  ASSET_RECIPIENT_CHANGE
  NEW_POOL_V2
  SWAP_NFT_IN_POOL_V2
  SWAP_NFT_OUT_POOL_V2
  NFT_DEPOSIT_V2
  NFT_WITHDRAWAL_V2
  TOKEN_DEPOSIT_V2
  TOKEN_WITHDRAWAL_V2
  SPOT_PRICE_UPDATE_V2
  OWNERSHIP_TRANSFERRED
}

"""Event data for updating the fee of a pool."""
type NftPoolFeeUpdateEventData {
  """The type of NFT pool event, `FEE_UPDATE`."""
  type: NftPoolEventType!
  """The updated pool fee in the pool's liquidity token."""
  newFeeT: String!
  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!
  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Response returned by `filterNftPools`."""
type NftPoolFilterConnection {
  """The list of NFT pools matching the filter parameters."""
  results: [NftPoolFilterResult]
  """The number of NFT pools returned."""
  count: Int
  """Where in the list the server started when returning items."""
  page: Int
}

"""An NFT pool matching a set of filter parameters."""
type NftPoolFilterResult {
  """The ID of the NFT pool (`poolAddress`:`networkId`)."""
  id: String!
  """The contract address of the NFT pool."""
  poolAddress: String!
  """The unix timestamp indicating the last time the data was updated. Updates every 2 hours."""
  timestamp: Int!
  """The contract address of the NFT collection."""
  collectionAddress: String!
  """The contract address of the NFT AMM marketplace."""
  exchangeAddress: String!
  """The name of the NFT collection."""
  collectionName: String!
  """The symbol of the NFT collection."""
  collectionSymbol: String!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The wallet address that will receive the tokens or NFT sent to the pair during swaps."""
  assetRecipientAddress: String
  """The contract address of the bonding curve."""
  bondingCurveAddress: String!
  """The delta used in the pool's bonding curve."""
  delta: String!
  """The fee amount for the pool."""
  feeAmount: String!
  """The type of liquidity pool."""
  poolType: NftPoolType!
  """The contract address of the liquidity token of the pool."""
  tokenAddress: String!
  """The wallet address of the pool owner."""
  ownerAddress: String!
  """The pool variant. Can be `ERC20` or `NATIVE`."""
  poolVariant: GraphQlNftPoolVariant!
  """The list of royalties for the pool. Only applicable for `SUDOSWAP_V2` pools."""
  royalties: [NftPoolRoyalty]
  """The property checker contract address for the pool."""
  propertyChecker: String
  """The NFT pool contract version. Can be `SUDOSWAP_V1` or `SUDOSWAP_V2`."""
  version: NftPoolContractVersion
  """The type of NFT in the pool."""
  poolNftType: PoolNftType
  """For ERC1155 pools, the list of NFT token IDs that are accepted by the pool."""
  acceptedNftTokenIds: [String]
  """The current number of NFTs in the pool."""
  nftBalance: Int @deprecated(reason: "nftBalance is changing from Int to String - use nftBalanceV2 instead.")
  """The current number of NFTs in the pool."""
  nftBalanceV2: String
  """The current pool liquidity in the network's base token."""
  balanceNBT: String
  """The current price at which the pool is willing to sell an NFT."""
  sellNBT: String
  """The current price at which the pool is willing to buy an NFT in the network's base token."""
  offerNBT: String
  """The current spot price for the pool in the network's base token."""
  spotNBT: String
  """The current value of the collection in the pool's liquidity token."""
  balanceT: String
  """The current price at which the pool is willing to sell an NFT in the network's base token."""
  sellT: String
  """The current price at which the pool is willing to buy an NFT in the pool's liquidity token."""
  offerT: String
  """The current spot price for the pool in the pool's liquidity token."""
  spotT: String
  """The current pool liquidity in USD."""
  balanceUSD: String
  """The current price at which the pool is willing to sell an NFT in USD."""
  sellUSD: String
  """The current price at which the pool is willing to buy an NFT in USD."""
  offerUSD: String
  """The total number of NFTs sold over the pool's lifetime."""
  nftsSoldAll: Int @deprecated(reason: "nftsSoldAll is changing from Int to String - use nftsSoldAllV2 instead.")
  """The total number of NFTs sold over the pool's lifetime."""
  nftsSoldAllV2: String
  """The total number of NFTs bought over the pool's lifetime."""
  nftsBoughtAll: Int @deprecated(reason: "nftsBoughtAll is changing from Int to String - use nftsBoughtAllV2 instead.")
  """The total number of NFTs bought over the pool's lifetime."""
  nftsBoughtAllV2: String
  """The total number of NFTs bought and sold over the pool's lifetime."""
  nftVolumeAll: Int @deprecated(reason: "nftVolumeAll is changing from Int to String - use nftVolumeAllV2 instead.")
  """The total number of NFTs bought and sold over the pool's lifetime."""
  nftVolumeAllV2: String
  """The total volume of the pool in the network's base token over the pool's lifetime."""
  volumeNBTAll: String
  """The total buy volume of the pool in the network's base token over the pool's lifetime."""
  revenueNBTAll: String
  """The total sell volume of the pool in the network's base token over the pool's lifetime."""
  expenseNBTAll: String
  """The sum of pool fees generated by the pool in the network's base token over the pool's lifetime."""
  poolFeesNBTAll: String
  """The sum of protocol fees generated by the pool in the network's base token over the pool's lifetime."""
  protocolFeesNBTAll: String
  """The total volume of the pool in the pool's liquidity token over the pool's lifetime."""
  volumeTAll: String
  """The total buy volume of the pool in the pool's liquidity token over the pool's lifetime."""
  revenueTAll: String
  """The total sell volume of the pool in the pool's liquidity token over the pool's lifetime."""
  expenseTAll: String
  """The sum of pool fees generated by the pool in the pool's liquidity token over the pool's lifetime."""
  poolFeesTAll: String
  """The sum of protocol fees generated by the pool in the pool's liquidity token over the pool's lifetime."""
  protocolFeesTAll: String
  """The total volume of the pool in USD over the pool's lifetime."""
  volumeUSDAll: String
  """The total buy volume of the pool in USD over the pool's lifetime."""
  revenueUSDAll: String
  """The total sell volume of the pool in USD over the pool's lifetime."""
  expenseUSDAll: String
  """The sum of pool fees generated by the pool in USD over the pool's lifetime."""
  poolFeesUSDAll: String
  """The sum of protocol fees generated by the pool in USD over the pool's lifetime."""
  protocolFeesUSDAll: String
  """The total number of NFTs sold by the pool over the past 24 hours."""
  nftsSold24: Int @deprecated(reason: "nftsSold24 is changing from Int to String - use nftsSold24V2 instead.")
  """The total number of NFTs sold by the pool over the past 24 hours."""
  nftsSold24V2: String
  """The total number of NFTs bought by the pool over the past 24 hours."""
  nftsBought24: Int @deprecated(reason: "nftsBought24 is changing from Int to String - use nftsBought24V2 instead.")
  """The total number of NFTs bought by the pool over the past 24 hours."""
  nftsBought24V2: String
  """The total number of NFTs bought and sold over the past 24 hours."""
  nftVolume24: Int @deprecated(reason: "nftVolume24 is changing from Int to String - use nftVolume24V2 instead.")
  """The total number of NFTs bought and sold over the past 24 hours."""
  nftVolume24V2: String
  """The total volume of the pool in the network's base token over the past 24 hours."""
  volumeNBT24: String
  """The total buy volume of the pool in the network's base token over the past 24 hours."""
  revenueNBT24: String
  """The total sell volume of the pool in the network's base token over the past 24 hours."""
  expenseNBT24: String
  """The sum of pool fees generated by the pool in the network's base token over the past 24 hours."""
  poolFeesNBT24: String
  """The sum of protocol fees generated by the pool in the network's base token over the past 24 hours."""
  protocolFeesNBT24: String
  """The total volume of the pool in the pool's liquidity token over the past 24 hours."""
  volumeT24: String
  """The total buy volume of the pool in the pool's liquidity token over the past 24 hours."""
  revenueT24: String
  """The total sell volume of the pool in the pool's liquidity token over the past 24 hours."""
  expenseT24: String
  """The sum of pool fees generated by the pool in the pool's liquidity token over the past 24 hours."""
  poolFeesT24: String
  """The sum of protocol fees generated by the pool in the pool's liquidity token over the past 24 hours."""
  protocolFeesT24: String
  """The total volume of the pool in USD over the past 24 hours."""
  volumeUSD24: String
  """The total buy volume of the pool in USD over the past 24 hours."""
  revenueUSD24: String
  """The total sell volume of the pool in USD over the past 24 hours."""
  expenseUSD24: String
  """The sum of pool fees generated by the pool in USD over the past 24 hours."""
  poolFeesUSD24: String
  """The sum of protocol fees generated by the pool in USD over the past 24 hours."""
  protocolFeesUSD24: String
  """The list of NFT assets in the pool."""
  nftAssets: [NftAsset]
}

"""Input type of `NftPoolFilters`."""
input NftPoolFilters {
  """The number of NFTs in the pool."""
  nftBalance: NftPoolNumberFilter
  """The pool liquidity in the network's base token."""
  balanceNBT: NftPoolNumberFilter
  """The current sell price of the pool in the network's base token."""
  sellNBT: NftPoolNumberFilter
  """The price at which the pool is willing to buy an NFT in the network's base token."""
  offerNBT: NftPoolNumberFilter
  """The pool liquidity in USD."""
  balanceUSD: NftPoolNumberFilter
  """The current sell price of the pool in USD."""
  sellUSD: NftPoolNumberFilter
  """The price at which the pool is willing to buy an NFT in USD."""
  offerUSD: NftPoolNumberFilter
  """The number of NFTs sold over the pool's lifetime."""
  nftsSoldAll: NftPoolNumberFilter
  """The number of NFTs bought over the pool's lifetime."""
  nftsBoughtAll: NftPoolNumberFilter
  """The number of NFTs bought or sold over the pool's lifetime."""
  nftVolumeAll: NftPoolNumberFilter
  """The total volume of the pool in the network's base token over the pool's lifetime."""
  volumeNBTAll: NftPoolNumberFilter
  """The total buy volume of the pool in the network's base token over the pool's lifetime."""
  revenueNBTAll: NftPoolNumberFilter
  """The total sell volume of the pool in the network's base token over the pool's lifetime."""
  expenseNBTAll: NftPoolNumberFilter
  """The sum of fees generated by the pool in the network's base token over the pool's lifetime."""
  poolFeesNBTAll: NftPoolNumberFilter
  """The sum of protocol fees generated by the pool in the network's base token over the pool's lifetime."""
  protocolFeesNBTAll: NftPoolNumberFilter
  """The total volume of the pool in USD over the pool's lifetime."""
  volumeUSDAll: NftPoolNumberFilter
  """The total buy volume of the pool in USD over the pool's lifetime."""
  revenueUSDAll: NftPoolNumberFilter
  """The total sell volume of the pool in USD over the pool's lifetime."""
  expenseUSDAll: NftPoolNumberFilter
  """The sum of fees generated by the pool in USD over the pool's lifetime."""
  poolFeesUSDAll: NftPoolNumberFilter
  """The sum of protocol fees generated by the pool in USD over the pool's lifetime."""
  protocolFeesUSDAll: NftPoolNumberFilter
  """The number of NFTs sold over the past 24 hours."""
  nftsSold24: NftPoolNumberFilter
  """The number of NFTs bought over the past 24 hours."""
  nftsBought24: NftPoolNumberFilter
  """The number of NFTs bought or sold over the past 24 hours."""
  nftVolume24: NftPoolNumberFilter
  """The total volume of the pool in the network's base token over the past 24 hours."""
  volumeNBT24: NftPoolNumberFilter
  """The total buy volume of the pool in the network's base token over the past 24 hours."""
  revenueNBT24: NftPoolNumberFilter
  """The total sell volume of the pool in the network's base token over the past 24 hours."""
  expenseNBT24: NftPoolNumberFilter
  """The sum of fees generated by the pool in the network's base token in the past 24 hours."""
  poolFeesNBT24: NftPoolNumberFilter
  """The sum of protocol fees generated by the pool in the network's base token over the past 24 hours."""
  protocolFeesNBT24: NftPoolNumberFilter
  """The total volume of the pool in USD over the past 24 hours."""
  volumeUSD24: NftPoolNumberFilter
  """The total buy volume of the pool in USD over the past 24 hours."""
  revenueUSD24: NftPoolNumberFilter
  """The total sell volume of the pool in USD over the past 24 hours."""
  expenseUSD24: NftPoolNumberFilter
  """The sum of fees generated by the pool in USD in the past 24 hours."""
  poolFeesUSD24: NftPoolNumberFilter
  """The sum of protocol fees generated by the pool in USD over the past 24 hours."""
  protocolFeesUSD24: NftPoolNumberFilter
  """The list of network IDs to filter by."""
  network: [Int]
  """The list of NFT AMM marketplace addresses to filter by."""
  exchangeAddress: [String]
  """The contract address of the NFT collection."""
  collectionAddress: [String]
  """For ERC1155 pools, the list of NFT token IDs that are accepted by the pool."""
  acceptedNftTokenIds: [String]
  """The wallet address of the pool owner."""
  ownerAddress: [String]
}

"""Event data for depositing an NFT into a pool."""
type NftPoolNftDepositEventData {
  """The type of NFT pool event, `NFT_DEPOSIT`."""
  type: NftPoolEventType!
  """The list of NFT token IDs deposited."""
  nftTokenIds: [String!]!
  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
}

"""Event data for depositing an NFT into a pool."""
type NftPoolNftDepositEventDataV2 {
  """The type of NFT pool event, `NFT_DEPOSIT`."""
  type: NftPoolEventType!
  """The list of NFT token IDs deposited."""
  nftTokenIds: [String!]!
  """The amount of each NFT token deposited."""
  nftTokenAmounts: [String!]!
  """*New Param*: The list of NFT assets withdrawn. More extensive info than nftTokenIds."""
  nftAssets: [NftAsset]
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
}

"""Event data for withdrawing an NFT from a pool."""
type NftPoolNftWithdrawalEventData {
  """The type of NFT pool event, `NFT_WITHDRAWAL`."""
  type: NftPoolEventType!
  """The NFT token IDs withdrawn."""
  nftTokenIds: [String!]!
  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
}

"""Event data for withdrawing an NFT from a pool."""
type NftPoolNftWithdrawalEventDataV2 {
  """The type of NFT pool event, `NFT_WITHDRAWAL`."""
  type: NftPoolEventType!
  """The list of NFT token IDs withdrawn."""
  nftTokenIds: [String!]!
  """The amount of each NFT token withdrawn."""
  nftTokenAmounts: [String!]!
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
  """*New Param*: The list of NFT assets withdrawn. More extensive info than nftTokenIds."""
  nftAssets: [NftAsset]
}

"""Input type of `NftPoolNumberFilter`."""
input NftPoolNumberFilter {
  """Greater than or equal to."""
  gte: String
  """Greater than."""
  gt: String
  """Less than or equal to."""
  lte: String
  """Less than."""
  lt: String
}

"""Event data for transferring ownership of a pool."""
type NftPoolOwnershipTransferredEventDataV2 {
  """The type of NFT pool event, `OWNERSHIP_TRANSFERRED`."""
  type: NftPoolEventType!
  """The new owner of the pool."""
  newOwner: String!
}

"""Input type of `NftPoolRanking`."""
input NftPoolRanking {
  """The attribute to rank NFT pools by."""
  attribute: NftPoolRankingAttribute
  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""The attribute used to rank NFT pools."""
enum NftPoolRankingAttribute {
  balanceNBT
  balanceUSD
  expenseNBT24
  expenseNBTAll
  expenseUSD24
  expenseUSDAll
  nftBalance
  nftsBought24
  nftsBoughtAll
  nftsSold24
  nftsSoldAll
  nftVolume24
  nftVolumeAll
  offerNBT
  offerUSD
  poolFeesNBT24
  poolFeesNBTAll
  poolFeesUSD24
  poolFeesUSDAll
  protocolFeesNBT24
  protocolFeesNBTAll
  protocolFeesUSD24
  protocolFeesUSDAll
  revenueNBT24
  revenueNBTAll
  revenueUSD24
  revenueUSDAll
  sellNBT
  sellUSD
  volumeNBT24
  volumeNBTAll
  volumeUSD24
  volumeUSDAll
}

"""An NFT pool."""
type NftPoolResponse {
  """The ID of the NFT pool (`poolAddress`:`networkId`). For example, `0xdbea289dcc10eed8431e78753414a3d81b8e7201:1`."""
  poolId: String!
  """The contract address of the liquidity token of the pool (usually WETH)."""
  tokenAddress: String!
  """The contract address of the NFT collection."""
  collectionAddress: String!
  """The contract name of the NFT collection."""
  collectionName: String!
  """The symbol of the NFT collection."""
  collectionSymbol: String
  """The contract address of the NFT AMM marketplace."""
  exchangeAddress: String!
  """The contract address of the NFT pool."""
  poolAddress: String!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The type of liquidity pool."""
  poolType: NftPoolType!
  """The pool variant. Can be `ERC20` or `NATIVE`."""
  poolVariant: GraphQlNftPoolVariant!
  """The bonding curve type that defines how the prices of NFTs change after each buy or sell within a pool."""
  bondingCurveType: BondingCurveType!
  """The contract address of the bonding curve."""
  bondingCurveAddress: String!
  """The wallet address that will receive the tokens or NFT sent to the pair during swaps."""
  assetRecipientAddress: String!
  """The current delta used in the bonding curve."""
  delta: String!
  """The wallet address of the pool owner."""
  owner: String!
  """The current fee for pool."""
  fee: String!
  poolFeesAllTimeT: String
  poolFeesAllTimeNBT: String
  """The current price at which the pool is willing to sell an NFT in the network's base token. Only applicable for `SELL` and `BUY_AND_SELL` pool types."""
  floorNBT: String
  """The current price at which the pool is willing to buy an NFT in the network's base token. Only applicable for `BUY` and `BUY_AND_SELL` pool types."""
  offerNBT: String
  """The spot price in the network's base token."""
  spotPriceNBT: String!
  """The current pool liquidity in the network's base token."""
  balanceNBT: String!
  """The current number of NFTs in the pool."""
  nftBalance: Int @deprecated(reason: "nftBalance is changing from Int to String - use nftBalanceV2 instead.")
  """The current number of NFTs in the pool."""
  nftBalanceV2: String!
  """The total volume of the pool in the network's base token over the pool's lifetime."""
  volumeAllTimeNBT: String!
  """The current price at which the pool is willing to sell an NFT in the pool's liquidity token. Only applicable for `SELL` and `BUY_AND_SELL` pool types."""
  floorT: String
  """The current price at which the pool is willing to buy an NFT in the pool's liquidity token. Only applicable for `BUY` and `BUY_AND_SELL` pool types."""
  offerT: String
  """The instantaneous price for selling 1 NFT to the pool in the pool's liquidity token."""
  spotPriceT: String!
  """The current pool liquidity in the pool's liquidity token."""
  balanceT: String!
  """The total volume of the pool in the pool's liquidity token over the pool's lifetime."""
  volumeAllTimeT: String!
  """The total number of NFTs bought and sold over the pool's lifetime."""
  nftVolumeAllTime: Int! @deprecated(reason: "nftVolumeAllTime is changing from Int to String - use nftVolumeAllTimeV2 instead.")
  """The total number of NFTs bought and sold over the pool's lifetime."""
  nftVolumeAllTimeV2: String!
  """The list of NFT assets in the pool."""
  nftAssets: [NftAsset]
  """The type of NFT in the pool."""
  poolNftType: PoolNftType
  """The list of royalties for the pool. Only applicable for `SUDOSWAP_V2` pools."""
  royalties: [NftPoolRoyalty]
  """The property checker contract address for the pool."""
  propertyChecker: String
  """The NFT pool contract version. Can be `SUDOSWAP_V1` or `SUDOSWAP_V2`."""
  version: NftPoolContractVersion
  """For ERC1155 pools, the list of NFT token IDs that are accepted by the pool."""
  acceptedNftTokenIds: [String]
}

"""The royalty for a SUDOSWAP_V2 pool."""
type NftPoolRoyalty {
  """The wallet address of recipient."""
  recipient: String
  """The royalty percent."""
  percent: String
}

"""Event data for updating the spot price of a pool."""
type NftPoolSpotPriceUpdateEventData {
  """The type of NFT pool event, `SPOT_PRICE_UPDATE`."""
  type: NftPoolEventType!
  """The updated spot price in the pool's liquidity token."""
  newSpotPriceT: String!
  """The updated price at which the pool is willing to sell an NFT in the pool's liquidity token."""
  newSellPriceT: String!
  """The updated price at which the pool is willing to buy an NFT in the pool's liquidity token."""
  newBuyPriceT: String!
  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!
  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for updating the spot price of a pool."""
type NftPoolSpotPriceUpdateEventDataV2 {
  """The type of NFT pool event, `SPOT_PRICE_UPDATE`."""
  type: NftPoolEventType!
  """The updated spot price in the pool's liquidity token."""
  newSpotPriceT: String!
  """The updated price at which the pool is willing to sell an NFT in the pool's liquidity token."""
  newSellPriceT: String!
  """The updated price at which the pool is willing to buy an NFT in the pool's liquidity token."""
  newBuyPriceT: String!
  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!
  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Stats for an NFT pool."""
type NftPoolStatsResponse {
  """The contract address of the NFT AMM marketplace."""
  exchangeAddress: String!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The contract address of the NFT collection."""
  collectionAddress: String!
  """The unix timestamp for the start of the time frame."""
  startTime: Int!
  """The unix timestamp for the end of the time frame."""
  endTime: Int!
  """The contract address of the NFT pool."""
  poolAddress: String
  """The total number of NFTs bought and sold over the time frame."""
  nftVolumeV2: String
  """The total number of NFTs bought over the time frame."""
  nftsBoughtV2: String
  """The total number of NFTs sold over the time frame."""
  nftsSoldV2: String
  """The number of NFTs in the pool at the start of the time frame."""
  openNftBalanceV2: String
  """The number of NFTs in the pool at the end of the time frame."""
  closeNftBalanceV2: String
  """The total volume of the pool in the network's base token over the time frame."""
  volumeNBT: String
  """The total buy volume of the pool in the network's base token over the time frame."""
  revenueNBT: String
  """The total sell volume of the pool in the network's base token over the time frame."""
  expenseNBT: String
  """The sum of pool fees generated by the pool in the network's base token over the time frame."""
  poolFeesNBT: String
  """The sum of protocol fees generated by the pool in the network's base token over the time frame."""
  protocolFeesNBT: String
  """The lowest price at which the pool was willing to sell an NFT in the network's base token over the time frame."""
  lowFloorNBT: String
  """The highest price at which the pool was willing to sell an NFT in the network's base token over the time frame."""
  highFloorNBT: String
  """The lowest price at which the pool was willing to buy an NFT in the network's base token over the time frame."""
  lowOfferNBT: String
  """The highest price at which the pool was willing to buy an NFT in the network's base token over the time frame."""
  highOfferNBT: String
  """The pool liquidity in the network's base token at the start of the time frame."""
  openBalanceNBT: String
  """The pool liquidity in the network's base token at the end of the time frame."""
  closeBalanceNBT: String
}

"""Event data for depositing a token into a pool."""
type NftPoolTokenDepositEventData {
  """The type of NFT pool event, `TOKEN_DEPOSIT`."""
  type: NftPoolEventType!
  """The total value of token deposited in the pool's liquidity token."""
  amountT: String!
  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!
  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for depositing a token into a pool."""
type NftPoolTokenDepositEventDataV2 {
  """The type of NFT pool event, `TOKEN_DEPOSIT`."""
  type: NftPoolEventType!
  """The total value of token deposited in the pool's liquidity token."""
  amountT: String!
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!
  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for withdrawing a token from a pool."""
type NftPoolTokenWithdrawalEventData {
  """The type of NFT pool event, `TOKEN_WITHDRAWAL`."""
  type: NftPoolEventType!
  """The total value of token withdrawn in the pool's liquidity token."""
  amountT: String!
  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!
  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for withdrawing a token from a pool."""
type NftPoolTokenWithdrawalEventDataV2 {
  """The type of NFT pool event, `TOKEN_WITHDRAWAL`."""
  type: NftPoolEventType!
  """The total value of token withdrawn in the pool's liquidity token."""
  amountT: String!
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!
  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""The pool type selected by the pool creator."""
enum NftPoolType {
  BUY
  SELL
  BUY_AND_SELL
}

"""The level of NFTs to search."""
enum NftSearchable {
  Asset
  Collection
}

"""Response returned by `searchNfts`."""
type NftSearchResponse {
  """A list of NFT collections matching a given query string."""
  items: [NftSearchResponseCollection]
  """The number of additional results found."""
  hasMore: Int!
}

"""An NFT collection matching a given query string."""
type NftSearchResponseCollection {
  """The ID of the NFT collection (`address`:`networkId`)."""
  id: String!
  """The contract address of the NFT collection."""
  address: String!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The name of the NFT collection. For example, `Bored Ape Yacht Club`."""
  name: String
  """The symbol of the NFT collection. For example, `BAYC`."""
  symbol: String
  """The image URL for the collection or one of the assets within the collection."""
  imageUrl: String
  """The trade volume in USD over the `window`."""
  volume: String!
  """The change in volume between the previous and current `window`."""
  volumeChange: Float!
  """The trade count over the `window`."""
  tradeCount: String!
  """The change in trade count between the previous and current `window`."""
  tradeCountChange: Float!
  """The lowest sale price over the `window`."""
  floor: String!
  """The average sale price over the `window`."""
  average: String!
  """The highest sale price over the `window`."""
  ceiling: String!
  """The time frame used for calculating stats."""
  window: String!
}

"""Number metrics for NFT stats."""
type NftStatsNumberMetrics {
  """The total value for the current window."""
  current: Float
  """The total value for the previous window."""
  previous: Float
  """The percent change between the `current` and `previous`."""
  change: Float
}

"""String metrics for NFT stats."""
type NftStatsStringMetrics {
  """The total value for the current window."""
  current: String
  """The total value for the previous window."""
  previous: String
  """The percent change between the `current` and `previous`."""
  change: Float
}

"""NFT stats for a given time frame."""
input NftStatsWindowFilter {
  """The currency stats in USD, such as volume."""
  usd: statsCurrency
  """The currency stats in the network's base token, such as volume."""
  networkBaseToken: statsCurrency
  """The numerical stats, such as number of sales."""
  nonCurrency: statsNonCurrency
}

"""NFT stats over a time frame."""
type NftStatsWindowWithChange {
  """The unix timestamp for the start of the window."""
  startTime: Int
  """The unix timestamp for the end of the window."""
  endTime: Int
  """The currency stats in USD, such as volume."""
  usd: NftCollectionCurrencyStats
  """The currency stats in the network's base token, such as volume."""
  networkBaseToken: NftCollectionCurrencyStats
  """The numerical stats, such as number of sales."""
  nonCurrency: NftCollectionNonCurrencyStats
}

"""Input type of `NumberFilter`."""
input NumberFilter {
  """Greater than or equal to."""
  gte: Float
  """Greater than."""
  gt: Float
  """Less than or equal to."""
  lte: Float
  """Less than."""
  lt: Float
}

"""Response returned by `onBarsUpdated`."""
type OnBarsUpdatedResponse {
  """The contract address for the pair."""
  pairAddress: String!
  """The network ID the pair is deployed on."""
  networkId: Int!
  """The ID for the pair (`pairAddress`:`networkId`)."""
  pairId: String!
  """The unix timestamp for the new bar."""
  timestamp: Int!
  """The type of statistics used. Can be `Filtered` or `Unfiltered`."""
  statsType: TokenPairStatisticsType!
  """The sortKey for the bar (`blockNumber`#`transactionIndex`#`logIndex`, zero padded). For example, `0000000016414564#00000224#00000413`."""
  eventSortKey: String!
  """Price data broken down by resolution."""
  aggregates: ResolutionBarData!
  """The quote token within the pair."""
  quoteToken: QuoteToken
  """The address of the token being quoted"""
  quoteTokenAddress: String!
}

"""Integer list condition."""
type OneOfNumberCondition {
  """The list of integers."""
  oneOf: [Int!]!
}

"""Input for integer list condition."""
input OneOfNumberConditionInput {
  """The list of integers."""
  oneOf: [Int!]!
}

"""Input for `onEventsCreatedByMaker`."""
input OnEventsCreatedByMakerInput {
  """The wallet address of the maker."""
  makerAddress: String!
}

input OnLaunchpadTokenEventBatchInput {
  """The protocol of the token."""
  protocol: LaunchpadTokenProtocol
  """The network ID that the token is deployed on."""
  networkId: Int
  """The name of the launchpad. One of the following: Pump.fun, Bonk, Baseapp, Zora, Zora Creator, Four.meme, Believe, Moonshot, Jupiter Studio, boop, ArenaTrade, Moonit, LaunchLab, MeteoraDBC, Vertigo, Cooking.City, time.fun, BAGS, Circus, Dealr, OhFuckFun, PrintFun, Trend, shout.fun, xApple, Sendshot, DubDub, cults."""
  launchpadName: String
  """The type of event."""
  eventType: LaunchpadTokenEventType
}

"""Input for `onLaunchpadTokenEvent`."""
input OnLaunchpadTokenEventInput {
  """The protocol of the token."""
  protocol: LaunchpadTokenProtocol
  """The name of the launchpad. One of the following: Pump.fun, Bonk, Baseapp, Zora, Zora Creator, Four.meme, Believe, Moonshot, Jupiter Studio, boop, ArenaTrade, Moonit, LaunchLab, MeteoraDBC, Vertigo, Cooking.City, time.fun, BAGS, Circus, Dealr, OhFuckFun, PrintFun, Trend, shout.fun, xApple, Sendshot, DubDub, cults."""
  launchpadName: String
  """The type of event."""
  eventType: LaunchpadTokenEventType
  """The contract address of the token. Requires `networkId`."""
  address: String
  """The network ID that the token is deployed on."""
  networkId: Int
}

input OnPricesUpdatedInput {
  address: String!
  networkId: Int!
  sourcePairAddress: String
}

"""Response returned by `onBarsUpdated`."""
type OnTokenBarsUpdatedResponse {
  """The contract address for the pair."""
  pairAddress: String!
  """The network ID the pair is deployed on."""
  networkId: Int!
  """The ID for the pair (`pairAddress`:`networkId`)."""
  pairId: String!
  """The unix timestamp for the new bar."""
  timestamp: Int!
  """The type of statistics used. Can be `Filtered` or `Unfiltered`."""
  statsType: TokenPairStatisticsType!
  """The sortKey for the bar (`blockNumber`#`transactionIndex`#`logIndex`, zero padded). For example, `0000000016414564#00000224#00000413`."""
  eventSortKey: String!
  """Price data broken down by resolution."""
  aggregates: ResolutionBarData!
  """The quote token within the pair."""
  quoteToken: QuoteToken
  """The address of the token being quoted"""
  tokenAddress: String!
  """The address of the token being quoted"""
  tokenId: String!
}

input OnTokenEventsCreatedInput {
  """The token address to filter by."""
  tokenAddress: String
  """The network ID to filter by."""
  networkId: Int!
}

"""Response returned by `onUnconfirmedBarsUpdated`."""
type OnUnconfirmedBarsUpdated {
  """The contract address for the pair."""
  pairAddress: String!
  """The network ID the pair is deployed on."""
  networkId: Int!
  """The ID for the pair (`pairAddress`:`networkId`)."""
  pairId: String!
  """The unix timestamp for the new bar."""
  timestamp: Int!
  """The sortKey for the bar (`blockNumber`#`transactionIndex`#`logIndex`, zero padded). For example, `0000000016414564#00000224#00000413`."""
  eventSortKey: String!
  """Price data broken down by resolution."""
  aggregates: UnconfirmedResolutionBarData!
  """The quote token within the pair."""
  quoteToken: QuoteToken
  """The address of the token being quoted"""
  quoteTokenAddress: String!
}

"""Input for `onUnconfirmedEventsCreatedByMaker`."""
input OnUnconfirmedEventsCreatedByMakerInput {
  """The wallet address of the maker."""
  makerAddress: String!
}

"""Metadata for a token pair."""
type Pair {
  """The contract address of the pair."""
  address: String!
  """The address for the exchange factory contract."""
  exchangeHash: String!
  """The exchange fee for swaps."""
  fee: Int
  """The ID for the pair (`address:networkId`)."""
  id: String!
  """The network ID the pair is deployed on."""
  networkId: Int!
  """The amount of required tick separation. Only applicable for pairs on UniswapV3."""
  tickSpacing: Int
  """The contract address of `token0`."""
  token0: String!
  """The contract address of `token1`."""
  token1: String!
  """The unix timestamp for the creation of the pair."""
  createdAt: Int
  """Metadata for the first token in the pair."""
  token0Data: EnhancedToken
  """Metadata for the second token in the pair."""
  token1Data: EnhancedToken
  """The pooled amounts of each token in the pair."""
  pooled: PooledTokenValues
  """Custom data for the pair, only certain protocols have this. (uniswapv4, arenatrade for example)"""
  protocolData: ProtocolData
  """The per-protocol data for the pair, if applicable"""
  protocolCustomData: PairProtocolCustomData @deprecated(reason: "Use protocolData instead")
}

"""Input type of `PairChartInput`."""
input PairChartInput {
  """Options that pertain to the image itself."""
  imageOptions: ChartImageOptions
  """Settings that pertain to the chart."""
  chartSettings: PairChartSettings!
}

"""Input options for the chart."""
input PairChartSettings {
  """The contract address of the pair."""
  pairAddress: String!
  """The network ID the pair is deployed on."""
  networkId: Int!
  """The unix timestamp for the start of the requested range."""
  from: Int
  """The unix timestamp for the end of the requested range."""
  to: Int
  """The token of interest within the token's top pair. Can be `token0` or `token1`."""
  quoteToken: QuoteToken
  """The time frame for each candle. Available options are `1S`, `5S`, `15S`, `30S`, `1`, `5`, `15`, `30`, `60`, `240`, `720`, `1D`, `7D`."""
  resolution: String
  """The color theme of the chart."""
  theme: ChartTheme
}

"""Response returned by `filterPairs`."""
type PairFilterConnection {
  """The list of pairs matching the filter parameters."""
  results: [PairFilterResult]
  """The number of pairs returned."""
  count: Int
  """Where in the list the server started when returning items."""
  offset: Int
}

"""Input type of `PairFilterMatchTokens`."""
input PairFilterMatchTokens {
  """The contract address of `token0` to filter by."""
  token0: String
  """The contract address of `token1` to filter by."""
  token1: String
}

"""A pair matching a set of filter parameters."""
type PairFilterResult {
  """The unix timestamp for the creation of the pair."""
  createdAt: Int
  """The unix timestamp for the last transaction to happen on the pair."""
  lastTransaction: Int
  """The number of buys in the past hour."""
  buyCount1: Int
  """The number of buys in the past 4 hours."""
  buyCount4: Int
  """The number of buys in the past 12 hours."""
  buyCount12: Int
  """The number of buys in the past 24 hours."""
  buyCount24: Int
  """Exchange metadata for the pair."""
  exchange: FilterExchange
  """The highest price in USD in the past hour."""
  highPrice1: String
  """The highest price in USD in the past 4 hours."""
  highPrice4: String
  """The highest price in USD in the past 12 hours."""
  highPrice12: String
  """The highest price in USD in the past 24 hours."""
  highPrice24: String
  """Amount of liquidity in the pair."""
  liquidity: String
  """The locked liquidity percentage."""
  lockedLiquidityPercentage: Float!
  """The token with higher liquidity in the pair. Can be `token0` or `token1`."""
  liquidityToken: String
  """The token of interest. Can be `token0` or `token1`."""
  quoteToken: String
  """The lowest price in USD in the past hour."""
  lowPrice1: String
  """The lowest price in USD in the past 4 hours."""
  lowPrice4: String
  """The lowest price in USD in the past 12 hours."""
  lowPrice12: String
  """The lowest price in USD in the past 24 hours."""
  lowPrice24: String
  """The fully diluted market cap."""
  marketCap: String
  """Metadata for the pair."""
  pair: Pair
  """The token price in USD."""
  price: String
  """10^n, where n is the number of decimal places the price has. Max 16. Used for TradingView settings."""
  priceScale: String
  """The percent price change in the past hour. Decimal format."""
  priceChange1: String
  """The percent price change in the past 4 hours. Decimal format."""
  priceChange4: String
  """The percent price change in the past 12 hours. Decimal format."""
  priceChange12: String
  """The percent price change in the past 24 hours. Decimal format."""
  priceChange24: String
  """The percent volume change in the past hour. Decimal format."""
  volumeChange1: String
  """The percent volume change in the past 4 hours. Decimal format."""
  volumeChange4: String
  """The percent volume change in the past 12 hours. Decimal format."""
  volumeChange12: String
  """The percent volume change in the past 24 hours. Decimal format."""
  volumeChange24: String
  """The number of sells in the past hour."""
  sellCount1: Int
  """The number of sells in the past 4 hours."""
  sellCount4: Int
  """The number of sells in the past 12 hours."""
  sellCount12: Int
  """The number of sells in the past 24 hours."""
  sellCount24: Int
  """Metadata for the first token in the pair."""
  token0: EnhancedToken
  """Metadata for the second token in the pair."""
  token1: EnhancedToken
  """The number of transactions in the past hour."""
  txnCount1: Int
  """The number of transactions in the past 4 hours."""
  txnCount4: Int
  """The number of transactions in the past 12 hours."""
  txnCount12: Int
  """The number of transactions in the past 24 hours."""
  txnCount24: Int
  """The unique number of buys in the past hour."""
  uniqueBuys1: Int
  """The unique number of buys in the past 4 hours."""
  uniqueBuys4: Int
  """The unique number of buys in the past 12 hours."""
  uniqueBuys12: Int
  """The unique number of buys in the past 24 hours."""
  uniqueBuys24: Int
  """The unique number of sells in the past hour."""
  uniqueSells1: Int
  """The unique number of sells in the past 4 hours."""
  uniqueSells4: Int
  """The unique number of sells in the past 12 hours."""
  uniqueSells12: Int
  """The unique number of sells in the past 24 hours."""
  uniqueSells24: Int
  """The unique number of transactions in the past hour."""
  uniqueTransactions1: Int
  """The unique number of transactions in the past 4 hours."""
  uniqueTransactions4: Int
  """The unique number of transactions in the past 12 hours."""
  uniqueTransactions12: Int
  """The unique number of transactions in the past 24 hours."""
  uniqueTransactions24: Int
  """The trade volume in USD in the past hour."""
  volumeUSD1: String
  """The trade volume in USD in the past 4 hours."""
  volumeUSD4: String
  """The trade volume in USD in the past 12 hours."""
  volumeUSD12: String
  """The trade volume in USD in the past 24 hours."""
  volumeUSD24: String
  """The buy volume in USD in the past hour."""
  buyVolumeUSD1: String
  """The buy volume in USD in the past 12 hours."""
  buyVolumeUSD12: String
  """The buy volume in USD in the past 24 hours."""
  buyVolumeUSD24: String
  """The buy volume in USD in the past 4 hours."""
  buyVolumeUSD4: String
  """The sell volume in USD in the past hour."""
  sellVolumeUSD1: String
  """The sell volume in USD in the past 12 hours."""
  sellVolumeUSD12: String
  """The sell volume in USD in the past 24 hours."""
  sellVolumeUSD24: String
  """The sell volume in USD in the past 4 hours."""
  sellVolumeUSD4: String
  """The average age of the wallets that traded in the last 24h"""
  walletAgeAvg: String
  """The standard deviation of age of the wallets that traded in the last 24h"""
  walletAgeStd: String
  """The percentage of wallets that are less than 1d old that have traded in the last 24h"""
  swapPct1dOldWallet: String
  """The percentage of wallets that are less than 7d old that have traded in the last 24h"""
  swapPct7dOldWallet: String
}

"""Input type of `PairFilters`."""
input PairFilters {
  """The unix timestamp for the creation of the pair."""
  createdAt: NumberFilter
  """The unix timestamp for the last transaction to happen on the pair."""
  lastTransaction: NumberFilter
  """The number of buys in the past hour."""
  buyCount1: NumberFilter
  """The number of buys in the past 12 hours."""
  buyCount12: NumberFilter
  """The number of buys in the past 24 hours."""
  buyCount24: NumberFilter
  """The number of buys in the past 4 hours."""
  buyCount4: NumberFilter
  """The list of exchange contract addresses to filter by."""
  exchangeAddress: [String]
  """The highest price in USD in the past hour."""
  highPrice1: NumberFilter
  """The highest price in USD in the past 12 hours."""
  highPrice12: NumberFilter
  """The highest price in USD in the past 24 hours."""
  highPrice24: NumberFilter
  """The highest price in USD in the past 4 hours."""
  highPrice4: NumberFilter
  """The amount of liquidity in the pair."""
  liquidity: NumberFilter
  """The percent amount of liquidity that is locked"""
  lockedLiquidityPercentage: NumberFilter
  """The lowest price in USD in the past hour."""
  lowPrice1: NumberFilter
  """The lowest price in USD in the past 12 hours."""
  lowPrice12: NumberFilter
  """The lowest price in USD in the past 24 hours."""
  lowPrice24: NumberFilter
  """The lowest price in USD in the past 4 hours."""
  lowPrice4: NumberFilter
  """The list of network IDs to filter by."""
  network: [Int]
  """The token price in USD."""
  price: NumberFilter
  """The percent price change in the past hour. Decimal format."""
  priceChange1: NumberFilter
  """The percent price change in the past 12 hours. Decimal format."""
  priceChange12: NumberFilter
  """The percent price change in the past 24 hours. Decimal format."""
  priceChange24: NumberFilter
  """The percent price change in the past 4 hours. Decimal format."""
  priceChange4: NumberFilter
  """The percent volume change in the past hour. Decimal format."""
  volumeChange1: NumberFilter
  """The percent volume change in the past 4 hours. Decimal format."""
  volumeChange4: NumberFilter
  """The percent volume change in the past 12 hours. Decimal format."""
  volumeChange12: NumberFilter
  """The percent volume change in the past 24 hours. Decimal format."""
  volumeChange24: NumberFilter
  """The number of sells in the past hour."""
  sellCount1: NumberFilter
  """The number of sells in the past 12 hours."""
  sellCount12: NumberFilter
  """The number of sells in the past 24 hours."""
  sellCount24: NumberFilter
  """The number of sells in the past 4 hours."""
  sellCount4: NumberFilter
  """The list of token contract addresses to filter by."""
  tokenAddress: [String]
  """The number of transactions in the past hour."""
  txnCount1: NumberFilter
  """The number of transactions in the past 12 hours."""
  txnCount12: NumberFilter
  """The number of transactions in the past 24 hours."""
  txnCount24: NumberFilter
  """The number of transactions in the past 4 hours."""
  txnCount4: NumberFilter
  """The unique number of buys in the past hour."""
  uniqueBuys1: NumberFilter
  """The unique number of buys in the past 12 hours."""
  uniqueBuys12: NumberFilter
  """The unique number of buys in the past 24 hours."""
  uniqueBuys24: NumberFilter
  """The unique number of buys in the past 4 hours."""
  uniqueBuys4: NumberFilter
  """The unique number of sells in the past hour."""
  uniqueSells1: NumberFilter
  """The unique number of sells in the past 12 hours."""
  uniqueSells12: NumberFilter
  """The unique number of sells in the past 24 hours."""
  uniqueSells24: NumberFilter
  """The unique number of sells in the past 4 hours."""
  uniqueSells4: NumberFilter
  """The unique number of transactions in the past hour."""
  uniqueTransactions1: NumberFilter
  """The unique number of transactions in the past 12 hours."""
  uniqueTransactions12: NumberFilter
  """The unique number of transactions in the past 24 hours."""
  uniqueTransactions24: NumberFilter
  """The unique number of transactions in the past 4 hours."""
  uniqueTransactions4: NumberFilter
  """The trade volume in USD in the past hour."""
  volumeUSD1: NumberFilter
  """The trade volume in USD in the past 12 hours."""
  volumeUSD12: NumberFilter
  """The trade volume in USD in the past 24 hours."""
  volumeUSD24: NumberFilter
  """The trade volume in USD in the past 4 hours."""
  volumeUSD4: NumberFilter
  """The buy volume in USD in the past hour."""
  buyVolumeUSD1: NumberFilter
  """The buy volume in USD in the past 12 hours."""
  buyVolumeUSD12: NumberFilter
  """The buy volume in USD in the past 24 hours."""
  buyVolumeUSD24: NumberFilter
  """The buy volume in USD in the past 4 hours."""
  buyVolumeUSD4: NumberFilter
  """The sell volume in USD in the past hour."""
  sellVolumeUSD1: NumberFilter
  """The sell volume in USD in the past 12 hours."""
  sellVolumeUSD12: NumberFilter
  """The sell volume in USD in the past 24 hours."""
  sellVolumeUSD24: NumberFilter
  """The sell volume in USD in the past 4 hours."""
  sellVolumeUSD4: NumberFilter
  """Filter potential Scams"""
  potentialScam: Boolean
  """Whether to ignore pairs/tokens not relevant to trending"""
  trendingIgnored: Boolean
  """Whether to filter for pairs on testnet networks. Use `true` for testnet pairs only, `false` for mainnet pairs only and `undefined` (default) for both."""
  isTestnet: Boolean
  """The address of the hook contract for applicable protocols."""
  hookAddress: [String]
  """The average age of the wallets that traded in the last 24h"""
  walletAgeAvg: NumberFilter
  """The standard deviation of age of the wallets that traded in the last 24h"""
  walletAgeStd: NumberFilter
  """The percentage of wallets that are less than 1d old that have traded in the last 24h"""
  swapPct1dOldWallet: NumberFilter
  """The percentage of wallets that are less than 7d old that have traded in the last 24h"""
  swapPct7dOldWallet: NumberFilter
}

type PairMetadata {
  """The exchange contract ID."""
  exchangeId: String
  """The exchange fee for swaps."""
  fee: Int
  """The ID for the pair (`address:networkId`)."""
  id: String!
  """The token of interest within the pair. Can be `token0` or `token1`."""
  quoteToken: QuoteToken
  """The network ID the pair is deployed on."""
  networkId: Int
  """The total liquidity in the pair."""
  liquidity: String!
  """The token with higher liquidity within the pair. Can be `token0` or `token1`."""
  liquidityToken: String
  """The token with lower liquidity within the pair. Can be `token0` or `token1`."""
  nonLiquidityToken: String
  """The contract address of the pair."""
  pairAddress: String!
  """The type of statistics returned. Can be `FILTERED` or `UNFILTERED`"""
  statsType: TokenPairStatisticsType!
  """The quote token price in USD."""
  price: String!
  """The percent price change in the past 5 minutes. Decimal format."""
  priceChange5m: Float
  """The percent price change in the past hour. Decimal format."""
  priceChange1: Float
  """The percent price change in the past 4 hours. Decimal format."""
  priceChange4: Float
  """The percent price change in the past 12 hours. Decimal format."""
  priceChange12: Float
  """The percent price change in the past 24 hours. Decimal format."""
  priceChange24: Float
  """The percent price change in the past week. Decimal format."""
  priceChange1w: Float
  """The amount of required tick separation. Only applicable for pairs on UniswapV3."""
  tickSpacing: Int
  """Pair metadata for the first token in the pair."""
  token0: PairMetadataToken!
  """Pair metadata for the second token in the pair."""
  token1: PairMetadataToken!
  """The trade volume in USD in the past hour."""
  volume1: String
  """The trade volume in USD in the past 4 hours."""
  volume4: String
  """The trade volume in USD in the past 12 hours."""
  volume12: String
  """The trade volume in USD in the past 24 hours."""
  volume24: String
  """The trade trade volume in USD in the past week."""
  volume1w: String
  """The trade volume in USD in the past 5 minutes."""
  volume5m: String
  """The highest price in USD in the past 5 minutes."""
  highPrice5m: String
  """The highest price in USD in the past hour."""
  highPrice1: String
  """The highest price in USD in the past 4 hours."""
  highPrice4: String
  """The highest price in USD in the past 12 hours."""
  highPrice12: String
  """The highest price in USD in the past 24 hours."""
  highPrice24: String
  """The highest price in USD in the past week."""
  highPrice1w: String
  """The lowest price in USD in the past 5 minutes."""
  lowPrice5m: String
  """The lowest price in USD in the past hour."""
  lowPrice1: String
  """The lowest price in USD in the past 12 hours."""
  lowPrice12: String
  """The lowest price in USD in the past 24 hours."""
  lowPrice24: String
  """The lowest price in USD in the past 4 hours."""
  lowPrice4: String
  """The lowest price in USD in the past week."""
  lowPrice1w: String
  """Token metadata for the first token in the pair."""
  enhancedToken0: EnhancedToken
  """Token metadata for the second token in the pair."""
  enhancedToken1: EnhancedToken
  """The unix timestamp for the creation of the pair."""
  createdAt: Int
}

"""Metadata for a token in a pair."""
type PairMetadataToken {
  address: String!
  decimals: Int
  name: String!
  networkId: Int!
  pooled: String!
  price: String!
  symbol: String!
  labels: [ContractLabel]
}

type PairProtocolCustomData {
  """The address of the hook contract for Uniswap V4 pools."""
  uniswapV4HookAddress: String
}

"""Input type of `PairRanking`."""
input PairRanking {
  """The attribute to rank pairs by."""
  attribute: PairRankingAttribute
  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""The attribute used to rank tokens."""
enum PairRankingAttribute {
  createdAt
  lastTransaction
  buyCount1
  buyCount4
  buyCount12
  buyCount24
  highPrice1
  highPrice4
  highPrice12
  highPrice24
  liquidity
  lockedLiquidityPercentage
  lowPrice1
  lowPrice4
  lowPrice12
  lowPrice24
  marketCap
  price
  priceChange1
  priceChange4
  priceChange12
  priceChange24
  volumeChange1
  volumeChange4
  volumeChange12
  volumeChange24
  sellCount1
  sellCount4
  sellCount12
  sellCount24
  trendingScore
  trendingScore5m
  trendingScore1
  trendingScore4
  trendingScore12
  trendingScore24
  txnCount1
  txnCount4
  txnCount12
  txnCount24
  uniqueBuys1
  uniqueBuys4
  uniqueBuys12
  uniqueBuys24
  uniqueSells1
  uniqueSells4
  uniqueSells12
  uniqueSells24
  uniqueTransactions1
  uniqueTransactions4
  uniqueTransactions12
  uniqueTransactions24
  volumeUSD1
  volumeUSD4
  volumeUSD12
  volumeUSD24
  buyVolumeUSD1
  buyVolumeUSD4
  buyVolumeUSD12
  buyVolumeUSD24
  sellVolumeUSD1
  sellVolumeUSD4
  sellVolumeUSD12
  sellVolumeUSD24
  walletAgeAvg
  walletAgeStd
  swapPct1dOldWallet
  swapPct7dOldWallet
}

"""Response returned by `filterNftParallelAssets`."""
type ParallelAssetFilterConnection {
  """The list of Parallel assets matching the filter parameters."""
  results: [ParallelAssetFilterResult]
  """The number of Parallel assets returned."""
  count: Int
  """Where in the list the server started when returning items."""
  offset: Int
}

"""A Parallel asset matching a set of filter parameters."""
type ParallelAssetFilterResult {
  """The ID of the NFT asset (`address`:`tokenId`)."""
  id: String!
  """The contract address of the NFT collection."""
  address: String!
  """The token ID of the NFT asset."""
  tokenId: String!
  """The internal Parallel ID of the NFT asset."""
  parallelId: Int!
  """The network ID the NFT collection is deployed on."""
  networkId: Int!
  """The NFT asset media."""
  media: NftAssetMedia
  """The name of the NFT asset."""
  name: String
  """The description of the NFT asset."""
  description: String
  """The source image URI linked by smart contract metadata."""
  originalImage: String
  """The URI provided by the smart contract. Typically JSON that contains metadata."""
  uri: String
  """The unix timestamp for the last trade."""
  timestamp: Int
  """The last sale price in USD."""
  lastPriceUsd: String
  """The last sale price in the network's base token."""
  lastPriceNetworkBaseToken: String
  """The game data for the NFT asset."""
  gameData: ParallelAssetGameData
  """Metadata for the NFT asset."""
  metadata: ParallelAssetMetadata
}

"""Input type of `ParallelAssetFilters`."""
input ParallelAssetFilters {
  """The damage dealt when engaged in combat."""
  attack: NumberFilter
  """The energy used to play in-game."""
  cost: NumberFilter
  """The possible damage received before being destroyed."""
  health: NumberFilter
  """The total supply of this individual asset."""
  supply: NumberFilter
  """The last sale price in USD."""
  lastPriceUsd: NumberFilter
  """The last sale price in the network's base token."""
  lastPriceNetworkBaseToken: NumberFilter
}

"""Game data for a Parallel asset."""
type ParallelAssetGameData {
  """The rarity of the asset. Can be `Common`, `Uncommon`, `Rare`, `Legendary`, or `Prime`."""
  rarity: String
  """The Parallel the asset belongs to."""
  parallel: String
  """The energy used to play in-game."""
  cost: String
  """The damage dealt when engaged in combat."""
  attack: String
  """The possible damage received before being destroyed."""
  health: String
  """The card type. Can be `Effect`, `Relic`, `Unit`, `Upgrade` or `Paragon`."""
  cardType: String
  """The card subtype. Can be `Pirate`, `Vehicle` or `Clone`."""
  subtype: String
  """The description of the card's in-game abilities."""
  functionText: String
  """The description of the card's passive ability."""
  passiveAbility: String
}

"""The Parallel asset card type."""
enum ParallelAssetMatcherCardType {
  Effect
  Relic
  Unit
  Upgrade
  Paragon
}

"""The Parallel asset class."""
enum ParallelAssetMatcherClass {
  FE
  SE
  Asset
  ArtCard
  CardBack
  Masterpiece
  PL
}

"""The Parallel stream of evolution."""
enum ParallelAssetMatcherParallel {
  Augencore
  Marcolian
  Shroud
  Earthen
  Kathari
  UnknownOrigins
  Universal
}

"""The Parallel asset rarity."""
enum ParallelAssetMatcherRarity {
  Common
  Uncommon
  Rare
  Legendary
  Prime
}

"""Input type of `ParallelAssetMatchers`."""
input ParallelAssetMatchers {
  tokenId: [String]
  """The Parallel the asset belongs to."""
  parallel: [ParallelAssetMatcherParallel]
  """The card type. Can be `Effect`, `Relic`, `Unit`, `Upgrade` or `Paragon`."""
  cardType: [ParallelAssetMatcherCardType]
  """The card class. Can be `Art Card`, `Asset`, `Card Back`, `FE`, `Masterpiece`, `PL`, or `SE`."""
  class: [ParallelAssetMatcherClass]
  """The paraset the asset belongs to."""
  paraset: [String]
  """The list of rarities. Can be `Common`, `Uncommon`, `Rare`, `Legendary`, or `Prime`."""
  rarity: [ParallelAssetMatcherRarity]
  """The card subtype. Can be `Pirate`, `Vehicle` or `Clone`."""
  subtype: [ParallelAssetMatcherSubtype]
  """The expansion used for naming base and expansion sets."""
  expansion: [String]
}

"""The Parallel asset subtype."""
enum ParallelAssetMatcherSubtype {
  Pirate
  Vehicle
  Clone
}

type ParallelAssetMetadata {
  """The card class. Can be `Art Card`, `Asset`, `Card Back`, `FE`, `Masterpiece`, `PL`, or `SE`."""
  class: String
  """The total supply of this individual asset."""
  supply: String
  """The asset description, sourced off-chain. Usually equal to the asset's on-chain `description`."""
  flavourText: String
  """The expansion used for naming base and expansion sets."""
  expansion: String
  """The paraset the asset belongs to."""
  paraset: String
  """The ID used to match other cards with the same name but different class."""
  parallelId: String
  """The artist name."""
  artist: String
}

"""Input type of `ParallelAssetRanking`."""
input ParallelAssetRanking {
  """The attribute to rank Parallel assets by."""
  attribute: ParallelAssetRankingAttribute
  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""Attribute used to rank Parallel assets."""
enum ParallelAssetRankingAttribute {
  attack
  cost
  health
  supply
  lastPriceUsd
  lastPriceNetworkBaseToken
}

"""Tracked changes made to a Parallel card."""
type ParallelCardChange {
  """The token ID of the Parallel asset."""
  tokenId: String!
  """The unix timestamp for the card change."""
  timestamp: Int!
  """The Parallel card metadata before and after the card change."""
  diff: ParallelCardChangeDiff!
}

"""Parallel card metadata before and after a card change."""
type ParallelCardChangeDiff {
  """Metadata for a Parallel card before the card change."""
  old: ParallelCardChangeFields!
  """Metadata for a Parallel card after the card change."""
  new: ParallelCardChangeFields!
}

"""Metadata for a Parallel card."""
type ParallelCardChangeFields {
  """The ID used to match other cards with the same name but different class."""
  parallelId: String
  """The rarity of the asset. Can be `Common`, `Uncommon`, `Rare`, `Legendary`, or `Prime`."""
  rarity: String
  """The card class. Can be `Art Card`, `Asset`, `Card Back`, `FE`, `Masterpiece`, `PL`, or `SE`."""
  class: String
  """The total supply of this individual asset."""
  supply: String
  """The Parallel the asset belongs to."""
  parallel: String
  """The energy used to play in-game."""
  cost: String
  """The damage dealt when engaged in combat."""
  attack: String
  """The possible damage received before being destroyed."""
  health: String
  """The card type. Can be `Effect`, `Relic`, `Unit`, `Upgrade` or `Paragon`."""
  cardType: String
  """The card subtype. Can be `Pirate`, `Vehicle` or `Clone`."""
  subtype: String
  """The description of the card's in-game abilities."""
  functionText: String
  """The description of the card's passive ability."""
  passiveAbility: String
  """The asset description, sourced off-chain. Usually equal to the asset's on-chain `description`."""
  flavourText: String
  """The expansion used for naming base and expansion sets."""
  expansion: String
  """The paraset the asset belongs to."""
  paraset: String
  """The artist name."""
  artist: String
}

"""Input type of `ParallelCardChangeQueryTimestamp."""
input ParallelCardChangeQueryTimestampInput {
  """The unix timestamp for the start of the requested range."""
  from: Int
  """The unix timestamp for the end of the requested range."""
  to: Int
}

"""Response returned by `getParallelCardChanges`."""
type ParallelCardChangesConnection {
  """A cursor for use in pagination."""
  cursor: String
  """A list of tracked changes made to a Parallel card."""
  items: [ParallelCardChange]
}

"""Event data for a BalancerV2 Pool Balance Changed event."""
type PoolBalanceChangedEventData {
  """The amount of `token0` added or removed from the pair."""
  amount0: String
  """The amount of `token1` added or from the pair."""
  amount1: String
  """The amount of `token0` added or removed from the pair, adjusted by the number of decimals in the token. For example, if `amount0` is in WEI, `amount0Shifted` will be in ETH."""
  amount0Shifted: String
  """The amount of `token1` added or removed from the pair, adjusted by the number of decimals in the token. For example, USDC `amount1Shifted` will be by 6 decimals."""
  amount1Shifted: String
  """The address of `token0` in the pair."""
  token0: String
  """The address of `token1` in the pair."""
  token1: String
  """The address of account that added or removed liquidity."""
  sender: String
  """The amount of token0 captured by the protocol."""
  protocolFeeAmount0: String
  """The amount of token1 captured by the protocol."""
  protocolFeeAmount1: String
  """The amount of token0 now in the pool."""
  liquidity0: String
  """The amount of token1 now in the pool."""
  liquidity1: String
  """The type of token event, `Burn`."""
  type: EventType!
}

type PooledTokenValues {
  token0: String
  token1: String
}

"""The type of NFT in the pool."""
enum PoolNftType {
  ERC721ETH
  ERC721ERC20
  ERC1155ETH
  ERC1155ERC20
}

"""Real-time or historical prices for a token."""
type Price {
  """The contract address of the token."""
  address: String!
  """The network ID the token is deployed on."""
  networkId: Int!
  """The token price in USD."""
  priceUsd: Float!
  """The unix timestamp for the price."""
  timestamp: Int
  """The pool that emitted the swap generating this price"""
  poolAddress: String!
  """Ratio of how confident we are in the price"""
  confidence: Float
}

"""Webhook conditions for a price event."""
type PriceEventWebhookCondition {
  """The token contract address the webhook is listening for."""
  tokenAddress: StringEqualsCondition!
  """The network ID the webhook is listening on."""
  networkId: IntEqualsCondition!
  """The price condition that must be met in order for the webhook to send."""
  priceUsd: ComparisonOperator!
  """The pair contract address the webhook is listening for."""
  pairAddress: StringEqualsCondition
}

"""Input conditions for a price event webhook."""
input PriceEventWebhookConditionInput {
  """The contract address of the token to listen for."""
  tokenAddress: StringEqualsConditionInput!
  """The network ID to listen on."""
  networkId: IntEqualsConditionInput!
  """The price conditions to listen for."""
  priceUsd: ComparisonOperatorInput!
  """The contract address of the pair to listen for."""
  pairAddress: StringEqualsConditionInput
}

"""Response returned by `primeHolders`."""
type PrimeHolders {
  """A list of holders of PRIME. Each request returns 50 results."""
  items: [Balance!]!
  """The number of holders returned."""
  count: Int!
  """The cursor to use for pagination."""
  cursor: String
}

"""An Echelon Prime Pool."""
type PrimePool {
  """The ID of the contract-level Prime Pool (poolContractAddress:networkId). For example, `0x89bb49d06610b4b18e355504551809be5177f3d0:1`."""
  id: String
  """The contract address for the Prime Pool."""
  poolContractAddress: String
  """The network ID the Prime Pool is deployed on."""
  networkId: Int
  """The ID of the pool within the contract."""
  poolId: String
  """Values calculated by Defined using on-chain data."""
  calcData: PrimePoolCalcData
  """Values obtained directly from the chain."""
  chainData: PrimePoolChainData
  """When the pool was created by Defined."""
  createdAt: Int
  """The block number for when Defined discovered this pool."""
  discoveryBlockNumber: Int
  """The transaction hash of when Defined discovered this pool."""
  discoveryTransactionHash: String
  """The contract address for the tokens cached ib the pool."""
  nftContractAddress: String
  """The type of pool for this Prime Pool."""
  poolType: String
  """The Parallel tokenIds required to cache in the pool."""
  tokenIds: [String]
  """The # of cached sets in the pool."""
  totalSupply: String
}

"""A cached Prime pool asset."""
type PrimePoolAsset {
  """The Prime pool asset ID (poolContractAddress:poolId:networkId)"""
  id: String!
  """The owner wallet address of the cached Prime pool asset."""
  sortKey: String!
  """The number of cached Prime pool assets of this type by this owner."""
  amount: String!
  """The owner wallet address of the cached Prime pool asset."""
  from: String!
  """The owner wallet address of the cached Prime pool asset, and network ID (from:networkId)."""
  fromHashKey: String!
  """The Prime pool ID and Prime pool contract address (poolId:poolContractAddress)."""
  fromSortKey: String!
  """The network ID of the cached Prime pool asset."""
  networkId: Int!
  """THe contract address of the Prime pool."""
  poolContractAddress: String!
  """The Prime pool ID."""
  poolId: String!
  """The amount of ETH the user is not eligible for either from having already harvesting or from not caching in the past."""
  ethRewardDebt: String
  """The amount of PRIME the user is not eligible for either from having already harvesting or from not caching in the past."""
  primeRewardDebt: String
}

"""Response returned by `getPrimePoolAssets`."""
type PrimePoolAssetConnection {
  """The cursor to use for pagination."""
  cursor: String
  """The list of cached Prime pool assets returned by the query."""
  items: [PrimePoolAsset]
}

"""Event-specific data for a Prime pool Cache transaction."""
type PrimePoolCacheData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The amount of Prime pool asset(s) cached."""
  eventAmount: String!
  """The total supply of assets cached in this Prime pool, including the amount cached in this transaction."""
  totalSupply: String!
  """The owner wallet address of the cached Prime pool asset(s)."""
  user: String!
  """The total number of Prime pool asset(s) cached in this pool by this owner."""
  userCachedAmount: String!
  """The amount of PRIME the user is not eligible for either from having already harvesting or from not caching in the past."""
  userPrimeRewardDebt: String!
  """The amount of ETH the user is not eligible for either from having already harvesting or from not caching in the past."""
  userEthRewardDebt: String!
}

"""Event-specific data for a Prime pool CachingPaused transaction."""
type PrimePoolCachingPausedData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The state of caching paused set on the pool."""
  cachingPaused: Boolean!
}

type PrimePoolCalcData {
  """The amount of accumulated PRIME rewards in total for the pool."""
  poolAccumulatedPrime: String
  """The amount of accumulated PRIME rewards per share for the pool."""
  shareAccumulatedPrime: String
  """The amount of accumulated ETH rewards in total for the pool."""
  poolAccumulatedEth: String
  """The amount of accumulated ETH rewards per share for the pool."""
  shareAccumulatedEth: String
  """The amount of PRIME for the pool to pay out as caching rewards."""
  poolPrimeAmount: String
  """The amount of ETH for the pool to pay out as caching rewards."""
  poolEthAmount: String
  """The amount of PRIME paid out daily by the pool as caching rewards."""
  poolPrimePerDay: String
  """The amount of PRIME paid out per second by the pool as caching rewards."""
  poolPrimePerSecond: String
  """The amount of ETH paid out daily by the pool as caching rewards."""
  poolEthPerDay: String
  """The amount of ETH paid out per second by the pool as caching rewards."""
  poolEthPerSecond: String
  """The amount of PRIME paid out daily by the pool, per share of the pool's total cached supply."""
  sharePrimePerDay: String
  """The amount of PRIME paid out per second by the pool, per share of the pool's total cached supply."""
  sharePrimePerSecond: String
  """The amount of ETH paid out daily by the pool, per share of the pool's total cached supply."""
  shareEthPerDay: String
  """The amount of ETH paid out per second by the pool, per share of the pool's total cached supply."""
  shareEthPerSecond: String
}

"""Values obtained directly from the chain."""
type PrimePoolChainData {
  """Whether caching is paused for this pool."""
  cachingPaused: Boolean
  """How much ETH has been claimed for this pool."""
  ethClaimed: String
  """How much ETH reward has been accrued for this pool."""
  ethReward: String
  """The pool's allocation of the contract's per-second ETH rewards."""
  ethAllocPoint: String
  """Total share points of the contract's per-second ETH rewards to the pool."""
  ethTotalAllocPoint: String
  """Caching ETH rewards period start timestamp."""
  ethStartTimestamp: Int
  """Caching ETH rewards period end timestamp."""
  ethEndTimestamp: Int
  """Last timestamp at which ETH rewards were assigned."""
  ethLastRewardTimestamp: Int
  """Minimum number of timed cache seconds per ETH."""
  ethTimedCachePeriod: String
  """The pool's allocation of the contract's per second PRIME rewards."""
  primeAllocPoint: String
  """Total share points of the contract's per second PRIME rewards to the pool."""
  primeTotalAllocPoint: String
  """Caching rewards period start timestamp."""
  primeStartTimestamp: String
  """Caching rewards period end timestamp."""
  primeEndTimestamp: Int
  """Last timestamp at which PRIME rewards were assigned."""
  primeLastRewardTimestamp: Int
}

"""Event-specific data for a Prime pool ClaimEth transaction."""
type PrimePoolClaimEthData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The wallet address claiming ETH rewards."""
  user: String!
  """The amount of ETH claimed."""
  eventAmount: String!
  """The currency type of the event."""
  currency: PrimePoolCurrency!
  """The amount of ETH the user is not eligible for either from having already harvesting or from not caching in the past."""
  userEthRewardDebt: String!
  """The total amount of ETH claimed for a pool."""
  ethClaimed: String
}

"""Event-specific data for a Prime pool ClaimPrime transaction."""
type PrimePoolClaimPrimeData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The wallet address claiming PRIME rewards."""
  user: String!
  """The amount of PRIME claimed."""
  eventAmount: String!
  """The currency type of the event."""
  currency: PrimePoolCurrency!
  """The total amount of PRIME claimed for a pool."""
  userPrimeRewardDebt: String!
}

"""Response returned by `getPrimePools`."""
type PrimePoolConnection {
  """A cursor for use in pagination."""
  cursor: String
  """A list of prime pools."""
  items: [PrimePool]
}

"""Currency types for Prime pool events."""
enum PrimePoolCurrency {
  ETH
  PRIME
}

"""Event-specific data for a Prime pool EmergencyWithdraw transaction."""
type PrimePoolEmergencyWithdrawData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The wallet address emergency withdrawing from the pool."""
  user: String!
  """The amount of Prime pool asset(s) emergency withdrawn."""
  eventAmount: String!
  """The total supply of assets cached in this Prime pool."""
  totalSupply: String!
  """The updated total number of Prime pool asset(s) cached in this pool by this owner."""
  userCachedAmount: String!
  """The amount of PRIME the user is not eligible for either from having already harvesting or from not caching in the past."""
  userPrimeRewardDebt: String!
  """The amount of ETH the user is not eligible for either from having already harvesting or from not caching in the past."""
  userEthRewardDebt: String!
}

"""Event-specific data for a Prime pool EndTimestampUpdatedEth transaction."""
type PrimePoolEndTimestampUpdatedEthData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The currency type of the event."""
  currency: PrimePoolCurrency!
  """The updated ETH reward start timestamp for the pool."""
  ethStartTimestamp: Int!
  """The updated ETH reward end timestamp for the pool."""
  ethEndTimestamp: Int!
  """The updated reward per second for the pool."""
  ethPerSecond: String!
}

"""Event-specific data for a Prime pool EndTimestampUpdatedPrime transaction."""
type PrimePoolEndTimestampUpdatedPrimeData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The currency type of the event."""
  currency: PrimePoolCurrency!
  """The updated PRIME reward start timestamp for the pool."""
  primeStartTimestamp: Int!
  """The updated PRIME reward end timestamp for the pool."""
  primeEndTimestamp: Int!
  """The updated reward per second for the pool."""
  primePerSecond: String!
}

"""Event-specific data for a Prime pool LogUpdatePool transaction."""
type PrimePoolEthRewardsAddedData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The amount of ETH rewards added to the pool."""
  amount: String!
  """The total ETH rewards for the pool."""
  totalRewards: String!
}

"""Event-specific data for a Prime pool EthRewardsSet transaction."""
type PrimePoolEthRewardsSetData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The amount of ETH rewards set for the pool."""
  amount: String!
  """The total ETH rewards for the pool."""
  totalRewards: String!
}

"""A Prime pool event."""
type PrimePoolEvent {
  """The Prime pool event ID (poolContractAddress:poolId:networkId)"""
  id: String!
  """The sort key of the Prime pool event (blockNumber:transactionIndex:logIndex)."""
  sortKey: String!
  """The blockHash of the Prime pool event."""
  blockHash: String!
  """The blockNumber of the Prime pool event."""
  blockNumber: Int!
  """The event data for the Prime pool event."""
  data: PrimePoolEventData!
  """The Prime pool event type."""
  eventType: PrimePoolEventType!
  """The Prime pool event's calling address."""
  from: String!
  """The Prime pool event's calling address, and network ID (from:networkId)."""
  fromHashKey: String!
  """The logIndex of the Prime pool event."""
  logIndex: Int!
  """The network ID of the Prime pool event."""
  networkId: Int!
  """The Prime pool contract address."""
  poolContractAddress: String!
  """The Prime pool ID."""
  poolId: String!
  """The Prime pool type."""
  poolType: PrimePoolType!
  """The timestamp of the Prime pool event."""
  timestamp: Int!
  """The transactionHash of the Prime pool event."""
  transactionHash: String!
  """The transactionIndex of the Prime pool event."""
  transactionIndex: Int!
}

"""Response returned by `getPrimePoolEvents`."""
type PrimePoolEventConnection {
  """The cursor to use for pagination."""
  cursor: String
  """The list of Prime pool events returned by the query."""
  items: [PrimePoolEvent]
}

"""Event-specific data for a Prime pool transaction."""
union PrimePoolEventData = PrimePoolCacheData | PrimePoolCachingPausedData | PrimePoolClaimEthData | PrimePoolClaimPrimeData | PrimePoolEmergencyWithdrawData | PrimePoolEndTimestampUpdatedEthData | PrimePoolEndTimestampUpdatedPrimeData | PrimePoolEthRewardsAddedData | PrimePoolEthRewardsSetData | PrimePoolLogPoolAdditionData | PrimePoolLogPoolSetAllocPointData | PrimePoolLogSetPerSecondData | PrimePoolLogUpdatePoolData | PrimePoolRewardDecreaseData | PrimePoolRewardIncreaseData | PrimePoolTimeCachePeriodUpdateData | PrimePoolWithdrawData

"""A Prime pool event type."""
enum PrimePoolEventType {
  CACHE
  CACHING_PAUSED
  CLAIM
  EMERGENCY_WITHDRAW
  END_TIMESTAMP_UPDATED
  ETH_REWARDS_ADDED
  ETH_REWARDS_SET
  LOG_POOL_ADDITION
  LOG_POOL_SET_ALLOC_POINT
  LOG_SET_PER_SECOND
  LOG_UPDATE_POOL
  POOL_DISCOVERED
  REWARD_DECREASE
  REWARD_INCREASE
  TIME_CACHE_PERIOD_UPDATED
  WITHDRAW
}

"""Input Type of `PrimePoolQuery`"""
input PrimePoolInput {
  """The address of the pool contract."""
  address: String!
  """The network that the pool is deployed on."""
  networkId: Int!
  """Optional list of pool ids to fetch."""
  poolIds: [String]
}

"""Event-specific data for a Prime pool LogPoolAddition (new Prime pool) transaction."""
type PrimePoolLogPoolAdditionData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The token ID's added to the new Prime pool."""
  tokenIds: [String!]!
}

"""Event-specific data for a Prime pool LogPoolSetAllocPoint transaction."""
type PrimePoolLogPoolSetAllocPointData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The currency type of the event."""
  currency: PrimePoolCurrency!
  """The updated alloc point for the pool (the pool's share of the contract's total rewards)."""
  allocPoint: String!
  """The updated total alloc point for the pool (the sum of all pools' alloc points)."""
  totalAllocPoint: String!
}

"""Event-specific data for a Prime pool LogSetPerSecond transaction."""
type PrimePoolLogSetPerSecondData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The currency type of the event."""
  currency: PrimePoolCurrency!
  """The updated reward per second for the pool."""
  amount: String!
  """The updated reward start timestamp for the pool."""
  startTimestamp: Int!
  """The updated reward end timestamp for the pool."""
  endTimestamp: Int!
  """The updated PRIME reward per second for the pool."""
  primeAmountPerSecond: String
  """The updated ETH reward per second for the pool."""
  ethAmountPerSecond: String
}

"""Event-specific data for a Prime pool LogUpdatePool transaction."""
type PrimePoolLogUpdatePoolData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The timestamp at which rewards were last assigned."""
  lastRewardTimestamp: Int!
  """The total amount of assets cached in the pool (emitted by the event, before the transaction)."""
  supply: String!
  """The total amount of assets cached in the pool (queried from the pool after the transaction)."""
  totalSupply: String!
  """The amount of accumulated rewards per share."""
  accPerShare: String!
  """The currency type of the event."""
  currency: PrimePoolCurrency!
  """The PRIME amount of the pool."""
  primeAmount: String
  """The ETH amount of the pool."""
  ethAmount: String
}

"""Event-specific data for a Prime pool RewardDecrease transaction."""
type PrimePoolRewardDecreaseData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The currency type of the event."""
  currency: PrimePoolCurrency!
  """The amount of rewards decreased."""
  eventAmount: String!
  """The updated total rewards for the pool."""
  updatedAmount: String!
}

"""Event-specific data for a Prime pool RewardIncrease transaction."""
type PrimePoolRewardIncreaseData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The currency type of the event."""
  currency: PrimePoolCurrency!
  """The amount of rewards increased."""
  eventAmount: String!
  """The updated total rewards for the pool."""
  updatedAmount: String!
}

"""Event-specific data for a Prime pool TimeCachePeriodUpdate transaction."""
type PrimePoolTimeCachePeriodUpdateData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The currency type of the event."""
  currency: PrimePoolCurrency!
  """The minimum number of timed cache seconds per ETH reward."""
  timedCachePeriod: String!
}

"""The type of Prime pool caching contract."""
enum PrimePoolType {
  PRIME_REWARDS
  ETH_AND_PRIME_REWARDS
  TIMED_CACHE_ETH_AND_PRIME_REWARDS
}

"""Event-specific data for a Prime pool Withdraw transaction."""
type PrimePoolWithdrawData {
  """The Prime pool event type."""
  type: PrimePoolEventType!
  """The address of the wallet who withdrew."""
  user: String!
  """The amount of assets withdrawn."""
  eventAmount: String!
  """The updated total assets for the pool after the withdrawal."""
  totalSupply: String!
  """The amount of PRIME the user is not eligible for either from having already harvesting or from not caching in the past."""
  userPrimeRewardDebt: String!
  """The amount of ETH the user is not eligible for either from having already harvesting or from not caching in the past."""
  userEthRewardDebt: String!
  """The amount of cached asset the user has in the pool, following the withdrawal."""
  userCachedAmount: String!
}

union ProtocolData = UniswapV4Data | ArenaTradeData

"""The type of publishing for the webhook. If not set, it defaults to `SINGLE`."""
enum PublishingType {
  BATCH
  SINGLE
}

enum QuoteCurrency {
  USD
  TOKEN
}

"""The quote token within the pair."""
enum QuoteToken {
  token0
  token1
}

"""The range of time for a chart."""
input RangeInput {
  start: Int!
  end: Int!
}

"""The order of ranking."""
enum RankingDirection {
  ASC
  DESC
}

"""Raw NFT asset data."""
type RawNftAssetData {
  """An optional image field that may or may not be present on the requested NFT asset smart contract."""
  imageUrl: String
  """An optional image field that may or may not be present on the requested NFT asset smart contract."""
  imageData: String
  """An optional image field that may or may not be present on the requested NFT asset smart contract."""
  animationUrl: String
  """An optional field that may or may not be present on the requested NFT asset smart contract."""
  externalUrl: String
}

"""Webhook conditions for a raw transaction."""
type RawTransactionWebhookCondition {
  """A list of network IDs to listen on."""
  networkId: OneOfNumberCondition
  """The to address to listen for."""
  to: StringEqualsCondition
  """The from address to listen for."""
  from: StringEqualsCondition
  """Trigger the webhook if either the to or the from address matches."""
  toOrFrom: StringEqualsCondition
  """Trigger the webhook if the contains or doesn't contain the specified string."""
  input: StringContainsCondition
  """Do not trigger the webhook if the raw transaction is handled by the TokenPairEvent webhook."""
  ignoreTokenPairEvents: Boolean
  """Do not trigger the webhook if the raw transaction is handled by the NftEvent webhook."""
  ignoreNftEvents: Boolean
}

"""Input conditions for a Raw Transaction webhook."""
input RawTransactionWebhookConditionInput {
  """A list of network IDs to listen on."""
  networkId: OneOfNumberConditionInput
  """The to address to listen for."""
  to: StringEqualsConditionInput
  """The from address to listen for."""
  from: StringEqualsConditionInput
  """Trigger the webhook if either the to or the from address matches."""
  toOrFrom: StringEqualsConditionInput
  """Trigger the webhook if the input contains or doesn't contain the specified string."""
  input: StringContainsConditionInput
  """Do not trigger the webhook if the raw transaction is handled by the TokenPairEvent webhook."""
  ignoreTokenPairEvents: Boolean
  """Do not trigger the webhook if the raw transaction is handled by the NftEvent webhook."""
  ignoreNftEvents: Boolean
}

"""Price data for each supported resolution."""
type ResolutionBarData {
  """1 second resolution."""
  r1S: CurrencyBarData
  """5 second resolution."""
  r5S: CurrencyBarData
  """15 second resolution."""
  r15S: CurrencyBarData
  """30 second resolution."""
  r30S: CurrencyBarData
  """1 minute resolution."""
  r1: CurrencyBarData
  """5 minute resolution."""
  r5: CurrencyBarData
  """15 minute resolution."""
  r15: CurrencyBarData
  """30 minute resolution."""
  r30: CurrencyBarData
  """60 minute resolution."""
  r60: CurrencyBarData
  """4 hour resolution."""
  r240: CurrencyBarData
  """12 hour resolution."""
  r720: CurrencyBarData
  """1 day resolution."""
  r1D: CurrencyBarData
  """1 week resolution."""
  r7D: CurrencyBarData
}

"""Config for retrying failed webhook messages."""
type RetrySettings {
  """The maximum time in seconds that the webhook will retry sending a message"""
  maxTimeElapsed: Int
  """The minimum time in seconds that the webhook will wait before retrying a failed message"""
  minRetryDelay: Int
  """The maximum time in seconds that the webhook will wait before retrying a failed message"""
  maxRetryDelay: Int
  """The maximum number of times the webhook will retry sending a message"""
  maxRetries: Int
}

"""Config input for retrying failed webhook messages."""
input RetrySettingsInput {
  """The maximum time in seconds that the webhook will retry sending a message"""
  maxTimeElapsed: Int
  """The minimum time in seconds that the webhook will wait before retrying a failed message"""
  minRetryDelay: Int
  """The maximum time in seconds that the webhook will wait before retrying a failed message"""
  maxRetryDelay: Int
  """The maximum number of times the webhook will retry sending a message"""
  maxRetries: Int
}

"""Metadata for a sandwich label."""
type SandwichedLabelData {
  """The amount of `token0` drained in the attack."""
  token0DrainedAmount: String
  """The amount of `token1` drained in the attack."""
  token1DrainedAmount: String
}

"""Metadata for a sandwich label."""
type SandwichLabelForEvent {
  """The label type, 'sandwiched'."""
  label: String!
  """The sandwich event label types."""
  sandwichType: SandwichLabelForEventType!
  """The amount of `token0` drained in the attack."""
  token0DrainedAmount: String!
  """The amount of `token1` drained in the attack."""
  token1DrainedAmount: String!
}

"""Sandwich event label types."""
enum SandwichLabelForEventType {
  sandwiched
  frontrun
  backrun
}

"""Social links for a token."""
type SocialLinks {
  bitcointalk: String
  blog: String
  coingecko: String
  coinmarketcap: String
  discord: String
  email: String
  facebook: String
  github: String
  instagram: String
  linkedin: String
  reddit: String
  slack: String
  telegram: String
  twitch: String
  twitter: String
  website: String
  wechat: String
  whitepaper: String
  youtube: String
}

enum SparklineAttribute {
  PRICE
}

"""A value in a sparkline."""
type SparklineValue {
  timestamp: Int!
  value: Float!
}

"""Currency stats."""
input statsCurrency {
  """The volume over the time frame."""
  volume: StatsFilter
  """The volume by fillsource over the time frame."""
  volumeByFillsource: [FillsourceStatsFilter]
  """The volume percentage by fillsource over the time frame."""
  volumePercentByFillsource: [FillsourceStatsFilter]
  """The average sale price in the time frame."""
  average: StatsFilter
  """The opening price for the time frame."""
  open: StatsFilter
  """The closing price for the time frame."""
  close: StatsFilter
  """The lowest sale price in the time frame."""
  lowestSale: StatsFilter
  """The highest sale price in the time frame."""
  highestSale: StatsFilter
}

"""Filter for NFT stats."""
input StatsFilter {
  """The total value for the current window."""
  current: NumberFilter
  """The total value for the previous window."""
  previous: NumberFilter
  """The percent change between the `current` and `previous`."""
  change: NumberFilter
}

"""Numerical stats for an NFT collection over a time frame."""
input statsNonCurrency {
  """The number of mints over the time frame."""
  mints: StatsFilter
  """The number of sales over the time frame."""
  sales: StatsFilter
  """The number of tokens sold over the time frame."""
  tokensSold: StatsFilter
  """The number of transfers over the time frame."""
  transfers: StatsFilter
  """The number of unique buyers over the time frame."""
  uniqueBuyers: StatsFilter
  """The number of unique sellers over the time frame."""
  uniqueSellers: StatsFilter
  """The number of unique wallets (buyers or sellers) over the time frame."""
  uniqueSalesWallets: StatsFilter
  """The number of unique minters over the time frame."""
  uniqueMinters: StatsFilter
}

"""String contains condition."""
type StringContainsCondition {
  """A list of substrings included within the string."""
  contains: [String!]
  """A list of substrings not included within the string."""
  notContains: [String!]
}

"""Input for string contains condition."""
input StringContainsConditionInput {
  """A list of substrings to be included within the string."""
  contains: [String!]
  """A list of substrings not to be included within the string."""
  notContains: [String!]
}

"""String equals condition."""
type StringEqualsCondition {
  """The string to equal."""
  eq: String!
}

"""Input for string equals condition."""
input StringEqualsConditionInput {
  """The string to equal."""
  eq: String!
}

"""Input type of `StringFilter`."""
input StringFilter {
  """Greater than or equal to."""
  gte: String
  """Greater than."""
  gt: String
  """Less than or equal to."""
  lte: String
  """Less than."""
  lt: String
}

"""Event data for a token swap event."""
type SwapEventData {
  """The amount of `token0` involved in the swap. Only applicable for UniswapV3 events."""
  amount0: String
  """The amount of `token0` that was sold. Only applicable for UniswapV2 events."""
  amount0In: String
  """The amount of `token0` that was bought. Only applicable for UniswapV2 events."""
  amount0Out: String
  """The amount of `token1` involved in the swap. Only applicable for UniswapV3 events."""
  amount1: String
  """The amount of `token1` that was sold. Only applicable for UniswapV2 events."""
  amount1In: String
  """The amount of `token1` that was bought. Only applicable for UniswapV2 events."""
  amount1Out: String
  """The amount of `quoteToken` involved in the swap. For example, if `quoteToken` is USDC for a USDC/WETH pair, `amountNonLiquidityToken` would be the amount of USDC involved in the swap."""
  amountNonLiquidityToken: String
  """The price per `quoteToken` at the time of the swap in the network's base token. For example, if `quoteToken` is USDC for a USDC/WETH pair on ETH network, `priceBaseToken` would the price of USDC in ETH."""
  priceBaseToken: String
  """The total amount of `quoteToken` involved in the swap in the network's base token (`amountNonLiquidityToken` x `priceBaseToken`)."""
  priceBaseTokenTotal: String
  """The price per `quoteToken` at the time of the swap in USD. For example, if `quoteToken` is USDC for a USDC/WETH pair on ETH network, `priceBaseToken` would the price of USDC in USD ($1.00)."""
  priceUsd: String
  """The total amount of `quoteToken` involved in the swap in USD (`amountNonLiquidityToken` x `priceUsd`)."""
  priceUsdTotal: String
  """The tick index that the swap occurred in. Only applicable for UniswapV3 events."""
  tick: String
  """The type of token event, `Swap`."""
  type: EventType!
}

"""Event data for swapping an NFT into a pool."""
type SwapNftInPoolEventData {
  """The type of NFT pool event, `SWAP_NFT_IN_POOL`."""
  type: NftPoolEventType!
  """The ID of the token involved in the swap (`address`:`networkId`)."""
  tokenId: String!
  """The updated delta used in the bonding curve."""
  newDelta: String!
  """The fee for the pool in the pool's liquidity token."""
  poolFeeT: String!
  """The protocol fee in the pool's liquidity token."""
  protocolFeeT: String!
  """Metadata for each of the NFTs involved in the swap."""
  nftsTransfered: [NftPoolEventNftTransfer]
  """The updated spot price in the pool's liquidity token."""
  newSpotPriceT: String!
  """The updated price at which the pool is willing to sell an NFT in the pool's liquidity token."""
  newSellPriceT: String!
  """The updated price at which the pool is willing to buy an NFT in the pool's liquidity token."""
  newBuyPriceT: String!
  """The total value of all NFTs involved in the swap in the pool's liquidity token."""
  amountT: String!
  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!
  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for swapping an NFT into a pool."""
type SwapNftInPoolEventDataV2 {
  """The type of NFT pool event, `SWAP_NFT_IN_POOL`."""
  type: NftPoolEventType!
  """The ID of the token involved in the swap (`address`:`networkId`)."""
  tokenId: String!
  """The updated delta used in the bonding curve."""
  newDelta: String!
  """The fee for the pool in the pool's liquidity token."""
  poolFeeT: String!
  """The protocol fee in the pool's liquidity token."""
  protocolFeeT: String!
  """Metadata for each of the NFTs involved in the swap."""
  nftsTransfered: [NftPoolEventNftTransferV2]
  """*New Param*: The list of NFT assets withdrawn. More extensive info than nftTokenIds."""
  nftAssets: [NftAsset]
  """The updated spot price in the pool's liquidity token."""
  newSpotPriceT: String!
  """The updated price at which the pool is willing to sell an NFT in the pool's liquidity token."""
  newSellPriceT: String!
  """The updated price at which the pool is willing to buy an NFT in the pool's liquidity token."""
  newBuyPriceT: String!
  """The total value of all NFTs involved in the swap in the pool's liquidity token."""
  amountT: String!
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!
  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for swapping an NFT out of a pool."""
type SwapNftOutPoolEventData {
  """The type of NFT pool event, `SWAP_NFT_OUT_POOL`."""
  type: NftPoolEventType!
  """The ID of the token involved in the swap (`address`:`networkId`)."""
  tokenId: String!
  """The updated delta used in the bonding curve."""
  newDelta: String!
  """The fee for the pool in the pool's liquidity token."""
  poolFeeT: String!
  """The protocol fee in the pool's liquidity token."""
  protocolFeeT: String!
  """Metadata for each of the NFTs involved in the swap."""
  nftsTransfered: [NftPoolEventNftTransfer]
  """The updated spot price in the pool's liquidity token."""
  newSpotPriceT: String!
  """The updated price at which the pool is willing to sell an NFT in the pool's liquidity token."""
  newSellPriceT: String!
  """The updated price at which the pool is willing to buy an NFT in the pool's liquidity token."""
  newBuyPriceT: String!
  """The total value of all NFTs involved in the swap in the pool's liquidity token."""
  amountT: String!
  """The number of NFTs in the contract after the block has processed."""
  nftTokenBalance: String!
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!
  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Event data for swapping an NFT out of a pool."""
type SwapNftOutPoolEventDataV2 {
  """The type of NFT pool event, `SWAP_NFT_OUT_POOL`."""
  type: NftPoolEventType!
  """The ID of the token involved in the swap (`address`:`networkId`)."""
  tokenId: String!
  """The updated delta used in the bonding curve."""
  newDelta: String!
  """The fee for the pool in the pool's liquidity token."""
  poolFeeT: String!
  """The protocol fee in the pool's liquidity token."""
  protocolFeeT: String!
  """Metadata for each of the NFTs involved in the swap."""
  nftsTransfered: [NftPoolEventNftTransferV2]
  """*New Param*: The list of NFT assets withdrawn. More extensive info than nftTokenIds."""
  nftAssets: [NftAsset]
  """The updated spot price in the pool's liquidity token."""
  newSpotPriceT: String!
  """The updated price at which the pool is willing to sell an NFT in the pool's liquidity token."""
  newSellPriceT: String!
  """The updated price at which the pool is willing to buy an NFT in the pool's liquidity token."""
  newBuyPriceT: String!
  """The total value of all NFTs involved in the swap in the pool's liquidity token."""
  amountT: String!
  """The amount of token in the contract after the block has processed in the pool's liquidity token."""
  tokenBalanceT: String!
  """The ratio of the transaction token to the network's base token."""
  nbtRatio: String!
  """The ratio of the transaction token to USD."""
  usdRatio: String!
}

"""Response returned by `getSymbol`."""
type SymbolResponse {
  """The currencyCode argument passed in (`TOKEN` or `USD`)."""
  currency_code: String!
  """The trading pair. If currencyCode is TOKEN, the base token will be used, otherwise USD."""
  description: String!
  """The symbols of the pair."""
  name: String!
  """The base token symbol."""
  original_currency_code: String!
  """10^n, where n is the number of decimal places the price has. Max 16. Used for charting."""
  pricescale: Float!
  """The ID of the pair (`address:networkId`)."""
  ticker: String!
  """The list of time frames supported for the symbol in other charting endpoints, eg. getBars."""
  supported_resolutions: [String!]!
}

enum SymbolType {
  TOKEN
  POOL
}

"""Token burn event data."""
type TokenBurnEventData {
  """The amount of tokens burned."""
  amount: String!
  """The new total supply for the token."""
  totalSupply: String
  """The new circulating supply for the token."""
  circulatingSupply: String
}

"""Response returned by `filterTokens`."""
type TokenFilterConnection {
  """The list of tokens matching the filter parameters."""
  results: [TokenFilterResult]
  """The number of tokens returned."""
  count: Int
  """Where in the list the server started when returning items."""
  page: Int
}

"""A token matching a set of filter parameters."""
type TokenFilterResult {
  """The unix timestamp for the creation of the token's first pair."""
  createdAt: Int
  """The unix timestamp for the token's last transaction."""
  lastTransaction: Int
  age: Int @deprecated(reason: "Age isn't supported - use createdAt instead")
  """The number of buys in the past 5 minutes."""
  buyCount5m: Int
  """The number of buys in the past hour."""
  buyCount1: Int
  """The number of buys in the past 12 hours."""
  buyCount12: Int
  """The number of buys in the past 24 hours."""
  buyCount24: Int
  """The number of buys in the past 4 hours."""
  buyCount4: Int
  """The percent price change in the past 5 minutes. Decimal format."""
  change5m: String
  """The percent price change in the past hour. Decimal format."""
  change1: String
  """The percent price change in the past 12 hours. Decimal format."""
  change12: String
  """The percent price change in the past 24 hours. Decimal format."""
  change24: String
  """The percent price change in the past 4 hours. Decimal format."""
  change4: String
  """The percent volume change in the past 5 minutes. Decimal format."""
  volumeChange5m: String
  """The percent volume change in the past hour. Decimal format."""
  volumeChange1: String
  """The percent volume change in the past 4 hours. Decimal format."""
  volumeChange4: String
  """The percent volume change in the past 12 hours. Decimal format."""
  volumeChange12: String
  """The percent volume change in the past 24 hours. Decimal format."""
  volumeChange24: String
  """The exchanges the token is listed on."""
  exchanges: [Exchange]
  fdv: String @deprecated(reason: "FDV isn't supported - use marketCap instead")
  """The highest price in USD in the past 5 minutes."""
  high5m: String
  """The highest price in USD in the past hour."""
  high1: String
  """The highest price in USD in the past 12 hours."""
  high12: String
  """The highest price in USD in the past 24 hours."""
  high24: String
  """The highest price in USD in the past 4 hours."""
  high4: String
  """Amount of liquidity in the token's top pair."""
  liquidity: String
  """The token of interest. Can be `token0` or `token1`."""
  quoteToken: String
  """The lowest price in USD in the past 5 minutes."""
  low5m: String
  """The lowest price in USD in the past hour."""
  low1: String
  """The lowest price in USD in the past 12 hours."""
  low12: String
  """The lowest price in USD in the past 24 hours."""
  low24: String
  """The lowest price in USD in the past 4 hours."""
  low4: String
  """The fully diluted market cap."""
  marketCap: String
  """The circulating market cap."""
  circulatingMarketCap: String
  """Metadata for the token's top pair."""
  pair: Pair
  """The token price in USD."""
  priceUSD: String
  """The number of sells in the past 5 minutes."""
  sellCount5m: Int
  """The number of sells in the past hour."""
  sellCount1: Int
  """The number of sells in the past 12 hours."""
  sellCount12: Int
  """The number of sells in the past 24 hours."""
  sellCount24: Int
  """The number of sells in the past 4 hours."""
  sellCount4: Int
  """Metadata for the token."""
  token: EnhancedToken
  """The number of transactions in the past 5 minutes."""
  txnCount5m: Int
  """The number of transactions in the past hour."""
  txnCount1: Int
  """The number of transactions in the past 12 hours."""
  txnCount12: Int
  """The number of transactions in the past 24 hours."""
  txnCount24: Int
  """The number of transactions in the past 4 hours."""
  txnCount4: Int
  """The unique number of buys in the past 5 minutes."""
  uniqueBuys5m: Int
  """The unique number of buys in the past hour."""
  uniqueBuys1: Int
  """The unique number of buys in the past 12 hours."""
  uniqueBuys12: Int
  """The unique number of buys in the past 24 hours."""
  uniqueBuys24: Int
  """The unique number of buys in the past 4 hours."""
  uniqueBuys4: Int
  """The unique number of sells in the past 5 minutes."""
  uniqueSells5m: Int
  """The unique number of sells in the past hour."""
  uniqueSells1: Int
  """The unique number of sells in the past 12 hours."""
  uniqueSells12: Int
  """The unique number of sells in the past 24 hours."""
  uniqueSells24: Int
  """The unique number of sells in the past 4 hours."""
  uniqueSells4: Int
  """The unique number of transactions in the past 5 minutes."""
  uniqueTransactions5m: Int
  """The unique number of transactions in the past hour."""
  uniqueTransactions1: Int
  """The unique number of transactions in the past 12 hours."""
  uniqueTransactions12: Int
  """The unique number of transactions in the past 24 hours."""
  uniqueTransactions24: Int
  """The unique number of transactions in the past 4 hours."""
  uniqueTransactions4: Int
  """The trade volume in USD in the past hour."""
  volume1: String
  """The trade volume in USD in the past 5 minutes."""
  volume5m: String
  """The trade volume in USD in the past 12 hours."""
  volume12: String
  """The trade volume in USD in the past 24 hours."""
  volume24: String
  """The trade volume in USD in the past 4 hours."""
  volume4: String
  """The buy volume in USD in the past hour."""
  buyVolume1: String
  """The buy volume in USD in the past 12 hours."""
  buyVolume12: String
  """The buy volume in USD in the past 24 hours."""
  buyVolume24: String
  """The buy volume in USD in the past 4 hours."""
  buyVolume4: String
  """The buy volume in USD in the past 5 minutes."""
  buyVolume5m: String
  """The sell volume in USD in the past hour."""
  sellVolume1: String
  """The sell volume in USD in the past 12 hours."""
  sellVolume12: String
  """The sell volume in USD in the past 24 hours."""
  sellVolume24: String
  """The sell volume in USD in the past 4 hours."""
  sellVolume4: String
  """The sell volume in USD in the past 5 minutes."""
  sellVolume5m: String
  """Whether the token has been flagged as a scam."""
  isScam: Boolean
  """The number of different wallets holding the token."""
  holders: Int
  """The average age of the wallets that traded in the last 24h"""
  walletAgeAvg: String
  """The standard deviation of age of the wallets that traded in the last 24h"""
  walletAgeStd: String
  """The percentage of wallets that are less than 1d old that have traded in the last 24h"""
  swapPct1dOldWallet: String
  """The percentage of wallets that are less than 7d old that have traded in the last 24h"""
  swapPct7dOldWallet: String
}

"""Input type of `TokenFilters`."""
input TokenFilters {
  """The unix timestamp for the creation of the token's first pair."""
  createdAt: NumberFilter
  """The unix timestamp for the token's last transaction."""
  lastTransaction: NumberFilter
  age: NumberFilter @deprecated(reason: "Age isn't supported - use createdAt instead")
  """The number of buys in the past 5 minutes."""
  buyCount5m: NumberFilter
  """The number of buys in the past hour."""
  buyCount1: NumberFilter
  """The number of buys in the past 12 hours."""
  buyCount12: NumberFilter
  """The number of buys in the past 24 hours."""
  buyCount24: NumberFilter
  """The number of buys in the past 4 hours."""
  buyCount4: NumberFilter
  """The percent price change in the past 5 minutes. Decimal format."""
  change5m: NumberFilter
  """The percent price change in the past hour. Decimal format."""
  change1: NumberFilter
  """The percent price change in the past 12 hours. Decimal format."""
  change12: NumberFilter
  """The percent price change in the past 24 hours. Decimal format."""
  change24: NumberFilter
  """The percent price change in the past 4 hours. Decimal format."""
  change4: NumberFilter
  """The percent volume change in the past 5 minutes. Decimal format."""
  volumeChange5m: NumberFilter
  """The percent volume change in the past hour. Decimal format."""
  volumeChange1: NumberFilter
  """The percent volume change in the past 4 hours. Decimal format."""
  volumeChange4: NumberFilter
  """The percent volume change in the past 12 hours. Decimal format."""
  volumeChange12: NumberFilter
  """The percent volume change in the past 24 hours. Decimal format."""
  volumeChange24: NumberFilter
  """The list of exchange contract IDs to filter by. Applied in conjunction with `network` filter using an OR condition. When used together, the query returns results that match either the specified exchanges or the specified network."""
  exchangeId: [String]
  """The list of exchange contract addresses to filter by."""
  exchangeAddress: [String]
  fdv: NumberFilter @deprecated(reason: "FDV isn't supported - use marketCap instead")
  """The highest price in USD in the past 5 minutes."""
  high5m: NumberFilter
  """The highest price in USD in the past hour."""
  high1: NumberFilter
  """The highest price in USD in the past 12 hours."""
  high12: NumberFilter
  """The highest price in USD in the past 24 hours."""
  high24: NumberFilter
  """The highest price in USD in the past 4 hours."""
  high4: NumberFilter
  """The amount of liquidity in the token's top pair."""
  liquidity: NumberFilter
  """The lowest price in USD in the past hour."""
  low1: NumberFilter
  """The lowest price in USD in the past 5 minutes."""
  low5m: NumberFilter
  """The lowest price in USD in the past 12 hours."""
  low12: NumberFilter
  """The lowest price in USD in the past 24 hours."""
  low24: NumberFilter
  """The lowest price in USD in the past 4 hours."""
  low4: NumberFilter
  """The market cap of circulating supply."""
  marketCap: NumberFilter
  """The circulating market cap."""
  circulatingMarketCap: NumberFilter
  """The list of network IDs to filter by. Applied in conjunction with `exchangeId` filter using an OR condition. When used together, the query returns results that match either the specified exchanges or the specified network."""
  network: [Int]
  """The number of different wallets holding the token."""
  holders: NumberFilter
  """The token price in USD."""
  priceUSD: NumberFilter
  """The number of sells in the past hour."""
  sellCount1: NumberFilter
  """The number of sells in the past 5 minutes."""
  sellCount5m: NumberFilter
  """The number of sells in the past 12 hours."""
  sellCount12: NumberFilter
  """The number of sells in the past 24 hours."""
  sellCount24: NumberFilter
  """The number of sells in the past 4 hours."""
  sellCount4: NumberFilter
  """The number of transactions in the past 5 minutes."""
  txnCount5m: NumberFilter
  """The number of transactions in the past hour."""
  txnCount1: NumberFilter
  """The number of transactions in the past 12 hours."""
  txnCount12: NumberFilter
  """The number of transactions in the past 24 hours."""
  txnCount24: NumberFilter
  """The number of transactions in the past 4 hours."""
  txnCount4: NumberFilter
  """The unique number of buys in the past hour."""
  uniqueBuys1: NumberFilter
  """The unique number of buys in the past 5 minutes."""
  uniqueBuys5m: NumberFilter
  """The unique number of buys in the past 12 hours."""
  uniqueBuys12: NumberFilter
  """The unique number of buys in the past 24 hours."""
  uniqueBuys24: NumberFilter
  """The unique number of buys in the past 4 hours."""
  uniqueBuys4: NumberFilter
  """The unique number of sells in the past 5 minutes."""
  uniqueSells5m: NumberFilter
  """The unique number of sells in the past hour."""
  uniqueSells1: NumberFilter
  """The unique number of sells in the past 12 hours."""
  uniqueSells12: NumberFilter
  """The unique number of sells in the past 24 hours."""
  uniqueSells24: NumberFilter
  """The unique number of sells in the past 4 hours."""
  uniqueSells4: NumberFilter
  """The unique number of transactions in the past hour."""
  uniqueTransactions1: NumberFilter
  """The unique number of transactions in the past 5 minutes."""
  uniqueTransactions5m: NumberFilter
  """The unique number of transactions in the past 12 hours."""
  uniqueTransactions12: NumberFilter
  """The unique number of transactions in the past 24 hours."""
  uniqueTransactions24: NumberFilter
  """The unique number of transactions in the past 4 hours."""
  uniqueTransactions4: NumberFilter
  """The trade volume in USD in the past hour."""
  volume1: NumberFilter
  """The trade volume in USD in the past 12 hours."""
  volume12: NumberFilter
  """The trade volume in USD in the past 24 hours."""
  volume24: NumberFilter
  """The trade volume in USD in the past 4 hours."""
  volume4: NumberFilter
  """The trade volume in USD in the past 5 minutes."""
  volume5m: NumberFilter
  """The buy volume in USD in the past hour."""
  buyVolume1: NumberFilter
  """The buy volume in USD in the past 12 hours."""
  buyVolume12: NumberFilter
  """The buy volume in USD in the past 24 hours."""
  buyVolume24: NumberFilter
  """The buy volume in USD in the past 4 hours."""
  buyVolume4: NumberFilter
  """The buy volume in USD in the past 5 minutes."""
  buyVolume5m: NumberFilter
  """The sell volume in USD in the past hour."""
  sellVolume1: NumberFilter
  """The sell volume in USD in the past 12 hours."""
  sellVolume12: NumberFilter
  """The sell volume in USD in the past 24 hours."""
  sellVolume24: NumberFilter
  """The sell volume in USD in the past 4 hours."""
  sellVolume4: NumberFilter
  """The sell volume in USD in the past 5 minutes."""
  sellVolume5m: NumberFilter
  """Whether to include tokens that have been flagged as scams. Default: false"""
  includeScams: Boolean
  """Whether to filter for tokens on testnet networks. Use `true` for testnet tokens only, `false` for mainnet tokens only and `undefined` (default) for both."""
  isTestnet: Boolean
  """Only include verified tokens"""
  isVerified: Boolean
  """Filter potential Scams"""
  potentialScam: Boolean
  """Whether to ignore pairs/tokens not relevant to trending. This is done checking against a few factors and ignoring uninteresting tokens like stables / network tokens. If you want all tokens regardless of these checks, then don't include this field. (default) If you want only tokens that fail the trending ignore checks, then set it to `true`. (i.e. stablecoins, rugs, network base tokens) If you want only tokens that pass the trending ignore checks, then set it to `false`."""
  trendingIgnored: Boolean
  """The address of the creator of the token"""
  creatorAddress: String
  """The launchpad protocol"""
  launchpadProtocol: String
  """The name of the launchpad. One of the following: Pump.fun, Bonk, Baseapp, Zora, Zora Creator, Four.meme, Believe, Moonshot, Jupiter Studio, boop, ArenaTrade, Moonit, LaunchLab, MeteoraDBC, Vertigo, Cooking.City, time.fun, BAGS, Circus, Dealr, OhFuckFun, PrintFun, Trend, shout.fun, xApple, Sendshot, DubDub, cults."""
  launchpadName: String
  """Indicates if the launchpad is completed"""
  launchpadCompleted: Boolean
  """Indicates if the launchpad has migrated"""
  launchpadMigrated: Boolean
  """The graduation percentage"""
  launchpadGraduationPercent: NumberFilter
  """The timestamp when the launchpad was completed"""
  launchpadCompletedAt: NumberFilter
  """The timestamp when the launchpad was migrated"""
  launchpadMigratedAt: NumberFilter
  """The token in freezable"""
  freezable: Boolean
  """The token in mintable"""
  mintable: Boolean
  """The average age of the wallets that traded in the last 24h"""
  walletAgeAvg: NumberFilter
  """The standard deviation of age of the wallets that traded in the last 24h"""
  walletAgeStd: NumberFilter
  """The percentage of wallets that are less than 1d old that have traded in the last 24h"""
  swapPct1dOldWallet: NumberFilter
  """The percentage of wallets that are less than 7d old that have traded in the last 24h"""
  swapPct7dOldWallet: NumberFilter
}

"""Metadata for a token."""
type TokenInfo {
  """Uniquely identifies the token."""
  id: String!
  """The contract address of the token."""
  address: String!
  """The circulating supply of the token."""
  circulatingSupply: String
  """The token ID on CoinMarketCap."""
  cmcId: Int
  """Whether the token has been flagged as a scam."""
  isScam: Boolean
  """The token name. For example, `ApeCoin`."""
  name: String
  """The network ID the token is deployed on."""
  networkId: Int!
  """The token symbol. For example, `APE`."""
  symbol: String!
  """The total supply of the token."""
  totalSupply: String
  """The thumbnail token logo URL."""
  imageThumbUrl: String
  """The small token logo URL."""
  imageSmallUrl: String
  """The large token logo URL."""
  imageLargeUrl: String
  """The token banner URL."""
  imageBannerUrl: String
  """A description of the token."""
  description: String
}

"""Input type of `token` and `tokens`."""
input TokenInput {
  """The contract address of the token."""
  address: String!
  """The network ID the token is deployed on."""
  networkId: Int!
}

"""Events that occur during a token's lifecycle. Only Mint and Burn events right now."""
type TokenLifecycleEvent {
  """The token's contract address."""
  tokenAddress: String!
  """The network ID that the token is deployed on."""
  networkId: Int!
  """The hash of the block where the transaction occurred."""
  blockHash: String!
  """The block number for the transaction."""
  blockNumber: Int!
  """The ID of the event (`address:networkId`). For example, `0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:1`."""
  id: String!
  """The index of the log in the block."""
  logIndex: Int!
  """The wallet address that performed the transaction."""
  maker: String
  """The unix timestamp for when the transaction occurred."""
  timestamp: Int!
  """The unique hash for the transaction."""
  transactionHash: String!
  """The index of the transaction within the block."""
  transactionIndex: Int!
  """The type of event."""
  eventType: TokenLifecycleEventType!
  """The event data, depends on the type of event"""
  data: TokenLifecycleEventData!
}

"""Response returned by `tokenLifecycleEvents`."""
type TokenLifecycleEventConnection {
  """A list of transactions for a token's top pair."""
  items: [TokenLifecycleEvent]!
  """A cursor for use in pagination."""
  cursor: String
}

"""Event data for a token's lifecycle."""
union TokenLifecycleEventData = TokenBurnEventData | TokenMintEventData

"""Input type of `tokenLifecycleEvents` query."""
input TokenLifecycleEventsQueryInput {
  """The token contract address to filter by."""
  address: String!
  """The networkId to filter by."""
  networkId: Int!
}

"""Event types for a token. Mint or Burn."""
enum TokenLifecycleEventType {
  MINT
  BURN
}

"""Token mint event data."""
type TokenMintEventData {
  """The amount of tokens minted."""
  amount: String!
  """The new total supply for the token."""
  totalSupply: String
  """The new circulating supply for the token."""
  circulatingSupply: String
}

"""The token of interest within a pair. Can be `token0` or `token1`."""
enum TokenOfInterest {
  token0
  token1
}

"""Token pair event types."""
enum TokenPairEventType {
  SWAP
  MINT
  BURN
  SYNC
  BUY
  SELL
  COLLECT
  COLLECT_PROTOCOL
}

"""Webhook condition for token pair event type."""
type TokenPairEventTypeCondition {
  """The list of token pair event types."""
  oneOf: [TokenPairEventType!]!
}

"""Input for token pair event type condition."""
input TokenPairEventTypeConditionInput {
  """The list of token event types to equal."""
  oneOf: [TokenPairEventType!]!
}

"""Webhook conditions for a token pair event."""
type TokenPairEventWebhookCondition {
  """The token contract address the webhook is listening for."""
  tokenAddress: StringEqualsCondition
  """The list of network IDs the webhook is listening on."""
  networkId: OneOfNumberCondition
  """The swap values the webhook is listening for."""
  swapValue: ComparisonOperator
  """The maker wallet address the webhook is listening for."""
  maker: StringEqualsCondition
  """The pair contract address the webhook is listening for."""
  pairAddress: StringEqualsCondition
  """The exchange contract address the webhook is listening for."""
  exchangeAddress: StringEqualsCondition
  """The event type the webhook is listening for."""
  eventType: TokenPairEventTypeCondition
}

"""Input conditions for a token pair event webhook."""
input TokenPairEventWebhookConditionInput {
  """A list of network IDs to listen on."""
  networkId: OneOfNumberConditionInput
  """The maker wallet address to listen for."""
  maker: StringEqualsConditionInput
  """The pair contract address to listen for."""
  pairAddress: StringEqualsConditionInput
  """The exchange contract address to listen for."""
  exchangeAddress: StringEqualsConditionInput
  """The token contract address to listen for."""
  tokenAddress: StringEqualsConditionInput
  """The swap values to listen for."""
  swapValue: ComparisonOperatorInput
  """The token event type to listen for."""
  eventType: TokenPairEventTypeConditionInput
}

"""The type of statistics returned. Can be `FILTERED` or `UNFILTERED`."""
enum TokenPairStatisticsType {
  FILTERED
  UNFILTERED
}

"""Input type of `TokenRanking`."""
input TokenRanking {
  """The attribute to rank tokens by."""
  attribute: TokenRankingAttribute
  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""The attribute used to rank tokens."""
enum TokenRankingAttribute {
  createdAt
  lastTransaction
  age @deprecated(reason: "Use createdAt instead")
  buyCount5m
  buyCount1
  buyCount4
  buyCount12
  buyCount24
  change5m
  change1
  change4
  change12
  change24
  volumeChange5m
  volumeChange1
  volumeChange4
  volumeChange12
  volumeChange24
  high5m
  high1
  high4
  high12
  high24
  holders
  notableHolderCount
  liquidity
  low5m
  low1
  low4
  low12
  low24
  marketCap
  circulatingMarketCap
  priceUSD
  sellCount5m
  sellCount1
  sellCount4
  sellCount12
  sellCount24
  trendingScore
  trendingScore5m
  trendingScore1
  trendingScore4
  trendingScore12
  trendingScore24
  txnCount5m
  txnCount1
  txnCount4
  txnCount12
  txnCount24
  uniqueBuys5m
  uniqueBuys1
  uniqueBuys4
  uniqueBuys12
  uniqueBuys24
  uniqueSells5m
  uniqueSells1
  uniqueSells4
  uniqueSells12
  uniqueSells24
  uniqueTransactions5m
  uniqueTransactions1
  uniqueTransactions4
  uniqueTransactions12
  uniqueTransactions24
  volume5m
  volume1
  volume4
  volume12
  volume24
  buyVolume5m
  buyVolume1
  buyVolume4
  buyVolume12
  buyVolume24
  sellVolume5m
  sellVolume1
  sellVolume4
  sellVolume12
  sellVolume24
  launchpadCompletedAt
  launchpadMigratedAt
  graduationPercent
  walletAgeAvg
  walletAgeStd
  swapPct1dOldWallet
  swapPct7dOldWallet
}

"""Response returned by `searchTokens`."""
type TokenSearchResponse {
  """The number of additional high volume results found. Only used if `lowVolumeFilter` is set to `true`."""
  hasMore: Int
  """If `lowVolumeFilter` is set to `true`, the number of additional low volume results found. If `lowVolumeFilter` is set to `false`, the number of additional high and low volume results found."""
  hasMoreLowVolume: Int
  """A list of tokens."""
  tokens: [TokenWithMetadata!]
}

"""A sparkline for a token."""
type TokenSparkline {
  """The token id"""
  id: String!
  """Which attribute the sparkline is charting. Defaults to `PRICE`"""
  attribute: SparklineAttribute
  """List of sparkline values to chart"""
  sparkline: [SparklineValue!]!
}

"""Input type of `tokenSparkline`."""
input TokenSparklineInput {
  """The contract address & networkId of the token, joined by a colon. ex: 0xbe042e9d09cb588331ff911c2b46fd833a3e5bd6:1"""
  ids: [String!]!
}

"""A top trader for a token."""
type TokenTopTrader {
  """The wallet address of the trader."""
  walletAddress: String!
  """The token address."""
  tokenAddress: String!
  """The network ID."""
  networkId: Int!
  """The amount of tokens bought."""
  tokenAmountBought: String!
  """The amount of tokens sold."""
  tokenAmountSold: String!
  """The amount of tokens bought in USD."""
  amountBoughtUsd: String!
  """The amount of tokens sold in USD."""
  amountSoldUsd: String!
  """The volume of tokens bought and sold in USD."""
  volumeUsd: String!
  """The realized profit in USD."""
  realizedProfitUsd: String!
  """The realized profit percentage."""
  realizedProfitPercentage: Float!
  """The single token acquisition cost in USD."""
  singleTokenAcquisitionCostUsd: String!
  """The number of buys."""
  buys: Int!
  """The number of sells."""
  sells: Int!
  """The token balance of the trader."""
  tokenBalance: String!
  """The unix timestamp for the first transaction from this wallet."""
  firstTransactionAt: Int
  """The unix timestamp for the last transaction from this wallet."""
  lastTransactionAt: Int!
}

"""A paginated list of top traders for a token."""
type TokenTopTradersConnection {
  """The token address."""
  tokenAddress: String!
  """The network ID."""
  networkId: Int!
  """The trading period."""
  tradingPeriod: TradingPeriod!
  """The list of top traders."""
  items: [TokenTopTrader]!
  """The offset of the first trader in the connection."""
  offset: Int
}

"""Input arguments for the `tokenTopTraders` query."""
input TokenTopTradersInput {
  """The token address"""
  tokenAddress: String!
  """The network ID"""
  networkId: Int!
  """The trading period"""
  tradingPeriod: TradingPeriod!
  """The number of traders to return"""
  limit: Int
  """Where in the list the server started when returning items"""
  offset: Int
}

"""A connection of wallets matching a filter on a specific token."""
type TokenWalletFilterConnection {
  """The list of wallets matching the filter parameters."""
  results: [TokenWalletFilterResult!]!
  """The number of wallets returned."""
  count: Int!
  """Where in the list the server started when returning items."""
  offset: Int!
}

"""The result for filtering wallets for a token."""
type TokenWalletFilterResult {
  """The wallet address"""
  address: String!
  """The token address"""
  tokenAddress: String!
  """The network ID"""
  networkId: Int!
  """The unix timestamp for the first transaction from this wallet"""
  firstTransactionAt: Int
  """The unix timestamp for the last transaction from this wallet"""
  lastTransactionAt: Int!
  """The labels associated with the wallet"""
  labels: [String!]!
  """Token amount bought in the past day"""
  tokenAmountBought1d: String!
  """Token amount sold in the past day"""
  tokenAmountSold1d: String!
  """Token amount sold all in the past day"""
  tokenAmountSoldAll1d: String!
  """Amount bought in USD in the past day"""
  amountBoughtUsd1d: String!
  """Amount sold in USD in the past day"""
  amountSoldUsd1d: String!
  """Amount sold USD all in the past day"""
  amountSoldUsdAll1d: String!
  """Realized profit in USD in the past day"""
  realizedProfitUsd1d: String!
  """Realized profit percentage in the past day"""
  realizedProfitPercentage1d: Float!
  """Number of buys in the past day"""
  buys1d: Int!
  """Number of sells in the past day"""
  sells1d: Int!
  """Number of sells all in the past day"""
  sellsAll1d: Int!
  """Token amount bought in the past week"""
  tokenAmountBought1w: String!
  """Token amount sold in the past week"""
  tokenAmountSold1w: String!
  """Token amount sold all in the past week"""
  tokenAmountSoldAll1w: String!
  """Amount bought in USD in the past week"""
  amountBoughtUsd1w: String!
  """Amount sold in USD in the past week"""
  amountSoldUsd1w: String!
  """Amount sold USD all in the past week"""
  amountSoldUsdAll1w: String!
  """Realized profit in USD in the past week"""
  realizedProfitUsd1w: String!
  """Realized profit percentage in the past week"""
  realizedProfitPercentage1w: Float!
  """Number of buys in the past week"""
  buys1w: Int!
  """Number of sells in the past week"""
  sells1w: Int!
  """Number of sells all in the past week"""
  sellsAll1w: Int!
  """Token amount bought in the past 30 days"""
  tokenAmountBought30d: String!
  """Token amount sold in the past 30 days"""
  tokenAmountSold30d: String!
  """Token amount sold all in the past 30 days"""
  tokenAmountSoldAll30d: String!
  """Amount bought in USD in the past 30 days"""
  amountBoughtUsd30d: String!
  """Amount sold in USD in the past 30 days"""
  amountSoldUsd30d: String!
  """Amount sold USD all in the past 30 days"""
  amountSoldUsdAll30d: String!
  """Realized profit in USD in the past 30 days"""
  realizedProfitUsd30d: String!
  """Realized profit percentage in the past 30 days"""
  realizedProfitPercentage30d: Float!
  """Number of buys in the past 30 days"""
  buys30d: Int!
  """Number of sells in the past 30 days"""
  sells30d: Int!
  """Number of sells all in the past 30 days"""
  sellsAll30d: Int!
  """Token amount bought in the past year"""
  tokenAmountBought1y: String!
  """Token amount sold in the past year"""
  tokenAmountSold1y: String!
  """Token amount sold all in the past year"""
  tokenAmountSoldAll1y: String!
  """Amount bought in USD in the past year"""
  amountBoughtUsd1y: String!
  """Amount sold in USD in the past year"""
  amountSoldUsd1y: String!
  """Amount sold USD all in the past year"""
  amountSoldUsdAll1y: String!
  """Realized profit in USD in the past year"""
  realizedProfitUsd1y: String!
  """Realized profit percentage in the past year"""
  realizedProfitPercentage1y: Float!
  """Number of buys in the past year"""
  buys1y: Int!
  """Number of sells in the past year"""
  sells1y: Int!
  """Number of sells all in the past year"""
  sellsAll1y: Int!
  """The purchased token balance"""
  purchasedTokenBalance: String!
  """The token acquisition cost in USD"""
  tokenAcquisitionCostUsd: String!
  """The current token balance"""
  tokenBalance: String!
  """The token metadata"""
  token: EnhancedToken!
  """The scammer score for the wallet."""
  scammerScore: Int
  """The bot score for the wallet."""
  botScore: Int
  """The backfill state of the wallet."""
  backfillState: WalletAggregateBackfillState
}

"""A token with metadata."""
type TokenWithMetadata {
  """The contract address of the token."""
  address: String!
  """The precision to which the token can be divided. For example, the smallest unit for USDC is 0.000001 (6 decimals)."""
  decimals: Int
  """The exchanges the token is listed on."""
  exchanges: [Exchange!]!
  """The ID of the token (`address:networkId`). For example, `0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:1`."""
  id: String!
  """The total liquidity of the token's top pair in USD."""
  liquidity: String!
  """The name of the token."""
  name: String!
  """The network ID the token is deployed on."""
  networkId: Int!
  """The token price in USD."""
  price: Float!
  """The percent price change for the time frame requested. Decimal format."""
  priceChange: Float!
  """Whether the token has been flagged as a scam."""
  isScam: Boolean
  """The percent price change in the past hour. Decimal format."""
  priceChange1: Float
  """The percent price change in the past 12 hours. Decimal format."""
  priceChange12: Float
  """The percent price change in the past 24 hours. Decimal format."""
  priceChange24: Float
  """The percent price change in the past 4 hours. Decimal format."""
  priceChange4: Float
  """The token of interest. Can be `token0` or `token1`."""
  quoteToken: QuoteToken
  """The market cap of circulating supply."""
  marketCap: String
  """The number of transactions in the past hour."""
  txnCount1: Int
  """The number of transactions in the past 12 hours."""
  txnCount12: Int
  """The number of transactions in the past 24 hours."""
  txnCount24: Int
  """The number of transactions in the past 4 hours."""
  txnCount4: Int
  """The unique number of buys in the past hour."""
  uniqueBuys1: Int
  """The unique number of buys in the past 12 hours."""
  uniqueBuys12: Int
  """The unique number of buys in the past 24 hours."""
  uniqueBuys24: Int
  """The unique number of buys in the past 4 hours."""
  uniqueBuys4: Int
  """The unique number of sells in the past hour."""
  uniqueSells1: Int
  """The unique number of sells in the past 12 hours."""
  uniqueSells12: Int
  """The unique number of sells in the past 24 hours."""
  uniqueSells24: Int
  """The unique number of sells in the past 4 hours."""
  uniqueSells4: Int
  """The time frame for the results."""
  resolution: String!
  """The symbol for the token."""
  symbol: String!
  """The ID of the token's top pair (`pairAddress:networkId`)."""
  topPairId: String!
  """The volume over the time frame requested in USD."""
  volume: String!
  """The token logo URL."""
  imageThumbUrl: String
  """The token logo URL."""
  imageSmallUrl: String
  """The token logo URL."""
  imageLargeUrl: String
  """The token banner URL."""
  imageBannerUrl: String
  """The unix timestamp for the creation of the token's first pair."""
  createdAt: Int
  """The unix timestamp for the token's last transaction."""
  lastTransaction: Int
}

"""A time period used when calculating wallet trading data."""
enum TradingPeriod {
  DAY
  WEEK
  MONTH
  YEAR
}

"""An unconfirmed token transaction."""
type UnconfirmedEvent {
  """The contract address of the token's top pair."""
  address: String!
  """The hash of the block where the transaction occurred."""
  blockHash: String!
  """The block number for the transaction."""
  blockNumber: Int!
  """The type of transaction event. Can be `Burn`, `Mint`, `Swap`, `Sync`, `Collect`, or `CollectProtocol`."""
  eventType: EventType!
  """The ID of the event (`address:networkId`). For example, `0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:1`."""
  id: String!
  """The index of the log in the block."""
  logIndex: Int!
  """The wallet address that performed the transaction."""
  maker: String
  """The network ID that the token is deployed on."""
  networkId: Int!
  """The token of interest within the token's top pair. Can be `token0` or `token1`."""
  quoteToken: QuoteToken
  """The unix timestamp for when the transaction occurred."""
  timestamp: Int!
  """The unique hash for the transaction."""
  transactionHash: String!
  """The index of the transaction within the block."""
  transactionIndex: Int!
  """A optional unique identifier of where the event is within the transaction."""
  supplementalIndex: Int
  """A more specific breakdown of `eventType`. Splits `Swap` into `Buy` or `Sell`."""
  eventDisplayType: EventDisplayType
  """The event-specific data for the transaction."""
  data: UnconfirmedEventData
}

union UnconfirmedEventData = UnconfirmedSwapEventData | UnconfirmedLiquidityChangeEventData

"""Unconfirmed bar chart data."""
type UnconfirmedIndividualBarData {
  """The opening price."""
  o: Float!
  """The high price."""
  h: Float!
  """The low price."""
  l: Float!
  """The closing price."""
  c: Float!
  """The volume."""
  v: Int
  """The volume with higher precision."""
  volume: String!
  """The timestamp for the bar."""
  t: Int!
}

"""Event data for a token liquidity change event."""
type UnconfirmedLiquidityChangeEventData {
  """The amount of `token0` added or removed from the pair."""
  amount0: String
  """The amount of `token1` added or removed from the pair."""
  amount1: String
  """The amount of `token0` added or removed from the pair, adjusted by the number of decimals in the token. For example, if `amount0` is in WEI, `amount0Shifted` will be in ETH."""
  amount0Shifted: String
  """The amount of `token1` added or removed from the pair, adjusted by the number of decimals in the token. For example, USDC `amount1Shifted` will be by 6 decimals."""
  amount1Shifted: String
  """The type of token event, `Mint` or 'Burn'."""
  type: EventType!
}

"""Unconfirmed price data for each supported resolution."""
type UnconfirmedResolutionBarData {
  """1 second resolution."""
  r1S: UnconfirmedIndividualBarData
  """5 second resolution."""
  r5S: UnconfirmedIndividualBarData
  """15 second resolution."""
  r15S: UnconfirmedIndividualBarData
  """1 minute resolution."""
  r1: UnconfirmedIndividualBarData
  """5 minute resolution."""
  r5: UnconfirmedIndividualBarData
  """15 minute resolution."""
  r15: UnconfirmedIndividualBarData
}

"""Event data for a token swap event."""
type UnconfirmedSwapEventData {
  """The amount of `quoteToken` involved in the swap. For example, if `quoteToken` is USDC for a USDC/WETH pair, `amountNonLiquidityToken` would be the amount of USDC involved in the swap."""
  amountNonLiquidityToken: String
  """The price per `quoteToken` at the time of the swap in the network's base token. For example, if `quoteToken` is USDC for a USDC/WETH pair on ETH network, `priceBaseToken` would the price of USDC in ETH."""
  priceBaseToken: String
  """The total amount of `quoteToken` involved in the swap in the network's base token (`amountNonLiquidityToken` x `priceBaseToken`)."""
  priceBaseTokenTotal: String
  """The price per `quoteToken` at the time of the swap in USD. For example, if `quoteToken` is USDC for a USDC/WETH pair on ETH network, `priceBaseToken` would the price of USDC in USD ($1.00)."""
  priceUsd: String
  """The total amount of `quoteToken` involved in the swap in USD (`amountNonLiquidityToken` x `priceUsd`)."""
  priceUsdTotal: String
  """The type of token event, `Swap`."""
  type: EventType!
  """The amount of `baseToken` involved in the swap"""
  amountBaseToken: String
}

type UniswapV4Data {
  """The address of the hook contract for Uniswap V4 pools."""
  uniswapV4HookAddress: String
  type: String!
}

scalar Void

"""Input arguments for the `backfillWalletAggregates` mutation."""
input WalletAggregateBackfillInput {
  walletAddress: String!
}

"""The state of the wallet backfill."""
enum WalletAggregateBackfillState {
  """Historical stats calculations for this wallet have been successfully processed"""
  BackfillComplete
  """Historical stats calculations for this wallet are being processed"""
  BackfillInProgress
  """Historical stats calculations were started, then canceled for this wallet. It may have been flagged as a bot"""
  BackfillCanceled
  """Historical stats calculations have been blocked for this wallet. It may have been flagged as a bot"""
  BackfillBlocked
  """Historical stats calculations for this wallet are queued and will be processed soon"""
  BackfillRequestReceived
  """Historical stats calculations for this wallet have not been started, nor attempted"""
  BackfillNotFound
}

"""Input arguments for the `walletAggregateBackfillState` mutation."""
input WalletAggregateBackfillStateInput {
  walletAddress: String!
}

"""The response for the `walletAggregateBackfillState` mutation."""
type WalletAggregateBackfillStateResponse {
  walletAddress: String!
  status: WalletAggregateBackfillState!
}

"""The data for a chart of a wallet's activity."""
type WalletChartData {
  """The timestamp"""
  timestamp: Int!
  """The resolution"""
  resolution: String!
  """The volume in USD"""
  volumeUsd: String!
  """The volume in USD including tokens sold for which we do not have a price"""
  volumeUsdAll: String!
  """The realized profit in USD"""
  realizedProfitUsd: String!
  """The number of swaps"""
  swaps: Int!
}

"""The input for a chart of a wallet's activity."""
input WalletChartInput {
  """The wallet address"""
  walletAddress: String!
  """The network ID"""
  networkId: Int
  """The range of time for the chart"""
  range: RangeInput!
  """The time frame for each candle. Available options are `1S`, `5S`, `15S`, `30S`, `1`, `5`, `15`, `30`, `60`, `240`, `720`, `1D`, `7D`."""
  resolution: String!
}

"""The range of time for a chart."""
type WalletChartRange {
  start: Int!
  end: Int!
}

"""The response for a chart of a wallet's activity."""
type WalletChartResponse {
  """The wallet address"""
  walletAddress: String!
  """The network ID"""
  networkId: Int
  """The range of time for the chart"""
  range: WalletChartRange!
  """The resolution of the chart"""
  resolution: String!
  """The data for the chart"""
  data: [WalletChartData!]!
  """The backfill state of the wallet."""
  backfillState: WalletAggregateBackfillState
}

"""A connection of wallets matching a filter."""
type WalletFilterConnection {
  """The list of wallets matching the filter parameters."""
  results: [WalletFilterResult!]!
  """The number of wallets returned."""
  count: Int!
  """Where in the list the server started when returning items."""
  offset: Int!
}

"""A wallet matching a filter."""
type WalletFilterResult {
  """The wallet address"""
  address: String!
  """The network ID of the wallet (only present if filtered by network)"""
  networkId: Int
  """The unix timestamp for the first transaction from this wallet"""
  firstTransactionAt: Int
  """The unix timestamp for the last transaction from this wallet"""
  lastTransactionAt: Int!
  """The labels associated with the wallet"""
  labels: [String!]!
  """Volume in USD in the past day"""
  volumeUsd1d: String!
  """Total volume in USD in the past day including all tokens"""
  volumeUsdAll1d: String!
  """Realized profit in USD in the past day"""
  realizedProfitUsd1d: String!
  """Average profit in USD per trade in the past day"""
  averageProfitUsdPerTrade1d: String!
  """Average swap amount in USD in the past day"""
  averageSwapAmountUsd1d: String!
  """Realized profit percentage in the past day"""
  realizedProfitPercentage1d: Float!
  """Number of swaps in the past day"""
  swaps1d: Int!
  """Total number of swaps in the past day including all tokens"""
  swapsAll1d: Int!
  """Number of unique tokens traded in the past day"""
  uniqueTokens1d: Int!
  """Win rate in the past day"""
  winRate1d: Float!
  """Volume in USD in the past week"""
  volumeUsd1w: String!
  """Total volume in USD in the past week including all tokens"""
  volumeUsdAll1w: String!
  """Realized profit in USD in the past week"""
  realizedProfitUsd1w: String!
  """Average profit in USD per trade in the past week"""
  averageProfitUsdPerTrade1w: String!
  """Average swap amount in USD in the past week"""
  averageSwapAmountUsd1w: String!
  """Realized profit percentage in the past week"""
  realizedProfitPercentage1w: Float!
  """Number of swaps in the past week"""
  swaps1w: Int!
  """Total number of swaps in the past week including all tokens"""
  swapsAll1w: Int!
  """Number of unique tokens traded in the past week"""
  uniqueTokens1w: Int!
  """Win rate in the past week"""
  winRate1w: Float!
  """Volume in USD in the past 30 days"""
  volumeUsd30d: String!
  """Total volume in USD in the past 30 days including all tokens"""
  volumeUsdAll30d: String!
  """Realized profit in USD in the past 30 days"""
  realizedProfitUsd30d: String!
  """Average profit in USD per trade in the past 30 days"""
  averageProfitUsdPerTrade30d: String!
  """Average swap amount in USD in the past 30 days"""
  averageSwapAmountUsd30d: String!
  """Realized profit percentage in the past 30 days"""
  realizedProfitPercentage30d: Float!
  """Number of swaps in the past 30 days"""
  swaps30d: Int!
  """Total number of swaps in the past 30 days including all tokens"""
  swapsAll30d: Int!
  """Number of unique tokens traded in the past 30 days"""
  uniqueTokens30d: Int!
  """Win rate in the past 30 days"""
  winRate30d: Float!
  """Volume in USD in the past year"""
  volumeUsd1y: String!
  """Total volume in USD in the past year including all tokens"""
  volumeUsdAll1y: String!
  """Realized profit in USD in the past year"""
  realizedProfitUsd1y: String!
  """Average profit in USD per trade in the past year"""
  averageProfitUsdPerTrade1y: String!
  """Average swap amount in USD in the past year"""
  averageSwapAmountUsd1y: String!
  """Realized profit percentage in the past year"""
  realizedProfitPercentage1y: Float!
  """Number of swaps in the past year"""
  swaps1y: Int!
  """Total number of swaps in the past year including all tokens"""
  swapsAll1y: Int!
  """Number of unique tokens traded in the past year"""
  uniqueTokens1y: Int!
  """Win rate in the past year"""
  winRate1y: Float!
  """The scammer score for the wallet."""
  scammerScore: Int
  """The bot score for the wallet."""
  botScore: Int
  """The native token balance of the wallet (only present if filtered by network)"""
  nativeTokenBalance: String
  """The backfill state of the wallet."""
  backfillState: WalletAggregateBackfillState
}

"""Filters for a wallet."""
input WalletFilters {
  """The unix timestamp for the last transaction from this wallet."""
  lastTransactionAt: NumberFilter
  """The unix timestamp for the first transaction from this wallet."""
  firstTransactionAt: NumberFilter
  """Volume in USD in the past day"""
  volumeUsd1d: NumberFilter
  """Total volume in USD in the past day including all tokens"""
  volumeUsdAll1d: NumberFilter
  """Realized profit in USD in the past day"""
  realizedProfitUsd1d: NumberFilter
  """Average profit in USD per trade in the past day"""
  averageProfitUsdPerTrade1d: NumberFilter
  """Average swap amount in USD in the past day"""
  averageSwapAmountUsd1d: NumberFilter
  """Realized profit percentage in the past day"""
  realizedProfitPercentage1d: NumberFilter
  """Number of swaps in the past day"""
  swaps1d: NumberFilter
  """Total number of swaps in the past day including all tokens"""
  swapsAll1d: NumberFilter
  """Number of unique tokens traded in the past day"""
  uniqueTokens1d: NumberFilter
  """Win rate in the past day"""
  winRate1d: NumberFilter
  """Volume in USD in the past week"""
  volumeUsd1w: NumberFilter
  """Total volume in USD in the past week including all tokens"""
  volumeUsdAll1w: NumberFilter
  """Realized profit in USD in the past week"""
  realizedProfitUsd1w: NumberFilter
  """Average profit in USD per trade in the past week"""
  averageProfitUsdPerTrade1w: NumberFilter
  """Average swap amount in USD in the past week"""
  averageSwapAmountUsd1w: NumberFilter
  """Realized profit percentage in the past week"""
  realizedProfitPercentage1w: NumberFilter
  """Number of swaps in the past week"""
  swaps1w: NumberFilter
  """Total number of swaps in the past week including all tokens"""
  swapsAll1w: NumberFilter
  """Number of unique tokens traded in the past week"""
  uniqueTokens1w: NumberFilter
  """Win rate in the past week"""
  winRate1w: NumberFilter
  """Volume in USD in the past 30 days"""
  volumeUsd30d: NumberFilter
  """Total volume in USD in the past 30 days including all tokens"""
  volumeUsdAll30d: NumberFilter
  """Realized profit in USD in the past 30 days"""
  realizedProfitUsd30d: NumberFilter
  """Average profit in USD per trade in the past 30 days"""
  averageProfitUsdPerTrade30d: NumberFilter
  """Average swap amount in USD in the past 30 days"""
  averageSwapAmountUsd30d: NumberFilter
  """Realized profit percentage in the past 30 days"""
  realizedProfitPercentage30d: NumberFilter
  """Number of swaps in the past 30 days"""
  swaps30d: NumberFilter
  """Total number of swaps in the past 30 days including all tokens"""
  swapsAll30d: NumberFilter
  """Number of unique tokens traded in the past 30 days"""
  uniqueTokens30d: NumberFilter
  """Win rate in the past 30 days"""
  winRate30d: NumberFilter
  """Volume in USD in the past year"""
  volumeUsd1y: NumberFilter
  """Total volume in USD in the past year including all tokens"""
  volumeUsdAll1y: NumberFilter
  """Realized profit in USD in the past year"""
  realizedProfitUsd1y: NumberFilter
  """Average profit in USD per trade in the past year"""
  averageProfitUsdPerTrade1y: NumberFilter
  """Average swap amount in USD in the past year"""
  averageSwapAmountUsd1y: NumberFilter
  """Realized profit percentage in the past year"""
  realizedProfitPercentage1y: NumberFilter
  """Number of swaps in the past year"""
  swaps1y: NumberFilter
  """Total number of swaps in the past year including all tokens"""
  swapsAll1y: NumberFilter
  """Number of unique tokens traded in the past year"""
  uniqueTokens1y: NumberFilter
  """Win rate in the past year"""
  winRate1y: NumberFilter
  """The scammer score for the wallet."""
  scammerScore: NumberFilter
  """The bot score for the wallet."""
  botScore: NumberFilter
  """The network ID to filter by."""
  networkId: Int
  """The native token balance of the wallet. Can only be used in conjunction with `networkId` filter."""
  nativeTokenBalance: NumberFilter
}

"""Wallet labels. Used for filtering wallets with `includeLabels` and `excludeLabels`."""
enum WalletLabel {
  """Wallet is interesting (based on a number of factors)."""
  INTERESTING
  """Wallet holds $5M+ in assets."""
  MEDIUM_WEALTHY
  """Wallet holds $10M+ in assets."""
  MEGA_WEALTHY
  """Wallet has made over $7.5K profit in the last 90 days trading tokens that are older than 2 days."""
  SMART_TRADER_TOKENS_OVER_TWO_DAYS_OLD
  """Wallet has made over $5K profit in the last 90 days trading tokens that are between 1 hour and 2 days old."""
  SMART_TRADER_TOKENS_UNDER_TWO_DAYS_OLD
  """Wallet has made over $3K profit in the last 90 days trading tokens that were launched within their first hour."""
  SNIPER
  """Wallet holds $1M+ in assets."""
  WEALTHY
}

"""Filters for a wallet on a specific network."""
input WalletNetworkFilters {
  """The unix timestamp for the last transaction from this wallet."""
  lastTransactionAt: NumberFilter
  """The unix timestamp for the first transaction from this wallet."""
  firstTransactionAt: NumberFilter
  """Volume in USD in the past day"""
  volumeUsd1d: NumberFilter
  """Total volume in USD in the past day including all tokens"""
  volumeUsdAll1d: NumberFilter
  """Realized profit in USD in the past day"""
  realizedProfitUsd1d: NumberFilter
  """Average profit in USD per trade in the past day"""
  averageProfitUsdPerTrade1d: NumberFilter
  """Average swap amount in USD in the past day"""
  averageSwapAmountUsd1d: NumberFilter
  """Realized profit percentage in the past day"""
  realizedProfitPercentage1d: NumberFilter
  """Number of swaps in the past day"""
  swaps1d: NumberFilter
  """Total number of swaps in the past day including all tokens"""
  swapsAll1d: NumberFilter
  """Number of unique tokens traded in the past day"""
  uniqueTokens1d: NumberFilter
  """Win rate in the past day"""
  winRate1d: NumberFilter
  """Volume in USD in the past week"""
  volumeUsd1w: NumberFilter
  """Total volume in USD in the past week including all tokens"""
  volumeUsdAll1w: NumberFilter
  """Realized profit in USD in the past week"""
  realizedProfitUsd1w: NumberFilter
  """Average profit in USD per trade in the past week"""
  averageProfitUsdPerTrade1w: NumberFilter
  """Average swap amount in USD in the past week"""
  averageSwapAmountUsd1w: NumberFilter
  """Realized profit percentage in the past week"""
  realizedProfitPercentage1w: NumberFilter
  """Number of swaps in the past week"""
  swaps1w: NumberFilter
  """Total number of swaps in the past week including all tokens"""
  swapsAll1w: NumberFilter
  """Number of unique tokens traded in the past week"""
  uniqueTokens1w: NumberFilter
  """Win rate in the past week"""
  winRate1w: NumberFilter
  """Volume in USD in the past 30 days"""
  volumeUsd30d: NumberFilter
  """Total volume in USD in the past 30 days including all tokens"""
  volumeUsdAll30d: NumberFilter
  """Realized profit in USD in the past 30 days"""
  realizedProfitUsd30d: NumberFilter
  """Average profit in USD per trade in the past 30 days"""
  averageProfitUsdPerTrade30d: NumberFilter
  """Average swap amount in USD in the past 30 days"""
  averageSwapAmountUsd30d: NumberFilter
  """Realized profit percentage in the past 30 days"""
  realizedProfitPercentage30d: NumberFilter
  """Number of swaps in the past 30 days"""
  swaps30d: NumberFilter
  """Total number of swaps in the past 30 days including all tokens"""
  swapsAll30d: NumberFilter
  """Number of unique tokens traded in the past 30 days"""
  uniqueTokens30d: NumberFilter
  """Win rate in the past 30 days"""
  winRate30d: NumberFilter
  """Volume in USD in the past year"""
  volumeUsd1y: NumberFilter
  """Total volume in USD in the past year including all tokens"""
  volumeUsdAll1y: NumberFilter
  """Realized profit in USD in the past year"""
  realizedProfitUsd1y: NumberFilter
  """Average profit in USD per trade in the past year"""
  averageProfitUsdPerTrade1y: NumberFilter
  """Average swap amount in USD in the past year"""
  averageSwapAmountUsd1y: NumberFilter
  """Realized profit percentage in the past year"""
  realizedProfitPercentage1y: NumberFilter
  """Number of swaps in the past year"""
  swaps1y: NumberFilter
  """Total number of swaps in the past year including all tokens"""
  swapsAll1y: NumberFilter
  """Number of unique tokens traded in the past year"""
  uniqueTokens1y: NumberFilter
  """Win rate in the past year"""
  winRate1y: NumberFilter
  """The native token balance of the wallet."""
  nativeTokenBalance: NumberFilter
  """The scammer score for the wallet. Indicates the likelihood of the wallet being a scammer. Zero being not a scammer and 100 being a definite scammer."""
  scammerScore: NumberFilter
  """The bot score for the wallet. Indicates the likelihood of the wallet being a bot. Zero being not a bot and 100 being a definite bot."""
  botScore: NumberFilter
}

"""A wallet ranking on a specific network."""
input WalletNetworkRanking {
  """The attribute to rank wallets by."""
  attribute: WalletNetworkRankingAttribute
  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""Attributes for a wallet ranking on a specific network."""
enum WalletNetworkRankingAttribute {
  firstTransactionAt
  lastTransactionAt
  volumeUsd1d
  volumeUsdAll1d
  realizedProfitUsd1d
  averageProfitUsdPerTrade1d
  averageSwapAmountUsd1d
  realizedProfitPercentage1d
  swaps1d
  swapsAll1d
  uniqueTokens1d
  winRate1d
  volumeUsd1w
  volumeUsdAll1w
  realizedProfitUsd1w
  averageProfitUsdPerTrade1w
  averageSwapAmountUsd1w
  realizedProfitPercentage1w
  swaps1w
  swapsAll1w
  uniqueTokens1w
  winRate1w
  volumeUsd30d
  volumeUsdAll30d
  realizedProfitUsd30d
  averageProfitUsdPerTrade30d
  averageSwapAmountUsd30d
  realizedProfitPercentage30d
  swaps30d
  swapsAll30d
  uniqueTokens30d
  winRate30d
  volumeUsd1y
  volumeUsdAll1y
  realizedProfitUsd1y
  averageProfitUsdPerTrade1y
  averageSwapAmountUsd1y
  realizedProfitPercentage1y
  swaps1y
  swapsAll1y
  uniqueTokens1y
  winRate1y
  nativeTokenBalance
  scammerScore
  botScore
}

type WalletNftCollection {
  """The address of the wallet."""
  walletAddress: String!
  """The collection ID (`collectionAddress:networkId`)."""
  collectionId: String!
  """The number of items held by the wallet."""
  quantity: String!
}

type WalletNftCollectionAsset {
  """The id of the nft asset."""
  tokenId: String!
  """The number of instances of the nft held by the wallet (Applicable to ERC1155 NFTs)."""
  quantity: String!
}

input WalletNftCollectionAssetsInput {
  """The address of the wallet."""
  walletAddress: String!
  """The collection ID (`collectionAddress:networkId`)."""
  collectionId: String!
  """A cursor for use in pagination."""
  cursor: String
}

type WalletNftCollectionAssetsResponse {
  """The list of nft assets for a wallet."""
  items: [WalletNftCollectionAsset]!
  """The address of the wallet."""
  walletAddress: String!
  """The collection ID (`collectionAddress:networkId`)."""
  collectionId: String!
  """A cursor for use in pagination."""
  cursor: String
}

input WalletNftCollectionsInput {
  """The address of the wallet."""
  walletAddress: String!
  """A cursor for use in pagination."""
  cursor: String
}

type WalletNftCollectionsResponse {
  """The list of collections for a wallet."""
  items: [WalletNftCollection!]!
  """A cursor for use in pagination."""
  cursor: String
}

"""A wallet ranking."""
input WalletRanking {
  """The attribute to rank wallets by."""
  attribute: WalletRankingAttribute
  """The direction to apply to the ranking attribute."""
  direction: RankingDirection
}

"""Attributes for a wallet ranking."""
enum WalletRankingAttribute {
  firstTransactionAt
  lastTransactionAt
  volumeUsd1d
  volumeUsdAll1d
  realizedProfitUsd1d
  averageProfitUsdPerTrade1d
  averageSwapAmountUsd1d
  realizedProfitPercentage1d
  swaps1d
  swapsAll1d
  uniqueTokens1d
  winRate1d
  volumeUsd1w
  volumeUsdAll1w
  realizedProfitUsd1w
  averageProfitUsdPerTrade1w
  averageSwapAmountUsd1w
  realizedProfitPercentage1w
  swaps1w
  swapsAll1w
  uniqueTokens1w
  winRate1w
  volumeUsd30d
  volumeUsdAll30d
  realizedProfitUsd30d
  averageProfitUsdPerTrade30d
  averageSwapAmountUsd30d
  realizedProfitPercentage30d
  swaps30d
  swapsAll30d
  uniqueTokens30d
  winRate30d
  volumeUsd1y
  volumeUsdAll1y
  realizedProfitUsd1y
  averageProfitUsdPerTrade1y
  averageSwapAmountUsd1y
  realizedProfitPercentage1y
  swaps1y
  swapsAll1y
  uniqueTokens1y
  winRate1y
  nativeTokenBalance
  scammerScore
  botScore
}

"""The period the wallet stats are for."""
enum WalletStatsDuration {
  year1
  day30
  week1
  day1
}

"""A range for a wallet token filter."""
input WalletTokenFilterRange {
  """The minimum value (inclusive)"""
  min: String
  """The maximum value (inclusive)"""
  max: String
}

"""Filters for a wallet on a specific token."""
input WalletTokenFilters {
  """Filter by last transaction timestamp"""
  lastTransactionAt: WalletTokenFilterRange
  """Filter by first transaction timestamp"""
  firstTransactionAt: WalletTokenFilterRange
  """Filter by token amount bought in the past day"""
  tokenAmountBought1d: WalletTokenFilterRange
  """Filter by token amount sold in the past day"""
  tokenAmountSold1d: WalletTokenFilterRange
  """Filter by amount bought in USD in the past day"""
  amountBoughtUsd1d: WalletTokenFilterRange
  """Filter by amount sold in USD in the past day"""
  amountSoldUsd1d: WalletTokenFilterRange
  """Filter by realized profit in USD in the past day"""
  realizedProfitUsd1d: WalletTokenFilterRange
  """Filter by realized profit percentage in the past day"""
  realizedProfitPercentage1d: WalletTokenFilterRange
  """Filter by number of buys in the past day"""
  buys1d: WalletTokenFilterRange
  """Filter by number of sells in the past day"""
  sells1d: WalletTokenFilterRange
  """Filter by token amount bought in the past week"""
  tokenAmountBought1w: WalletTokenFilterRange
  """Filter by token amount sold in the past week"""
  tokenAmountSold1w: WalletTokenFilterRange
  """Filter by amount bought in USD in the past week"""
  amountBoughtUsd1w: WalletTokenFilterRange
  """Filter by amount sold in USD in the past week"""
  amountSoldUsd1w: WalletTokenFilterRange
  """Filter by realized profit in USD in the past week"""
  realizedProfitUsd1w: WalletTokenFilterRange
  """Filter by realized profit percentage in the past week"""
  realizedProfitPercentage1w: WalletTokenFilterRange
  """Filter by number of buys in the past week"""
  buys1w: WalletTokenFilterRange
  """Filter by number of sells in the past week"""
  sells1w: WalletTokenFilterRange
  """Filter by token amount bought in the past 30 days"""
  tokenAmountBought30d: WalletTokenFilterRange
  """Filter by token amount sold in the past 30 days"""
  tokenAmountSold30d: WalletTokenFilterRange
  """Filter by amount bought in USD in the past 30 days"""
  amountBoughtUsd30d: WalletTokenFilterRange
  """Filter by amount sold in USD in the past 30 days"""
  amountSoldUsd30d: WalletTokenFilterRange
  """Filter by realized profit in USD in the past 30 days"""
  realizedProfitUsd30d: WalletTokenFilterRange
  """Filter by realized profit percentage in the past 30 days"""
  realizedProfitPercentage30d: WalletTokenFilterRange
  """Filter by number of buys in the past 30 days"""
  buys30d: WalletTokenFilterRange
  """Filter by number of sells in the past 30 days"""
  sells30d: WalletTokenFilterRange
  """Filter by token amount bought in the past year"""
  tokenAmountBought1y: WalletTokenFilterRange
  """Filter by token amount sold in the past year"""
  tokenAmountSold1y: WalletTokenFilterRange
  """Filter by amount bought in USD in the past year"""
  amountBoughtUsd1y: WalletTokenFilterRange
  """Filter by amount sold in USD in the past year"""
  amountSoldUsd1y: WalletTokenFilterRange
  """Filter by realized profit in USD in the past year"""
  realizedProfitUsd1y: WalletTokenFilterRange
  """Filter by realized profit percentage in the past year"""
  realizedProfitPercentage1y: WalletTokenFilterRange
  """Filter by number of buys in the past year"""
  buys1y: WalletTokenFilterRange
  """Filter by number of sells in the past year"""
  sells1y: WalletTokenFilterRange
  """Filter by token balance"""
  tokenBalance: WalletTokenFilterRange
  """Filter by purchased token balance"""
  purchasedTokenBalance: WalletTokenFilterRange
  """Filter by token acquisition cost in USD"""
  tokenAcquisitionCostUsd: WalletTokenFilterRange
  """Filter by scammer score"""
  scammerScore: WalletTokenFilterRange
  """Filter by bot score"""
  botScore: WalletTokenFilterRange
}

"""Filters for a wallet on a specific token."""
input WalletTokenFiltersV2 {
  """Filter by last transaction timestamp"""
  lastTransactionAt: NumberFilter
  """Filter by first transaction timestamp"""
  firstTransactionAt: NumberFilter
  """Filter by token amount bought in the past day"""
  tokenAmountBought1d: NumberFilter
  """Filter by token amount sold in the past day"""
  tokenAmountSold1d: NumberFilter
  """Filter by amount bought in USD in the past day"""
  amountBoughtUsd1d: NumberFilter
  """Filter by amount sold in USD in the past day"""
  amountSoldUsd1d: NumberFilter
  """Filter by realized profit in USD in the past day"""
  realizedProfitUsd1d: NumberFilter
  """Filter by realized profit percentage in the past day"""
  realizedProfitPercentage1d: NumberFilter
  """Filter by number of buys in the past day"""
  buys1d: NumberFilter
  """Filter by number of sells in the past day"""
  sells1d: NumberFilter
  """Filter by token amount bought in the past week"""
  tokenAmountBought1w: NumberFilter
  """Filter by token amount sold in the past week"""
  tokenAmountSold1w: NumberFilter
  """Filter by amount bought in USD in the past week"""
  amountBoughtUsd1w: NumberFilter
  """Filter by amount sold in USD in the past week"""
  amountSoldUsd1w: NumberFilter
  """Filter by realized profit in USD in the past week"""
  realizedProfitUsd1w: NumberFilter
  """Filter by realized profit percentage in the past week"""
  realizedProfitPercentage1w: NumberFilter
  """Filter by number of buys in the past week"""
  buys1w: NumberFilter
  """Filter by number of sells in the past week"""
  sells1w: NumberFilter
  """Filter by token amount bought in the past 30 days"""
  tokenAmountBought30d: NumberFilter
  """Filter by token amount sold in the past 30 days"""
  tokenAmountSold30d: NumberFilter
  """Filter by amount bought in USD in the past 30 days"""
  amountBoughtUsd30d: NumberFilter
  """Filter by amount sold in USD in the past 30 days"""
  amountSoldUsd30d: NumberFilter
  """Filter by realized profit in USD in the past 30 days"""
  realizedProfitUsd30d: NumberFilter
  """Filter by realized profit percentage in the past 30 days"""
  realizedProfitPercentage30d: NumberFilter
  """Filter by number of buys in the past 30 days"""
  buys30d: NumberFilter
  """Filter by number of sells in the past 30 days"""
  sells30d: NumberFilter
  """Filter by token amount bought in the past year"""
  tokenAmountBought1y: NumberFilter
  """Filter by token amount sold in the past year"""
  tokenAmountSold1y: NumberFilter
  """Filter by amount bought in USD in the past year"""
  amountBoughtUsd1y: NumberFilter
  """Filter by amount sold in USD in the past year"""
  amountSoldUsd1y: NumberFilter
  """Filter by realized profit in USD in the past year"""
  realizedProfitUsd1y: NumberFilter
  """Filter by realized profit percentage in the past year"""
  realizedProfitPercentage1y: NumberFilter
  """Filter by number of buys in the past year"""
  buys1y: NumberFilter
  """Filter by number of sells in the past year"""
  sells1y: NumberFilter
  """Filter by token balance"""
  tokenBalance: NumberFilter
  """Filter by purchased token balance"""
  purchasedTokenBalance: NumberFilter
  """Filter by token acquisition cost in USD"""
  tokenAcquisitionCostUsd: NumberFilter
  """Filter by scammer score"""
  scammerScore: NumberFilter
  """Filter by bot score"""
  botScore: NumberFilter
}

"""A wallet ranking on a specific token."""
input WalletTokenRanking {
  """The attribute to rank wallets by"""
  attribute: WalletTokenRankingAttribute!
  """The direction to apply to the ranking attribute"""
  direction: RankingDirection!
}

"""Attributes for a wallet ranking on a specific token."""
enum WalletTokenRankingAttribute {
  """The first transaction timestamp"""
  firstTransactionAt
  """The last transaction timestamp"""
  lastTransactionAt
  """Token amount bought in the past day"""
  tokenAmountBought1d
  """Token amount sold in the past day"""
  tokenAmountSold1d
  """Amount bought in USD in the past day"""
  amountBoughtUsd1d
  """Amount sold in USD in the past day"""
  amountSoldUsd1d
  """Realized profit in USD in the past day"""
  realizedProfitUsd1d
  """Realized profit percentage in the past day"""
  realizedProfitPercentage1d
  """Number of buys in the past day"""
  buys1d
  """Number of sells in the past day"""
  sells1d
  """Token amount bought in the past week"""
  tokenAmountBought1w
  """Token amount sold in the past week"""
  tokenAmountSold1w
  """Amount bought in USD in the past week"""
  amountBoughtUsd1w
  """Amount sold in USD in the past week"""
  amountSoldUsd1w
  """Realized profit in USD in the past week"""
  realizedProfitUsd1w
  """Realized profit percentage in the past week"""
  realizedProfitPercentage1w
  """Number of buys in the past week"""
  buys1w
  """Number of sells in the past week"""
  sells1w
  """Token amount bought in the past 30 days"""
  tokenAmountBought30d
  """Token amount sold in the past 30 days"""
  tokenAmountSold30d
  """Amount bought in USD in the past 30 days"""
  amountBoughtUsd30d
  """Amount sold in USD in the past 30 days"""
  amountSoldUsd30d
  """Realized profit in USD in the past 30 days"""
  realizedProfitUsd30d
  """Realized profit percentage in the past 30 days"""
  realizedProfitPercentage30d
  """Number of buys in the past 30 days"""
  buys30d
  """Number of sells in the past 30 days"""
  sells30d
  """Token amount bought in the past year"""
  tokenAmountBought1y
  """Token amount sold in the past year"""
  tokenAmountSold1y
  """Amount bought in USD in the past year"""
  amountBoughtUsd1y
  """Amount sold in USD in the past year"""
  amountSoldUsd1y
  """Realized profit in USD in the past year"""
  realizedProfitUsd1y
  """Realized profit percentage in the past year"""
  realizedProfitPercentage1y
  """Number of buys in the past year"""
  buys1y
  """Number of sells in the past year"""
  sells1y
  """Token balance"""
  tokenBalance
  """Purchased token balance"""
  purchasedTokenBalance
  """Token acquisition cost in USD"""
  tokenAcquisitionCostUsd
  """The scammer score for the wallet."""
  scammerScore
  """The bot score for the wallet."""
  botScore
}

"""Metadata for a washtrade label."""
type WashtradeLabelForEvent {
  """The label type, 'washtrade'"""
  label: String!
}

"""Metadata for a webhook."""
type Webhook {
  """The ID of the webhook."""
  id: String!
  """The type of webhook. Can be `PRICE_EVENT`, `NFT_EVENT`, or `TOKEN_PAIR_EVENT`."""
  webhookType: WebhookType!
  """The given name of the webhook."""
  name: String!
  """The unix timestamp for the time the webhook was created."""
  created: Int!
  """The recurrence of the webhook. Can be `INDEFINITE` or `ONCE`."""
  alertRecurrence: AlertRecurrence!
  """The url to which the webhook message should be sent."""
  callbackUrl: String!
  """The status of the webhook. Can be `ACTIVE` or `INACTIVE`."""
  status: String!
  """The webhook group ID used to group webhooks together for ordered message sending."""
  groupId: String
  """The conditions which must be met in order for the webhook to send a message."""
  conditions: WebhookCondition!
  """The settings for retrying failed webhook messages."""
  retrySettings: RetrySettings
  """An optional bucket ID (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks)."""
  bucketId: String
  """An optional bucket sort key (max 64 characters). Can be used to query for subgroups of webhooks (useful if you have a large number of webhooks)."""
  bucketSortkey: String
  """The type of publishing for the webhook. If not set, it defaults to `SINGLE`."""
  publishingType: PublishingType
}

"""Webhook conditions that must be met for each webhook type."""
union WebhookCondition = PriceEventWebhookCondition | MarketCapEventWebhookCondition | TokenPairEventWebhookCondition | NftEventWebhookCondition | RawTransactionWebhookCondition

"""NFT marketplace names."""
enum WebhookNftEventFillSource {
  GEM
  ENSVISION
  BLUR
  NFTNERDS
  OPENSEA
  RARIBLE
  FLIPXYZ
  ECHELON
  SOUNDXYZ
  COINBASE
  MAGICEDEN
  ELEMENT
  KODEX
  RESERVOIRTOOLS
  GENIE
}

"""NFT event types."""
enum WebhookNftEventType {
  MINT
  SALE
  TRANSFER
}

"""The type of webhook."""
enum WebhookType {
  PRICE_EVENT
  NFT_EVENT
  TOKEN_PAIR_EVENT
  RAW_TRANSACTION
  MARKET_CAP_EVENT
}

"""Price stats for a pair over a time frame."""
type WindowedDetailedCurrencyPairStats {
  """The volume over the time frame."""
  volume: DetailedPairStatsStringMetrics
  """The buy volume over the time frame."""
  buyVolume: DetailedPairStatsStringMetrics
  """The sell volume over the time frame."""
  sellVolume: DetailedPairStatsStringMetrics
  """The opening price for the time frame."""
  open: DetailedPairStatsStringMetrics
  """The highest price in USD in the time frame."""
  highest: DetailedPairStatsStringMetrics
  """The lowest price in USD in the time frame."""
  lowest: DetailedPairStatsStringMetrics
  """The closing price forr the time frame."""
  close: DetailedPairStatsStringMetrics
  """The liquidity for the time frame."""
  liquidity: DetailedPairStatsStringMetrics
}

"""The currency stats for a wallet over a time window."""
type WindowedDetailedCurrencyWalletStats {
  """The volume in USD"""
  volumeUsd: String!
  """The volume in USD including tokens sold for which we do not have a price"""
  volumeUsdAll: String!
  """The cost of tokens held in the wallet"""
  heldTokenAcquisitionCostUsd: String!
  """The cost of tokens sold during the period"""
  soldTokenAcquisitionCostUsd: String!
  """The realized profit in USD"""
  realizedProfitUsd: String!
  """The average profit in USD per trade"""
  averageProfitUsdPerTrade: String!
  """The average swap amount in USD"""
  averageSwapAmountUsd: String!
  """The realized profit percentage"""
  realizedProfitPercentage: Float!
}

"""Price stats for an NFT collection over a time frame. Either in USD or the network's base token."""
type WindowedDetailedNftCurrencyStats {
  """The volume over the time frame."""
  volume: DetailedNftStatsStringMetrics
  """The average sale price in the time frame."""
  average: DetailedNftStatsStringMetrics
  """The opening price for the time frame."""
  open: DetailedNftStatsStringMetrics
  """The highest sale price in the time frame."""
  highestSale: DetailedNftStatsStringMetrics
  """The lowest sale price in the time frame."""
  lowestSale: DetailedNftStatsStringMetrics
  """The closing price for the time frame."""
  close: DetailedNftStatsStringMetrics
}

"""Numerical stats for an NFT collection over a time frame."""
type WindowedDetailedNftNonCurrencyStats {
  """The number of mints over the time frame."""
  mints: DetailedNftStatsNumberMetrics
  """The number of sales over the time frame."""
  sales: DetailedNftStatsNumberMetrics
  """The number of transfers over the time frame."""
  transfers: DetailedNftStatsNumberMetrics
  """The number of tokens sold over the time frame."""
  tokensSold: DetailedNftStatsStringMetrics
  """The number of unique buyers over the time frame."""
  uniqueBuyers: DetailedNftStatsNumberMetrics
  """The number of unique sellers over the time frame."""
  uniqueSellers: DetailedNftStatsNumberMetrics
  """The number of unique wallets (buyers or sellers) over the time frame."""
  uniqueSalesWallets: DetailedNftStatsNumberMetrics
  """The number of unique minters over the time frame."""
  uniqueMinters: DetailedNftStatsNumberMetrics
}

"""Detailed NFT stats over a time frame."""
type WindowedDetailedNftStats {
  """The duration used to request detailed NFT stats."""
  duration: DetailedNftStatsDuration!
  """The unix timestamp for the start of the window."""
  start: Int!
  """The unix timestamp for the end of the window."""
  end: Int!
  """The list of start/end timestamps broken down for each bucket within the window."""
  timestamps: [DetailedNftStatsBucketTimestamp]!
  """The currency stats in USD, such as volume."""
  statsUsd: WindowedDetailedNftCurrencyStats!
  """The currency stats in the network's base token, such as volume."""
  statsNetworkBaseToken: WindowedDetailedNftCurrencyStats!
  """The numerical stats, such as number of buyers."""
  statsNonCurrency: WindowedDetailedNftNonCurrencyStats!
}

"""Numerical stats for a pair over a time frame."""
type WindowedDetailedNonCurrencyPairStats {
  """The transaction count over the time frame."""
  transactions: DetailedPairStatsNumberMetrics
  """The number of buys over the time frame."""
  buys: DetailedPairStatsNumberMetrics
  """The number of sells over the time frame."""
  sells: DetailedPairStatsNumberMetrics
  """The number of unique traders over the time frame."""
  traders: DetailedPairStatsNumberMetrics
  """The number of unique buyers over the time frame."""
  buyers: DetailedPairStatsNumberMetrics
  """The number of unique sellers over the time frame."""
  sellers: DetailedPairStatsNumberMetrics
}

"""The non-currency stats for a wallet over a time window."""
type WindowedDetailedNonCurrencyWalletStats {
  """The number of swaps"""
  swaps: Int!
  """The number of unique tokens"""
  uniqueTokens: Int!
  """The number of wins"""
  wins: Int!
  """The number of losses"""
  losses: Int!
}

"""Detailed pair stats over a time frame."""
type WindowedDetailedPairStats {
  """The duration used to request detailed pair stats."""
  duration: DetailedPairStatsDuration!
  """The unix timestamp for the start of the window."""
  start: Int!
  """The unix timestamp for the end of the window."""
  end: Int!
  """The list of start/end timestamps broken down for each bucket within the window."""
  timestamps: [DetailedPairStatsBucketTimestamp]!
  """The currency stats in USD, such as volume."""
  statsUsd: WindowedDetailedCurrencyPairStats!
  """The numerical stats, such as number of buyers."""
  statsNonCurrency: WindowedDetailedNonCurrencyPairStats!
}

"""Detailed stats over a window."""
type WindowedDetailedStats {
  """The window size used to request detailed stats."""
  windowSize: DetailedStatsWindowSize!
  """The unix timestamp for the start of the window."""
  timestamp: Int!
  """The unix timestamp for the end of the window."""
  endTimestamp: Int!
  """The list of start/end timestamps broken down for each bucket within the window."""
  buckets: [DetailedStatsBucketTimestamp]!
  """The transaction count over the window."""
  transactions: DetailedStatsNumberMetrics!
  """The volume over the window."""
  volume: DetailedStatsStringMetrics!
  """The number of buys over the window."""
  buys: DetailedStatsNumberMetrics!
  """The number of sells over the window."""
  sells: DetailedStatsNumberMetrics!
  """The number of unique buyers over the window."""
  buyers: DetailedStatsNumberMetrics!
  """The number of unique sellers over the window."""
  sellers: DetailedStatsNumberMetrics!
  """The number of unique traders over the window."""
  traders: DetailedStatsNumberMetrics
  """The buy volume over the window."""
  buyVolume: DetailedStatsStringMetrics
  """The sell volume over the window."""
  sellVolume: DetailedStatsStringMetrics
}

"""The stats for a wallet over a time window."""
type WindowedWalletStats {
  """The wallet address"""
  walletAddress: String!
  """The network ID"""
  networkId: Int
  """The start timestamp"""
  start: Int!
  """The end timestamp"""
  end: Int!
  """The last transaction timestamp"""
  lastTransactionAt: Int!
  """The stats related to currency"""
  statsUsd: WindowedDetailedCurrencyWalletStats!
  """The stats related to non-currency"""
  statsNonCurrency: WindowedDetailedNonCurrencyWalletStats!
}

